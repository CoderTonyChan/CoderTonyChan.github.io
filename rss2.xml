<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tony&#39;s Studio</title>
    <link>https://blog.tonystudio.ml/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 21 Feb 2019 08:04:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HTTP/HTTPS 抓包 —— mitmproxy</title>
      <link>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/</link>
      <guid>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/</guid>
      <pubDate>Mon, 30 Apr 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。&lt;br&gt;
mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。<br>mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它我们可以对接Python脚本，用Python实现监听后的处理。另一个是mitmweb，它是一个Web程序，通过它我们可以清楚观察mitmproxy捕获的请求。<br>下面我们来了解它们的用法。</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-6b01852319b8673cabc3bc9e524c4d05_hd.jpg" alt="BeanTech Desktop"></p><h1 id="https通讯过程">https通讯过程</h1><hr><p>在讲https抓包之前,必须要了解https的整个校验和通信过程,我们就简单的精简的画一下重要的过程,至于什么三个随机数或者通信秘钥的生成就不详细介绍,主要是针对讲一下https的中间人攻击(https抓包的实现基础)过程</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-68a34f7acfa8ebf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/825"></p><p>在这个过程中,正常的话,如果哪个步骤出现问题,链接都会停止,无法进行通信,这个是https简单的校验的一个过程介绍.</p><p>那么,https在抓包工具中是如何实现抓包的呢?<br>抓包工具就是在上面的过程中,证书认证生成通信密钥中做了手脚.<br>以青花瓷为例,大家使用青花瓷抓http请求时,由于没有做安全校验,很容易就实现了数据拦截和转发,至于https呢?</p><h1 id="中间人攻击的情形">中间人攻击的情形</h1><hr><p>抓取https包的时候,青花瓷会要求使用者 对抓包的设备(手机或其他设备)<br>,安装一个证书,安装这个证书的时候,其实是安装了一个根证书(允许颁发CA的一个证书机构的根证书),当你安装了该根证书之后,该证书机构颁发的其他证书,默认都会被你的系统所信任,这个就是青花瓷完成https抓包的一个重要前提!!</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-d95be6d0815def28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/980"></p><p>当客户端设置了代理,并且开始发出网络请求的时候,这个网络请求的校验过程就会变成这样</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-1c2bb870ed73506f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><ul><li>当客户端Client对服务器Server发送请求(带着随机数和加密算法),由于青花瓷做了代理,请求被青花瓷拦截,处理(青花瓷的角色现在对于Client来说是服务器),青花瓷将客户端带的随机数和加密算法处理,然后返回自己的证书通过客户端校验,获取到客户端提交的请求参数等数据,</li><li>青花瓷作为客户端(自己去产生随机数和携带支持的加密算法)去请求刚刚Client想要请求的Server,然后,Server会和青花瓷完成上面讲的那个完整的校验,并且读取青花瓷带错来的具体请求,返回正常的数据结果.</li><li>青花瓷得到服务器数据的返回结果之后,开始继续和过程1中的Client以服务器的身份,去做处理,首先收到客户端的随机数和加密算法,自己生成一个随机数和选择一个客户端的加密算法,然后<strong><strong><strong><strong><em>重要</em></strong></strong></strong></strong>* 青花瓷会返回一个伪造的CA证书(公钥和真实的server不一样,但是域名是一样的,或者说,除了域名是一致的,其他的都不是一致的,而且这个签发机构是青花瓷之前让你安装的根证书 签发的,所以,当返回这个证书的时候,你的客户端的信任链是可以完成的,会被系统信任),然后Client在这个伪造的证书(对于青花瓷和Client是真实证书(验证信任链和证书信息都通过了),但是和真实的域名对应的证书来看,是伪造证书)的基础上,和青花瓷通信,然后青花瓷再和Server通信,成了一个中间人的角色,这样,整个过程的数据传输,都被青花瓷给监听到了,在此,中间人攻击的过程 就完成了</li></ul><h1 id="如何防止被抓包">如何防止被抓包</h1><hr><p>当进行网络请求的时候,客户端判断当前是否设置了代理,如果设置了代理,不允许进行访问(不知道微信浏览器 里面 是不是这样实现的,微信里面 设置了代理看公众号等信息就都不允许看了,无法访问)<br>附带判断是否设置代理的代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)getProxyStatus &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *proxySettings = <span class="built_in">NSMakeCollectable</span>([(<span class="built_in">NSDictionary</span> *)<span class="built_in">CFNetworkCopySystemProxySettings</span>() autorelease]);</span><br><span class="line">    <span class="built_in">NSArray</span> *proxies = <span class="built_in">NSMakeCollectable</span>([(<span class="built_in">NSArray</span> *)<span class="built_in">CFNetworkCopyProxiesForURL</span>((<span class="built_in">CFURLRef</span>)[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.google.com"</span>], (<span class="built_in">CFDictionaryRef</span>)proxySettings) autorelease]);</span><br><span class="line">    <span class="built_in">NSDictionary</span> *settings = [proxies objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"host=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyHostNameKey]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"port=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyPortNumberKey]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"type=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey] isEqualToString:<span class="string">@"kCFProxyTypeNone"</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//没有设置代理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置代理了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端本地做证书校验,并且设置不仅仅校验公钥,设置完整的正式校验模式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+(AFSecurityPolicy*)customSecurityPolicy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// /先导入证书</span></span><br><span class="line">    <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"test"</span> ofType:<span class="string">@"cer"</span>];<span class="comment">//证书的路径</span></span><br><span class="line">    <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</span><br><span class="line">    <span class="comment">// AFSSLPinningModeCertificate 使用证书验证模式 (AFSSLPinningModeCertificate是证书所有字段都一样才通过认证，AFSSLPinningModePublicKey只认证公钥那一段，AFSSLPinningModeCertificate更安全。但是单向认证不能防止“中间人攻击”)</span></span><br><span class="line">    AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</span><br><span class="line">    <span class="comment">// allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO</span></span><br><span class="line">    <span class="comment">// 如果是需要验证自建证书，需要设置为YES</span></span><br><span class="line">    securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//validatesDomainName 是否需要验证域名，默认为YES；</span></span><br><span class="line">    <span class="comment">//假如证书的域名与你请求的域名不一致，需把该项设置为NO；如设成NO的话，即服务器使用其他可信任机构颁发的证书，也可以建立连接，这个非常危险，建议打开。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//置为NO，主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。</span></span><br><span class="line">    <span class="comment">//如置为NO，建议自己添加对应域名的校验逻辑。</span></span><br><span class="line">    securityPolicy.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">NSSet</span>&lt;<span class="built_in">NSData</span>*&gt; * set = [[<span class="built_in">NSSet</span> alloc]initWithObjects:certData  , <span class="literal">nil</span>];</span><br><span class="line">    securityPolicy.pinnedCertificates = set;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话,证书会校验请求的时候不仅仅校验域名,会将证书中的公钥及其他信息也进行校验,这样的话,中间人伪造的证书就无法通过验证,无法进行抓包</p>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Hexo] Theme BeanTech</title>
      <link>https://blog.tonystudio.ml/2017/03/18/hexo-theme-beantech/</link>
      <guid>https://blog.tonystudio.ml/2017/03/18/hexo-theme-beantech/</guid>
      <pubDate>Sat, 18 Mar 2017 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Ported Theme of &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hux Blog&lt;/a&gt;, Thank &lt;a h
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Ported Theme of <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>, Thank <a href="https://github.com/Huxpro" target="_blank" rel="noopener">Huxpro</a> for designing such a flawless theme.</p><p>This BeanTech theme created by <a href="http://beantech.org" target="_blank" rel="noopener">YuHsuan</a> modified from the original Porter <a href="http://kaijun.rocks/hexo-theme-huxblog/" target="_blank" rel="noopener">Kaijun</a></p></blockquote><h1 id="live-demo"><a href="http://beantech.org" target="_blank" rel="noopener">Live Demo</a></h1><hr><p><img src="http://beantech.org/img/beantech-desktop.png" alt="BeanTech Desktop"></p><h1 id="usage">Usage</h1><hr><p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p><p>Let’s begin!!!</p><h2 id="init">Init</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class="line"><span class="built_in">cd</span> hexo-beantech</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="modify">Modify</h2><hr><p>Modify <code>_config.yml</code> file with your own info.<br>Especially the section:</p><h3 id="deployment">Deployment</h3><p>Replace to your own repo!</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sidebar-settings">Sidebar settings</h3><p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>    <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"&lt;your description&gt;"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/&lt;your</span> <span class="string">avatar</span> <span class="string">path&gt;</span></span><br></pre></td></tr></table></figure><p>and activate your personal widget you like</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">widgets:</span>         <span class="comment"># here are widget you can use, you can comment out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p><h3 id="signature-setup">Signature Setup</h3><p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">signature:</span> <span class="literal">true</span>   <span class="comment"># show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure><h3 id="go-to-top-icon-setup">Go to top icon Setup</h3><p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p><h3 id="post-tag">Post tag</h3><p>You can decide to show post tags or not.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">home_posts_tag:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="home_posts_tag-true.png" alt="home_posts_tag-true"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">home_posts_tag:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="home_posts_tag-false.png" alt="home_posts_tag-false"></p><h3 id="markdown-render">Markdown render</h3><p>My markdown render engine plugin is <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line"><span class="attr">  render:</span></span><br><span class="line"><span class="attr">    html:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    breaks:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    linkify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    typographer:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    quotes:</span> <span class="string">'“”‘’'</span></span><br></pre></td></tr></table></figure><p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>(<span class="string">"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        anchors.options = &#123;</span><br><span class="line">          visible: <span class="string">'hover'</span>,</span><br><span class="line">          placement: <span class="string">'left'</span>,</span><br><span class="line">          icon: ℬ <span class="comment">// this is the header anchor "unicode" icon</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h2 id="hexo-basics">Hexo Basics</h2><hr><p>Some hexo command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">"&lt;post name&gt;"</span> <span class="comment"># you can change post to another layout if you want</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate <span class="comment"># generate the static file</span></span><br><span class="line">hexo server <span class="comment"># run hexo in local environment</span></span><br><span class="line">hexo deploy <span class="comment"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure><h1 id="have-fun-_">Have fun ^_^</h1><hr><!-- Place this tag in your head or just before your close body tag. --><script async defer src="https://buttons.github.io/buttons.js"></script><!-- Place this tag where you want the button to render. --><p>Please <a class="github-button" href="https://github.com/YenYuHsuan/hexo-theme-beantech" data-icon="octicon-star" aria-label="Star YenYuHsuan/hexo-theme-beantech on GitHub" target="_blank" rel="noopener">Star</a> this Project if you like it! <a class="github-button" href="https://github.com/YenYuHsuan" aria-label="Follow @YenYuHsuan on GitHub" target="_blank" rel="noopener">Follow</a> would also be appreciated!<br>Peace!</p>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2017/03/18/hexo-theme-beantech/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTTP/HTTPS 抓包 —— Charles</title>
      <link>https://blog.tonystudio.ml/2016/09/18/HTTPS-Charles/</link>
      <guid>https://blog.tonystudio.ml/2016/09/18/HTTPS-Charles/</guid>
      <pubDate>Sun, 18 Sep 2016 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;网上数据抓包,在当前抓包工具横行的时代,对于一个IT开发者来说,是一个很简单的必备的技能,例如青花瓷(Charles)等等工具.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.devtang.com/ima
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>网上数据抓包,在当前抓包工具横行的时代,对于一个IT开发者来说,是一个很简单的必备的技能,例如青花瓷(Charles)等等工具.</p></blockquote><p><img src="https://blog.devtang.com/images/charles-logo.png" alt="BeanTech Desktop"></p><h1 id="https通讯过程">https通讯过程</h1><hr><p>在讲https抓包之前,必须要了解https的整个校验和通信过程,我们就简单的精简的画一下重要的过程,至于什么三个随机数或者通信秘钥的生成就不详细介绍,主要是针对讲一下https的中间人攻击(https抓包的实现基础)过程</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-68a34f7acfa8ebf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/825"></p><p>在这个过程中,正常的话,如果哪个步骤出现问题,链接都会停止,无法进行通信,这个是https简单的校验的一个过程介绍.</p><p>那么,https在抓包工具中是如何实现抓包的呢?<br>抓包工具就是在上面的过程中,证书认证生成通信密钥中做了手脚.<br>以青花瓷为例,大家使用青花瓷抓http请求时,由于没有做安全校验,很容易就实现了数据拦截和转发,至于https呢?</p><h1 id="中间人攻击的情形">中间人攻击的情形</h1><hr><p>抓取https包的时候,青花瓷会要求使用者 对抓包的设备(手机或其他设备)<br>,安装一个证书,安装这个证书的时候,其实是安装了一个根证书(允许颁发CA的一个证书机构的根证书),当你安装了该根证书之后,该证书机构颁发的其他证书,默认都会被你的系统所信任,这个就是青花瓷完成https抓包的一个重要前提!!</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-d95be6d0815def28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/980"></p><p>当客户端设置了代理,并且开始发出网络请求的时候,这个网络请求的校验过程就会变成这样</p><p align="center"><img src="https://upload-images.jianshu.io/upload_images/5505686-1c2bb870ed73506f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><ul><li>当客户端Client对服务器Server发送请求(带着随机数和加密算法),由于青花瓷做了代理,请求被青花瓷拦截,处理(青花瓷的角色现在对于Client来说是服务器),青花瓷将客户端带的随机数和加密算法处理,然后返回自己的证书通过客户端校验,获取到客户端提交的请求参数等数据,</li><li>青花瓷作为客户端(自己去产生随机数和携带支持的加密算法)去请求刚刚Client想要请求的Server,然后,Server会和青花瓷完成上面讲的那个完整的校验,并且读取青花瓷带错来的具体请求,返回正常的数据结果.</li><li>青花瓷得到服务器数据的返回结果之后,开始继续和过程1中的Client以服务器的身份,去做处理,首先收到客户端的随机数和加密算法,自己生成一个随机数和选择一个客户端的加密算法,然后<strong><strong><strong><strong><em>重要</em></strong></strong></strong></strong>* 青花瓷会返回一个伪造的CA证书(公钥和真实的server不一样,但是域名是一样的,或者说,除了域名是一致的,其他的都不是一致的,而且这个签发机构是青花瓷之前让你安装的根证书 签发的,所以,当返回这个证书的时候,你的客户端的信任链是可以完成的,会被系统信任),然后Client在这个伪造的证书(对于青花瓷和Client是真实证书(验证信任链和证书信息都通过了),但是和真实的域名对应的证书来看,是伪造证书)的基础上,和青花瓷通信,然后青花瓷再和Server通信,成了一个中间人的角色,这样,整个过程的数据传输,都被青花瓷给监听到了,在此,中间人攻击的过程 就完成了</li></ul><h1 id="如何防止被抓包">如何防止被抓包</h1><hr><p>当进行网络请求的时候,客户端判断当前是否设置了代理,如果设置了代理,不允许进行访问(不知道微信浏览器 里面 是不是这样实现的,微信里面 设置了代理看公众号等信息就都不允许看了,无法访问)<br>附带判断是否设置代理的代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)getProxyStatus &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *proxySettings = <span class="built_in">NSMakeCollectable</span>([(<span class="built_in">NSDictionary</span> *)<span class="built_in">CFNetworkCopySystemProxySettings</span>() autorelease]);</span><br><span class="line">    <span class="built_in">NSArray</span> *proxies = <span class="built_in">NSMakeCollectable</span>([(<span class="built_in">NSArray</span> *)<span class="built_in">CFNetworkCopyProxiesForURL</span>((<span class="built_in">CFURLRef</span>)[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.google.com"</span>], (<span class="built_in">CFDictionaryRef</span>)proxySettings) autorelease]);</span><br><span class="line">    <span class="built_in">NSDictionary</span> *settings = [proxies objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"host=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyHostNameKey]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"port=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyPortNumberKey]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"type=%@"</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([[settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey] isEqualToString:<span class="string">@"kCFProxyTypeNone"</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//没有设置代理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置代理了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端本地做证书校验,并且设置不仅仅校验公钥,设置完整的正式校验模式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+(AFSecurityPolicy*)customSecurityPolicy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// /先导入证书</span></span><br><span class="line">    <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"test"</span> ofType:<span class="string">@"cer"</span>];<span class="comment">//证书的路径</span></span><br><span class="line">    <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</span><br><span class="line">    <span class="comment">// AFSSLPinningModeCertificate 使用证书验证模式 (AFSSLPinningModeCertificate是证书所有字段都一样才通过认证，AFSSLPinningModePublicKey只认证公钥那一段，AFSSLPinningModeCertificate更安全。但是单向认证不能防止“中间人攻击”)</span></span><br><span class="line">    AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</span><br><span class="line">    <span class="comment">// allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO</span></span><br><span class="line">    <span class="comment">// 如果是需要验证自建证书，需要设置为YES</span></span><br><span class="line">    securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//validatesDomainName 是否需要验证域名，默认为YES；</span></span><br><span class="line">    <span class="comment">//假如证书的域名与你请求的域名不一致，需把该项设置为NO；如设成NO的话，即服务器使用其他可信任机构颁发的证书，也可以建立连接，这个非常危险，建议打开。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//置为NO，主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。</span></span><br><span class="line">    <span class="comment">//如置为NO，建议自己添加对应域名的校验逻辑。</span></span><br><span class="line">    securityPolicy.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">NSSet</span>&lt;<span class="built_in">NSData</span>*&gt; * set = [[<span class="built_in">NSSet</span> alloc]initWithObjects:certData  , <span class="literal">nil</span>];</span><br><span class="line">    securityPolicy.pinnedCertificates = set;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话,证书会校验请求的时候不仅仅校验域名,会将证书中的公钥及其他信息也进行校验,这样的话,中间人伪造的证书就无法通过验证,无法进行抓包</p>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2016/09/18/HTTPS-Charles/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git操作指南</title>
      <link>https://blog.tonystudio.ml/2015/02/16/git-collect/</link>
      <guid>https://blog.tonystudio.ml/2015/02/16/git-collect/</guid>
      <pubDate>Mon, 16 Feb 2015 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。&lt;br&gt;
mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。<br>mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它我们可以对接Python脚本，用Python实现监听后的处理。另一个是mitmweb，它是一个Web程序，通过它我们可以清楚观察mitmproxy捕获的请求。<br>下面我们来了解它们的用法。</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-6b01852319b8673cabc3bc9e524c4d05_hd.jpg" alt="BeanTech Desktop"></p><h1 id="git删除所有历史提交记录">git删除所有历史提交记录</h1><hr><p>把旧项目提交到Git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1. Checkout</span><br><span class="line"></span><br><span class="line">   git checkout --orphan latest_branch</span><br><span class="line"></span><br><span class="line">2. Add all the files</span><br><span class="line"></span><br><span class="line">   git add -A</span><br><span class="line"></span><br><span class="line">3. Commit the changes</span><br><span class="line"></span><br><span class="line">   git commit -am "commit message"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. Delete the branch</span><br><span class="line"></span><br><span class="line">   git branch -D master</span><br><span class="line"></span><br><span class="line">5.Rename the current branch to master</span><br><span class="line"></span><br><span class="line">   git branch -m master</span><br><span class="line"></span><br><span class="line">6.Finally, force update your repository</span><br><span class="line"></span><br><span class="line">   git push -f origin master</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2015/02/16/git-collect/#disqus_thread</comments>
    </item>
    
    <item>
      <title>常用软件合集</title>
      <link>https://blog.tonystudio.ml/2015/02/16/soft-collect/</link>
      <guid>https://blog.tonystudio.ml/2015/02/16/soft-collect/</guid>
      <pubDate>Mon, 16 Feb 2015 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Mac / iOS / Android 的常用软件 😊 。&lt;br&gt;
可自行搜索一些我提供的关键词 😊 。&lt;br&gt;
下面我们来了解它们的用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://pn9jzw2t9.bkt
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Mac / iOS / Android 的常用软件 😊 。<br>可自行搜索一些我提供的关键词 😊 。<br>下面我们来了解它们的用法。</p></blockquote><p><img src="http://pn9jzw2t9.bkt.clouddn.com/2019/soft-collect.1.jpg" alt="BeanTech Desktop"></p><h1 id="mac">Mac</h1><hr><p>Mac电脑上有很多应用，这里不提供任何安装包，默认是链接到对应的App官网，另外，如果App有上架到AppStore，建议在AppStore购买下载，说不定下次换电脑时会非常方便！</p><h2 id="效率">效率</h2><hr><p>macOS自带的。</p><h3 id="提醒事项">提醒事项</h3><h3 id="邮件">邮件</h3><h3 id="日历">日历</h3><h3 id="系统边栏股票日历">系统边栏(股票/日历)</h3><h3 id="reeder">Reeder</h3><p>配合RSSHub + inoreader 使用</p><h3 id="即时分享airdropsnapdrop">即时分享(AirDrop/<a href="https://snapdrop.net/" target="_blank" rel="noopener">snapdrop</a>)</h3><h3 id="synergy">synergy</h3><p>同时使用2部电脑</p><h3 id="airserver">AirServer</h3><p>AirServer 7.1.4 将Mac变成一个AirPlay终端</p><p>airserver_7.1.4 TNT.dmg</p><h2 id="存储">存储</h2><hr><p>开发工具。</p><h3 id="icloud">iCloud</h3><p>5G</p><h3 id="google-drive">Google Drive</h3><p>图片/视频 无限量 Google Photo的搜索功能更加强大</p><h3 id="one-drive">One Drive</h3><p>5G</p><h3 id="百度云">百度云</h3><p>2T</p><h2 id="ide">IDE</h2><hr><p>开发工具。</p><h3 id="xcode"><a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12" target="_blank" rel="noopener">Xcode</a></h3><p>Xcode是 Mac, iPhone, iPad, Apple TV, and Apple Watch 等应用的开发集成工具。</p><h3 id="visual-studio-code"><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">Visual Studio Code</a></h3><!-- ![](https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Visual_Studio_Code.png)  --><img src="https://github.com/iHTCboy/iGallery/raw/master/BlogImages/2018/07/20180715-macOS-Visual_Studio_Code.png" width="40" height="40" div="" align="left" style=" margin-right: 20px;">Visual Studio Code是一个由微软开发的，同时支持Windows、Linux和macOS操作系统且开放源代码的文本编辑器。它支持调试，并内置了Git 版本控制功能，同时也具有开发环境功能，例如代码补全、代码片段、代码重构等。<h3 id="android-studio"><a href="https://developer.android.com/studio/" target="_blank" rel="noopener">Android Studio</a></h3><p>Android Studio是一个为Android平台开发程序的集成开发环境。</p><h3 id="intellij-idea"><a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">IntelliJ IDEA</a></h3><p>Android Studio是一个为Android平台开发程序的集成开发环境。</p><h3 id="navicat-premium">Navicat Premium</h3><p>Navicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、阿里云和腾讯云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。</p><h3 id="robo-3t">Robo 3T</h3><h2 id="运维相关command-line-tools">运维相关（COMMAND LINE TOOLS)</h2><h3 id="transmit"><a href="https://panic.com/transmit/" target="_blank" rel="noopener">Transmit</a></h3><img src="https://res.cloudinary.com/hrscywv4p/image/upload/c_limit,fl_lossy,h_9000,w_1200,f_auto,q_auto/v1/1389536/256x256_gwovqc.png" width="40" height="40" div="" align="left" style=" margin-right: 20px;"><br><br>Transmit for mac是一款功能齐全Mac用户必备的FTP客户端。<h3 id="microsoft-remote-desktop">Microsoft Remote Desktop</h3><p>App Store</p><h3 id="homebrew">Homebrew</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure><h3 id="~sshconfig">~/.ssh/config</h3><p>iCloud备份</p><h3 id="gitconfig">.gitconfig</h3><p>iCloud备份</p><h3 id="openssh">OpenSSH</h3><h3 id="docker">Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><h3 id="curl">cURL</h3><h3 id="wget">wget</h3><h3 id="adb">adb</h3><h3 id="git"><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></h3><p>版本控制工具，官网提供<a href="https://git-scm.com/download/gui/mac" target="_blank" rel="noopener">数十种GUI客户端</a> for Mac。</p><h2 id="抓包">抓包</h2><h3 id="charles">Charles</h3><p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).</p><h3 id="mitmproxy"><a href="https://mitmproxy.org/" target="_blank" rel="noopener">mitmproxy</a></h3><p>一款支持HTTP(S)的中间人代理工具，可在终端下运行，可用于抓包</p><h3 id="postman">postman</h3><h3 id="wireshark">Wireshark</h3><p>Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。</p><h3 id="reveal">Reveal</h3><p>Reveal是iOS开发工具中的神器之一，它能够在应用程序运行过程中调试应用程序界面。</p><h2 id="system">SYSTEM</h2><hr><p>增强或改变macOS系统功能，常驻状态栏或成为系统服务的一部分。</p><h3 id="istat-menus-for-mac">iStat Menus for Mac</h3><p>激活码</p><p>Email: <a href="mailto:982092332@qq.com" target="_blank" rel="noopener">982092332@qq.com</a> SN: GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-6NEQC-CRMUD-8MZ2K-66SRB-SU8EW-EDLZ9-TGH3S-8SGA</p><h3 id="telegram">Telegram</h3><p>社交</p><h3 id="the-unarchiver">The Unarchiver</h3><p>The Unarchiver是一款免费实用的解压缩应用程序，用户可以使用它解压多达30种不同的压缩格式文件。</p><p>App Store</p><h3 id="microsoft-office">Microsoft Office</h3><h3 id="evernote"><a href="https://evernote.com/" target="_blank" rel="noopener">Evernote</a></h3><p>App Store</p><h3 id="final-cut-pro">Final Cut Pro</h3><p>Final Cut Pro TNT</p><h3 id="adobe">Adobe</h3><p>Adobe Zii.app</p><p>Portraiture+3.0.27%E7%A3%A8%E7%9A%AE%E6%8F%92%E4%BB%B6%E4%B8%AD%E6%96%87%E7%89%88.dmg</p><h3 id="tuxera-ntfs">Tuxera NTFS</h3><p>Tuxera NTFS.zip</p><h2 id="下载">下载</h2><h3 id="aria2"><a href="https://aria2.github.io/" target="_blank" rel="noopener">aria2</a></h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>aria2</span><br></pre></td></tr></table></figure><p>配合 <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a> 和 UI(YAAW和Aria2 WebUI)使用</p><h3 id="you-get"><a href="https://you-get.org/" target="_blank" rel="noopener">You-Get</a></h3><p>网络富媒体命令行下载工具。</p><h3 id="迅雷"><a href="http://mac.xunlei.com/" target="_blank" rel="noopener">迅雷</a></h3><p>Mac迅雷3.0</p><h2 id="书籍">书籍</h2><h3 id="ibook">iBook</h3><h3 id="kindle">Kindle</h3><h3 id="calibre"><a href="http://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a></h3><p>Calibre 是一款强大且易用的电子书本地管理工具，可以在 Windows、macOS 和 Linux 平台集中整理各种格式的电子书</p><p><a href="https://github.com/kovidgoyal/calibre" target="_blank" rel="noopener">GitHub</a></p><h3 id="kindle-comic-converter">Kindle Comic Converter</h3><p>Kindle Comic Converter (KCC) 是一个可以把 PNG、JPG、GIF、CBZ、CBR 和 CB7 格式的漫画转换成 EPUB 或 MOBI 格式电子书的免费开源软件，制作 E-Ink 设备适用的电子书从此轻而易举。KCC 最初是专门为 Kindle 所开发的，但是现在对 EPUB 3.0 和 CBZ 也有效。此外 KCC 在处理图片时会针对电子墨水显示屏进行全面优化。</p><p><a href="https://github.com/ciromattia/kcc" target="_blank" rel="noopener">GitHub</a></p><h2 id="影音">影音</h2><h3 id="airplay">Airplay</h3><h3 id="vlc">VLC</h3><h3 id="downie-3">Downie 3</h3><img src="https://www.haven.vip/wp-content/uploads/2018/09/downie-3.png" width="40" height="40" div="" align="left" style=" margin-right: 20px;"><br>Downie 3 for Mac TNT<br><br><h3 id="plex">Plex</h3><p>套装 配合Android TV , 📱 , Kodi用</p><h3 id="kodi">Kodi</h3><p>套装 配合Android TV用</p><h2 id="proxy-ss">Proxy SS</h2><hr><p>你懂的</p><h3 id="shadowsocksx-ng"><a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">ShadowsocksX-NG</a></h3><p>Next Generation of <a href="https://github.com/shadowsocks/shadowsocks-iOS" target="_blank" rel="noopener">ShadowsocksX</a></p><h3 id="surge">Surge</h3><p>Surge 2.1.3 TNT .dmg</p><h2 id="插件">插件</h2><hr><p>Safari 和 Chrome的插件</p><h3 id="tampermonkey">Tampermonkey</h3><p><a href="https://tampermonkey.net/" target="_blank" rel="noopener">https://tampermonkey.net/</a></p><h3 id="userscript">Userscript+</h3><p>Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger</p><p><a href="https://greasyfork.org/zh-CN/scripts/24508-userscript-show-site-all-userjs" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/24508-userscript-show-site-all-userjs</a></p><h3 id="cors插件">CORS插件</h3><h3 id="vuereact-开发插件">Vue/React 开发插件</h3><h3 id="postman插件">postman插件</h3><h3 id="json格式化插件">json格式化插件</h3><h3 id="websocket插件">websocket插件</h3><h3 id="aria2和baiduexporter插件">aria2和BaiduExporter插件</h3><h2 id="音乐">音乐</h2><h3 id="ieasemusic-基于网易云音乐"><a href="http://music.163.com/" target="_blank" rel="noopener">ieaseMusic</a> 基于网易云音乐</h3><h1 id="ios">iOS</h1><hr><p>iOS！</p><h2 id="常用">常用</h2><h3 id="照片">照片</h3><p>上传一些共享相簿 / 看一些推荐视频</p><h3 id="shadowrocket-quantumult">Shadowrocket / Quantumult</h3><p>梯子</p><h3 id="jsbox-pin">JSBox / Pin</h3><p>Javbox / Axgle / XList / 小良</p><h3 id="reeder">Reeder</h3><p>Reeder + RSSHub + ino</p><h3 id="捷径">捷径</h3><p>开门(自抓API) + 磁力 + 小良</p><h3 id="米家">米家</h3><p>监控</p><h3 id="图书">图书</h3><p>系统自带</p><h3 id="kindle">Kindle</h3><p>结合Vol.moe + Amaze 服务器使用</p><h3 id="keep-watch">Keep / Watch</h3><p>结合 Apple Watch + 健身记录使用</p><h3 id="家庭">家庭</h3><p>结合 HomeAssient + HomeBridge使用</p><h3 id="豆瓣">豆瓣</h3><p>记录 电影 + 图书 + 游戏 + 音乐?</p><h3 id="one-note">One Note</h3><p>记录</p><h3 id="印象笔记">印象笔记</h3><p>记录</p><h2 id="运维">运维</h2><h3 id="documents">Documents</h3><p>上传下载 就是不支持隐藏文件</p><h3 id="termius">Termius</h3><p>ssh</p><h3 id="cloud-console">Cloud Console</h3><p>Google 云</p><h3 id="远程桌面">远程桌面</h3><p>Google Chrome</p><h2 id="dlna">DLNA</h2><p>——————<br>影音 基本上Infuse能满足所有需求了 Plex也不需要安装</p><h3 id="infuse">Infuse</h3><p>自动下载海边</p><h3 id="vlc">VLC</h3><p>开源</p><h3 id="videoamptvside">Video&amp;TVSide</h3><p>Sony TV遥控</p><h3 id="迅雷">迅雷</h3><p>需要自签名</p><h2 id="存储">存储</h2><h3 id="文件icloud">文件(iCloud)</h3><p>可以管理所有支持的网盘 (Google / OneDrive / 百度云)</p><h3 id="google-drive">Google Drive</h3><p>免费上传一些 图片和视频 图片的分类还是Google 做得好 而且还能搜索</p><h3 id="onedrive">OneDrive</h3><p>5G 免费硬盘  结合 One Note 使用</p><h3 id="百度云">百度云</h3><p>2T 啥都有</p><h2 id="google-4宝">Google 4宝</h2><h3 id="google-相册">Google 相册</h3><h3 id="google-map">Google Map</h3><h3 id="chrome">Chrome</h3><h3 id="youtube">Youtube</h3><h2 id="社交">社交</h2><h3 id="telegram">Telegram</h3><h3 id="facebook">Facebook</h3><h3 id="instagram">Instagram</h3><h3 id="微博">微博</h3><p>虽然很多用Rss订阅过了</p><h2 id="越狱">越狱</h2><h3 id="ios-10">iOS 10</h3><p><a href="https://mrmad.com.tw/ios10-jailbreakme" target="_blank" rel="noopener">JailbreakMe</a>  <a href="https://mrmad.com.tw" target="_blank" rel="noopener">mrmad</a></p><h3 id="ios-11">iOS 11</h3><p><a href="https://mrmad.com.tw/unc0ver" target="_blank" rel="noopener">unc0ver</a> <a href="https://mrmad.com.tw" target="_blank" rel="noopener">mrmad</a></p><h3 id="ios-12">iOS 12</h3><p><a href="https://mrmad.com.tw/rootlessjb3" target="_blank" rel="noopener">rootlessJB</a> <a href="https://mrmad.com.tw" target="_blank" rel="noopener">mrmad</a></p><p>配合<a href="https://ipswbeta.com/category/ipa-library/" target="_blank" rel="noopener">ipswbeta</a> 下载ipa</p><h2 id="游戏">游戏</h2><h3 id="r-play-ps4-message">R-play / PS4 Message</h3><h3 id="dq-1-8">DQ 1-8</h3><p>PP助手 越狱版</p><h3 id="小鸡">小鸡</h3><h1 id="android-tv">Android TV</h1><p>————</p><h3 id="termux">Termux</h3><p>APKMirror APKPure</p><h3 id="ssh-server">SSH Server</h3><p>APKMirror APKPure</p><h3 id="pocket-git">Pocket Git</h3><p>Pocket Git APK</p><h3 id="文件管理器">文件管理器+</h3><p>APKMirror APKPure</p><h3 id="es文件浏览器">ES文件浏览器</h3><p>APKMirror APKPure</p><h3 id="shadowsocksr">shadowsocksR</h3><p>shadowsocksR android apk</p><p><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p><h3 id="plex">Plex</h3><h3 id="kodi">Kodi</h3><h3 id="小鸡">小鸡</h3><h3 id="ppsspp">PPSSPP</h3><h3 id="damonps2">DamonPS2</h3><p>DamonPS2 Pro APK 1.3.3 BIOS</p><p>Version 1.2.1 has cracked, can open without any other space or Lucky Patcher</p>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2015/02/16/soft-collect/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
