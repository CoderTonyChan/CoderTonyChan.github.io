<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tony&#39;s Studio</title>
    <link>https://blog.tonystudio.ml/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Tony写字的地方</description>
    <pubDate>Tue, 04 Jun 2019 03:03:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>WWDC19</title>
      <link>https://blog.tonystudio.ml/2019/06/04/2019-06-04-WWDC19/</link>
      <guid>https://blog.tonystudio.ml/2019/06/04/2019-06-04-WWDC19/</guid>
      <pubDate>Tue, 04 Jun 2019 03:02:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://sspai.com/post/55078&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iPad 有了自己的系统，还有新 Mac Pro…… 昨晚发布会要点都在这了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;北京时间今日凌晨 1 点
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://sspai.com/post/55078" target="_blank" rel="noopener">iPad 有了自己的系统，还有新 Mac Pro…… 昨晚发布会要点都在这了</a></p><p>北京时间今日凌晨 1 点，苹果在美国加州的圣何塞会展中心召开了一年一度的 WWDC 全球开发者大会。作为受邀媒体，少数派今年继续全程在美国现场报道本次开发者大会。在将近 2 个半小时的开幕演讲中，苹果发布了拥有全局深色模式的 iOS 13、全新独立系统的 iPadOS 以及 watchOS 6 和 tvOS 13。</p><p>作为 WWDC 的惯例，本次新系统的发布依旧是发布会的重点，不管是独立出去的 iPadOS 还是推出 Project Catalyst 的 macOS，对于消费者和开发者都是一件影响颇深的事件。与此同时，模块化的高性能 Mac Pro 终于也带着全新的设计回归，而支持 Retina 6K 和 Pro Display XDR 的专业显示器也赚足了眼球。</p><h1 id="ios-13">iOS 13</h1><p>作为本次 WWDC 的重头戏，iOS 13 闪亮登场。继去年深色模式登陆 macOS 之后，iPhone 和 iPad 也终于拥有了自己的深色模式，并且为照片应用新增了强大的浏览和编辑功能、提供以 Apple ID 登录应用或网站的选项以及可以在地图中获得更多的信息。</p><p>除了新增功能，iOS 13 在性能优化上也有出色的表现，例如应用启动速度提升了两倍、应用更新速度也有提升等。</p><h2 id="对眼睛更友好的深色模式">对眼睛更友好的深色模式</h2><p>千呼万唤始出来，传了多年的 iOS 深色模式终于发布了。这次发布的 iOS 深色模式和 macOS 上的深色模式一样都是系统级的，所有的界面以及自带应用都已经适配了深色的配色方案，在低光情况下有很好的表现，屏幕看起来让眼睛更加舒服。</p><p>除了系统自带应用，苹果也向第三方应用的开发者开放了接口，开发者们也可以方便地让自己的应用适配 iOS 的深色模式。除了手动启用，iOS 的深色模式也可以通过设定固定的时间或者依据当地的日出日落时间来自动切换。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847636-4f0e0700-86b6-11e9-9ecd-b69d570b8864.png" alt="image"></p><h2 id="更加强大的照片编辑工具">更加强大的照片编辑工具</h2><p>有机器学习加持之后，照片应用获得了更加强大的功能。首先，照片应用可以通过突出最好的照片、自动隐藏杂乱或者重复的照片来更好地展示过去的一天、一月或一年中重要的事件，巧妙地结合照片和视频，让使用者在浏览、发现和重温最喜欢的回忆时变得更加容易。<br><img src="https://user-images.githubusercontent.com/16996753/58847646-56cdab80-86b6-11e9-9c0c-9e31b827f628.png" alt="image"></p><p>其次，照片应用获得了丰富的编辑功能。只需轻轻一滑，你就可以轻松地调整照片的特效，通过原生的功能解决了调用第三方工具的繁琐，为摄影爱好者们提供了更多的创造可能性。除了照片，iOS 13 的照片应用还可以直接编辑视频，用户可以直接在其中旋转、裁剪和使用滤镜，方便了很多。<br><img src="https://user-images.githubusercontent.com/16996753/58847651-59c89c00-86b6-11e9-919c-e93393832a37.png" alt="image"></p><p>同时，人像模式新增了一个光线调节和一个 High-Key Mono 效果的选项，可以创造出更加好看的肖像照片。</p><h2 id="便捷-私密的苹果账号登录">便捷、私密的苹果账号登录</h2><p>越来越多的网站需要我们使用手机、邮箱、社交账号等来注册和登录，不但不方便管理，而且极易泄露自己的隐私。</p><p>苹果这次推出了使用 Apple ID 登录的功能，轻松、简单地完成身份验证和登录网站。同时，为了保护使用者的隐私，苹果允许用户隐藏自己的邮箱地址，甚至可以自动生成一个随机的邮箱地址来替代。用户使用 Apple ID 来登录的时候，可以通过 Face ID 或者 Touch ID 来验证，加上双重验证，不但方便而且还确保了自己的隐私不会被泄漏。<br><img src="https://user-images.githubusercontent.com/16996753/58847660-61884080-86b6-11e9-8293-640205be5edf.png" alt="image"></p><h2 id="全新的地图体验">全新的地图体验</h2><p>为了让 iOS 用户获得更好的地图使用体验，苹果在驱车 400 万英里收集数据后开始重构地图应用。在 iOS 13 的全新地图应用中，用户可以获取到更广泛的道路覆盖范围、更好的行人数据、更精确的地址和更详细的土地覆盖，并将在近两年推广到更多的国家和地区。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847674-6b11a880-86b6-11e9-9bd8-657f3c4e3156.gif" alt="cb71009d55de32f362487a55716b6400"></p><p>iOS 13 的地图应用新增了街景的功能，所有的图像由全新的基础地图和高分辨率的 3D 摄影构成，帮助环顾功能提供了一个平滑无缝过渡的街景浏览体验。除此之外，地图应用还可以轻松分享最喜欢的餐厅、旅游目的地或者与朋友购物的地方，或者导航到常去的目的地，如家、办公地点、健身房或学校等。</p><h2 id="其他值得一提的功能">其他值得一提的功能：</h2><ul><li>提醒事项应用重做，UI 设计交互完全改变，新增的快速工具栏可以方便地添加时间、日期、地点、旗标以及附件；</li><li>信息应用可以自动共享用户的姓名和照片、Memoji 或者 Animoji，同时 Memoji 可以制作成贴纸在自带应用和第三方应用中使用；</li><li>借助 Neural TTS ，Siri 有了一个更加自然的声音，并且提供更加个性化的自动化推荐；</li><li>AirPods 可以通过 Siri 来读取和回复信息；</li><li>语音控制可以让用户完全通过语音来控制 iPhone、iPad 和 Mac；</li><li>原生键盘提供了滑动输入的选项。</li></ul><p><img src="https://user-images.githubusercontent.com/16996753/58847702-7e247880-86b6-11e9-97bc-d0e0d3eb74c9.png" alt="image"></p><p>iOS 13 升级仅支持 iPhone 6S 及之后推出的手机，以及 iPod touch 7。</p><h1 id="ipados">iPadOS</h1><p>在第一代 iPad Pro 发布将近四年之后，Apple 终于正式将 iPad 作为一个独立的平台与 iOS 独立开来，进一步强调了 iPad 的生产力属性，并在本次为它带来了许多独占功能。</p><h2 id="多任务处理">多任务处理</h2><p>本次 iPadOS 最大的更新在于对多任务处理的巨大改进。首先，Slide Over 从一个单纯的悬浮窗口变为了一个拥有完整功能的窗口模式。在本次更新后，你可以通过滑动应用窗口顶部的 Home Indicator 来切换应用，相当于在原来的多任务中心之外又嵌套了一个专属于 Slide Over 的多任务中心。</p><p>关闭 Slide Over 中的应用窗口也是一样的操作，只需将应用卡片上滑退出即可。若想将 Slide Over 中的应用设为全屏应用，则需将应用窗口拖拽至屏幕的顶部。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847712-88467700-86b6-11e9-9161-0c5ada6b1bc4.gif" alt="eeecf7bcea1f73e149ef348d32928e7b"></p><p>与此同时，iPad 终于支持了同一应用的分屏模式，而不再像之前只能使用两个应用同屏。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847724-94cacf80-86b6-11e9-9155-154f150f11d8.png" alt="image"></p><p>除了单纯的分屏模式，同一应用还可以同时在分屏模式和 Slide Over 模式下同时使用。如果你想查看同一应用的不同位置，你可以使用从 macOS 新引入的 App Exposé，只需点击它在 Dock 上的图标即可进入 App Exposé 视图。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847728-97c5c000-86b6-11e9-8c34-2f457f68bdda.png" alt="image"></p><p>除了拖拽窗口，现在直接拖拽链接、地址等信息也可以创建新的应用窗口，免去了先打开应用的麻烦。</p><h2 id="主屏幕能摆更多图标了还能直接看小组件">主屏幕能摆更多图标了，还能直接看小组件</h2><p>在 全新的 iPadOS 中，主屏现在可以放下更多的应用。另外，iPadOS 直接去掉了 iOS 上的负一屏，如果要在 iPadOS 上查看小组件，只需要通过右滑手势，就可以直接在主屏幕拉出控件，和主屏图标一起显示，利用小组件查看信息或者进行一些快捷操作会变得更加方便。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847741-a0b69180-86b6-11e9-8262-28b29ba0f455.gif" alt="1b320c1bce0a19f83fd13aa6440a1417"></p><h2 id="文件应用更像-finder-了safari-新增下载管理器">文件应用更像 Finder 了，Safari 新增下载管理器</h2><p>作为一个主打生产力的平台，系统文件应用在 iPadOS 中更新自然不会让人意外。新版文件应用支持了最多达 3 栏的显示视图，你还可以直接在文件应用中预览文件的各项信息—比如类型、大小、修改时间、图片的分辨率等等—而不用打开文件。<br><img src="https://user-images.githubusercontent.com/16996753/58847756-ab712680-86b6-11e9-97d1-8f82e76b6eb1.png" alt="image"></p><p>iOS 12 中文件应用虽然能共享文件，但是没有支持文件夹共享功能，iPadOS 终于补上了这一功能。你可以直接在文件应用里将文件夹共享给别人、或者连接别人共享出来的文件夹。除了共享云端文件，iPadOS 支持将 U 盘、SD 卡等外部存储设备连上 iPad，直接读取里面的文件。<br><img src="https://user-images.githubusercontent.com/16996753/58847759-af9d4400-86b6-11e9-9be9-98d95893fa30.png" alt="image"></p><p>在文件管理方面，Safari 也有新动作：终于支持了下载管理器。管理下载文件也非常简单：在系统文件应用找到下载文件夹就可以了。<br><img src="https://user-images.githubusercontent.com/16996753/58847768-b461f800-86b6-11e9-811e-f857a108b13e.png" alt="image"></p><p>除了下载管理器，Safari 在网页浏览方面也有比较大的改进：iPadOS 会直接在 Safari 中展示桌面版网页，并对一些需要鼠标操作的元素进行了触控优化，让你可以获得足够优秀和流畅的桌面级网页浏览体验。</p><h2 id="打字更方便了也更快了">打字更方便了，也更快了</h2><p>iPadOS 支持的 Floating Keyboard 浮动键盘能够让你通过双指捏合手势将键盘变为一个可拖动的悬浮窗口，如果你没有在用 Smart Keyboard 等外接蓝牙键盘设备，用双指捏合手势将键盘拖到左右手的任意一边打在效率应该会高不少。</p><p>除了双指捏合手势，iPad OS 还新增了三指捏合复制、张开粘贴文字以及三指左滑撤销手势，按照发布会上的说法就是，你再也不用摇晃大尺寸的 iPad 来撤销误输入的文字了。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847782-c2b01400-86b6-11e9-8e81-d494ed1da52e.gif" alt="c1af160661d6cc90c8b4d393b13b8c81"></p><p>此外，iPadOS 还支持了单指拖动选中指定文字、双击选中单词等实用手势，在输入效率方面的提升还是比较明显的。</p><h2 id="其它值得关注的-ipados-特性">其它值得关注的 iPadOS 特性：</h2><ul><li>Apple Pencil 的响应延迟时间由 20ms 提升到了 9ms；</li><li>Apple Pencil 工具栏支持拖拽移动位置，将 Apple Pencil 移到 iPad 屏幕角落会触发截图操作并自动弹出标注界面；</li><li>新增 Sidecar 功能，让你通过 Wi-Fi 将 iPad 作为 Mac 的第二显示屏；</li><li>在 iPadOS 上用 Face ID 解锁速度比 iOS 12 快了 30%；</li><li>与 iOS 同步支持 Voice Control、AirPods 共享、HomePod 上的 Handoff 音频传输等功能；</li><li>支持下载和管理字体。</li><li>iPadOS 更新仅支持 iPad Air 2 及之后推出的 iPad、iPad Pro 和 iPad mini。</li></ul><h1 id="macos-1015">macOS 10.15</h1><p>今年苹果把 macOS 10.15 命名为 macOS Catalina。正如此前爆料所言，今年的 macOS 第一个主要的新变化便是将 iTunes 进行了拆分。三个全新的 App：音乐、播客和 TV 将取代 iTunes，而此前同步与备份 iOS 设备的功能在新版系统里则被集成到 Finder 中。<br><img src="https://user-images.githubusercontent.com/16996753/58847809-dbb8c500-86b6-11e9-92d0-ae597643739c.png" alt="image"></p><p>在机器学习的帮助下，新的播客应用拥有更强大的搜索功能。现在输入关键词后，应用将为你直接搜索音频内容中出现该关键词的播客。<br><img src="https://user-images.githubusercontent.com/16996753/58847816-df4c4c00-86b6-11e9-938c-7060e2713a61.png" alt="image"></p><p>新的 TV 应用则支持在 Mac 上播放 4K HDR 内容，此外还提供了杜比视界和杜比全景声的支持。<br><img src="https://user-images.githubusercontent.com/16996753/58847823-e4110000-86b6-11e9-9b4c-d7bc50934cf0.png" alt="image"></p><p>另外新版的提醒事项和照片应用也将同步登陆 macOS Catalina。</p><p>macOS Catalina 第二个主要的新功能是 Sidecar，它可以让你的 iPad 变身成为 Mac 的拓展屏幕。不仅如此，在新系统中你还可以把 iPad 当作 Mac 的手写板或绘图板来使用，用 Apple Pencil 直接在屏幕上画画和批注。该功能目前支持包括 Adobe Illustrator、Affinity Photo 和 Maya 在内的多款专业级应用。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847840-f12def00-86b6-11e9-9266-8e91345fa275.png" alt="image"></p><p>去年苹果在 iOS 上推出了屏幕时间功能，让你可以了解和控制自己花费在 iOS 设备上的时间。今年 macOS Catalina 则把这项功能带到了 macOS 上。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847851-f7bc6680-86b6-11e9-8209-8923b61b1aad.png" alt="image"></p><p>苹果系统在辅助功能方面体验一直走在行业的前列。macOS Catalina 今年则在语音控制上更进一步，现在用户可以完全通过语音来控制使用 macOS，从打开应用、选择菜单功能再到输入文字，整个流程完全可以通过语音指令完成。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847861-fbe88400-86b6-11e9-8232-ae8bff97e301.png" alt="image"></p><p>macOS Catalina 中还新增了一个名叫「查找」的新 App。它集成了 iOS 上查找 iPhone 和查找我的朋友两款应用的功能。此外它还新增了一个可以查找未联网 Mac 的功能。另外配有 T2 安全芯片的 Mac 还可以在新系统中增加启动锁。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847870-00ad3800-86b7-11e9-9495-c8c3e9d3e15e.png" alt="image"></p><p>苹果曾在去年介绍过帮助开发者将 iPad 应用快速迁移至 macOS 上的 Marzipan 项目，今年苹果将它正式命名为 Project Catalyst。苹果表示他们在过去的一年里做了大量的工作，来保证迁移项目能够得到更流畅的体验。发布会上苹果表示包括 Twitter、Jira 和 Gameloft 在内的多家第三方厂商正在参与这一项目，对自家的应用进行适配。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847878-0571ec00-86b7-11e9-9cfe-fdb32b407b64.png" alt="image"></p><p>最后，设备支持方面，macOS Catalina 支持 2015 年及之后的 MacBook，2012 年及之后的 MacBook Air、MacBook Pro、Mac mini 和 iMac，2017 年及之后的 iMac Pro 以及 2013 年及之后的 Mac Pro。</p><h1 id="watchos-6">watchOS 6</h1><p>作为 watchOS 的第 6 个版本，watchOS 6 终于有了独立的 App Store 应用，这意味着你可以直接在 Apple Watch 上搜索、下载和运行应用，不再需要依赖 iPhone。Apple Watch 上的 App Store 支持语音和 Scribble 手写两种搜索应用的方式，你也可以在 Apple Watch 上直接查看 App Store 编辑的推荐或者来自用户的评价。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847889-0b67cd00-86b7-11e9-83ab-645020a26dfd.png" alt="image"></p><p>除了 App Store，watchOS 6 也将计算器、语音备忘录和有声书三款应用带到了 Apple Watch 上，其中计算器应用还支持了小费计算这样的实用功能。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847892-0e62bd80-86b7-11e9-81f8-70f8520dc313.png" alt="image"></p><h2 id="其它值得关注的-watchos-新特性有">其它值得关注的 watchOS 新特性有：</h2><ul><li><p>新增渐变色、大数字、模块化等多个新表盘样式。<br><img src="https://user-images.githubusercontent.com/16996753/58847915-24707e00-86b7-11e9-8723-9e7279fff6ca.png" alt="image"></p></li><li><p>新增运动记录趋势分析功能，watchOS 会根据你的运动情况给出调整建议，并同步在 iOS 中的「健身记录」应用中进行展示。<br><img src="https://user-images.githubusercontent.com/16996753/58847920-28040500-86b7-11e9-88a3-31bc5431e8da.png" alt="image"></p></li><li><p>新增月经周期记录功能，支持月经、排卵期提醒等。<br><img src="https://user-images.githubusercontent.com/16996753/58847926-2b978c00-86b7-11e9-92c6-e776333fcab9.png" alt="image"></p></li><li><p>新增环境噪音检测功能，并会在当前环境噪音过大时进行提醒。<br><img src="https://user-images.githubusercontent.com/16996753/58847929-2fc3a980-86b7-11e9-9fa5-530a4fb18789.png" alt="image"></p></li><li><p>新增正点报时功能。<br>watchOS 支持包括 Apple Watch Series 1 在内之后的全部 Apple Watch 设备，不支持初代 Apple Watch。要想升级 watchOS 6，你需要有一台 iPhone 6s 或更新的 iOS 设备，并且确保 iPhone 升级到了 iOS 13 或者更新的系统版本。你可以在 Apple 官网查看 watchOS 6 的详细信息。</p></li></ul><h1 id="tvos-13">tvOS 13</h1><p>tvOS 13 支持了多账号功能，并且会根据每位家庭成员的观影记录进行个性化推荐，Apple Music 还支持实时显示正在播放歌曲的歌词。<br><img src="https://user-images.githubusercontent.com/16996753/58847942-3baf6b80-86b7-11e9-960a-b47af563bebb.png" alt="image"></p><p>在游戏娱乐方面，tvOS 13 支持了 Xbox One 和 PS DualShock 两款游戏手柄，在 Apple TV 上玩游戏将能够获得更好的游戏体验。最后，Apple 还与 BBC Natural History 纪录片剧组合作，在 tvOS 13 上带来了一系列 HDR 高清海底壁纸，让你在家就能拥有身临其境的海底世界体验。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847954-47029700-86b7-11e9-9273-6b58237fc225.png" alt="image"></p><p>tvOS 13 支持目前在售的 Apple TV 4K 和 Apple TV HD 两款型号设备，你可以在 tvOS 官网查看 tvOS 13 的新特性。</p><p>iOS 13、iPadOS、macOS Catalina、tvOS 13 和 watchOS 6 的 Beta 测试版本目前已经开放给开发者进行下载，7 月份会对所有人开放公开测试版本。如果你担心测试版本的系统可能会有不稳定的情况，可以等到今年秋季更新这些系统的正式版本。</p><h1 id="mac-pro-和-pro-display-xdr">Mac Pro 和 Pro Display XDR</h1><p>2017 年 曾有消息 传出苹果正在重新设计 Mac Pro。时隔两年，苹果终于在本次 WWDC 上正式推出了这款全新的 Mac Pro。</p><p>新款 Mac Pro 回归了经典的塔式机箱外形，整个结构采用模块化设计。侧边则采用了类似「擦丝器」的镂空设计，底部可选配 4 个方便移动用的轮子，设计语言与上一代大相径庭。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847967-52ee5900-86b7-11e9-9f48-a1e1400fb781.gif" alt="43ef3c55961d8d071e0017b253aef61e"></p><p>苹果称这个设计主要是为了新款 Mac Pro 强大的配置而服务，事实也的确如此。新款 Mac Pro 最高可选配 28 核的英特尔至强处理器和 1.5TB DDR4 ECC 的内存。它同时配有 8 个 PCIe 接口，其中 4 个提供 double-wide 设计以适应更大的拓展卡。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847974-5b469400-86b7-11e9-9529-e09767f1d147.png" alt="image"></p><p>为了提供充足的视频性能，苹果还专门为新款 Mac Pro 设计了一个名为 MPX 的拓展模块，它可以为两块显卡提供高速连接。新款 Mac Pro 可最高选配 2 个带有 2 块 AMD Radeon Pro Vega 2 显卡的 MPX 模块，这意味着它能够提供高达 128GB 的 HBM2 高速显存。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847979-600b4800-86b7-11e9-899e-e80e7d503a41.png" alt="image"></p><p>不仅如此，新款 Mac Pro 还配有一个专门的硬件加速卡，用于处理 4K 甚至是 8K 视频的渲染和转码，每秒可处理 63 亿像素的数据，满足专业人士对于剪辑 ProRes Raw 素材的需求。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847982-64376580-86b7-11e9-83e8-6bbf8d569ba3.png" alt="image"></p><p>接口方面，新款 Mac Pro 则提供了 4 个雷雳 3 接口，2 个 USB-A 接口 和 2 个 10Gb 以太网接口。</p><p>新款 Mac Pro 起售价 5999 美元，配有 32GB 内存、8 核心至强处理器、Radeon Pro 580X 显卡以及 256GB SSD 硬盘。今年秋季正式发售。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847987-6ac5dd00-86b7-11e9-9d9d-9546c3932524.png" alt="image"></p><p>此外，苹果还推出了 Pro Display XDR 专业级显示器。它拥有一块 32 寸的 IPS LCD 屏幕，分辨率为 6016x3384，苹果称其为 Retina 6K Display。这款显示器在对比度方面达到了 1,000,000:1 的标准，亮度为 1000 nits，峰值亮度可达 1600 nits，苹果表示它在 HDR 上表现非常出色，超过了一般的行业标准，因此他们把它称为 Extreme Dynamic Range，简称「XDR」。</p><p><img src="https://user-images.githubusercontent.com/16996753/58847995-744f4500-86b7-11e9-9e34-5d5ec9e15cb7.png" alt="image"></p><p>为了提供更出色的显示体验，苹果还为 Pro Display XDR 设计了一个多角度可调的桌面支架，支持竖屏模式显示。另外 Pro Display XDR 还可选配带有 Nano-texture 处理的屏幕，可在保证屏幕显示效果的同时降低屏幕的反射率。</p><p><img src="https://user-images.githubusercontent.com/16996753/58848005-7913f900-86b7-11e9-8d81-b1dd4fe5e745.png" alt="image"></p><p>Pro Display XDR 售价为 4999 美元，带有 Nano-texture 屏幕的版本售价为 5999 美元，桌面支架需单独购买，售价 999 美元，今年秋季正式发售。</p><p><img src="https://user-images.githubusercontent.com/16996753/58848013-80d39d80-86b7-11e9-93c1-21c43667c0e6.png" alt="image"></p><p>以上就是本次发布会的主要内容，你可以继续关注 「少数派带你看 WWDC 2019」 特别专题，我们将陆续为你带来更多关于新系统的详细介绍文章。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/06/04/2019-06-04-WWDC19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WWDC19临近，对苹果生态的一些建议</title>
      <link>https://blog.tonystudio.ml/2019/06/03/2019-06-03-WWDC19/</link>
      <guid>https://blog.tonystudio.ml/2019/06/03/2019-06-03-WWDC19/</guid>
      <pubDate>Mon, 03 Jun 2019 02:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;随着 iOS 13 的发布日期越来越接近，网上爆出的资料是iOS 13的暗黑模式和iTunes即将拆分成3个App。iTunes是我用过最好的音乐管理软件，没有之一。希望管理软件的能力不会减弱。&lt;/p&gt;
&lt;p&gt;以下是一些对苹果生态的一些期待（建议）。&lt;/p&gt;
&lt;h1 id=
        
      
      </description>
      
      <content:encoded><![CDATA[<p>随着 iOS 13 的发布日期越来越接近，网上爆出的资料是iOS 13的暗黑模式和iTunes即将拆分成3个App。iTunes是我用过最好的音乐管理软件，没有之一。希望管理软件的能力不会减弱。</p><p>以下是一些对苹果生态的一些期待（建议）。</p><h1 id="itunes">iTunes</h1><hr><ul><li>苹果自家的歌词，一直欠我们的UI和格式。</li><li>拆分App后管理功能不能砍，iTunes Server希望能更好支持其他系统（Win 10）</li></ul><h1 id="homepod">HomePod</h1><hr><ul><li>能直接串流播放局域网中同一Apple ID的iTunes Server中的音乐（现在只能用iPhone桥接）</li><li>能支持更多国内的在线服务，比如QQ/网易云（这个感觉不可能）</li></ul><h1 id="apple-watch">Apple Watch</h1><hr><ul><li>支持AirPlay功能 （为啥watch没有AirPlay功能？只能用蓝牙，蓝牙能配对Android的机子么？）</li></ul><h1 id="siri">Siri</h1><hr><ul><li>声纹控制（各种隐私导致所有东西都要iPhone授权，目前需要iPhone一直连接同一Wi-Fi 或者苹果你自己组网？）</li></ul><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/06/03/2019-06-03-WWDC19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>「零编程基础」的你可以这样做数据可视化</title>
      <link>https://blog.tonystudio.ml/2019/04/30/2019-04-30-Visualization-tutorial/</link>
      <guid>https://blog.tonystudio.ml/2019/04/30/2019-04-30-Visualization-tutorial/</guid>
      <pubDate>Tue, 30 Apr 2019 03:30:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://sspai.com/post/54169&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;爬取2000篇 Matrix 文章，这是一份可视化踹门教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文需要用到的工具分别如下：&lt;/p&gt;
&lt;u
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://sspai.com/post/54169" target="_blank" rel="noopener">爬取2000篇 Matrix 文章，这是一份可视化踹门教程</a></p><p>本文需要用到的工具分别如下：</p><ul><li>数据收集工具 Chrome 插件：Web Scraper</li><li>数据简单清洗工具：Excel</li><li>数据可视化工具：Tableau</li></ul><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/30/2019-04-30-Visualization-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>环绕声耳机科学</title>
      <link>https://blog.tonystudio.ml/2019/04/30/2019-05-08-Surround-Earphone/</link>
      <guid>https://blog.tonystudio.ml/2019/04/30/2019-05-08-Surround-Earphone/</guid>
      <pubDate>Tue, 30 Apr 2019 03:30:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://www.bilibili.com/read/cv2466088?share_source=copy_link&amp;amp;share_medium=iphone&amp;amp;bbid=a811fa6671bc4ac9a5d0d972014
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://www.bilibili.com/read/cv2466088?share_source=copy_link&amp;share_medium=iphone&amp;bbid=a811fa6671bc4ac9a5d0d9720149061a&amp;ts=1557234708" target="_blank" rel="noopener">UP主的问答时间 B站各类视频内容音频部分的科学食用指南</a> Trybass</p><p>最近UP主周围的小伙伴们不少在问道UP主关于环绕声、耳机和在线视频的很多问题。于是乎UP主上B站搜索和调查了一下，姆姆姆X-X。</p><p>其实B站上有不少以声音为主要元素的视频内容，不过UP主感觉还是很有必要向小伙伴们来科普和分享这些视频内容声音部分的科学食用指南的。</p><h1 id="小伙伴们问b站上的杜比-dts的测试环绕声究竟是什么">小伙伴们问：B站上的杜比、DTS的测试环绕声究竟是什么？</h1><p>UP主答：要回答这个问题，UP主先向小伙伴们介绍一下B站的UP主们都能够上传些什么东东。</p><p><img src="https://user-images.githubusercontent.com/16996753/57343828-7e912880-7177-11e9-99bd-cbeb9efb10c3.png" alt="image"></p><p>上面图片是B站官方对UP主上传视频内容的规格限制说明讷~。UP主帮小伙伴们划重点出来了哦。<br>也就是说小伙伴们在B站上看视频时听到的声音只能够是AAC格式2声道或者单声道的声音哦。至于杜比家的AC3，E-AC3，TrueHD的.thd文件或者DTS家的DTS声音文件，UP主们都是绞尽脑汁都上传不了的哦。</p><p>嗯~，话说AAC是支持多声道的呐~ 不过，UP主将AAC5.1声道的内容上传后，系统会自动二压和转换成2声道立体声的啦，铛铛铛~5.1环绕声白做T-T。</p><p>所以，如果视频声称什么7.1声道环绕声测试，什么杜比全景声源码直接播放什么的，对此UP主采取保留意见X-X</p><p>不过UP主在此也倡议B站能够支持48000的采样率。在视频领域，48000的采样率才是默认的标准规格采样率，系统对48000采样率的声音进行44100的二次采样，品质破坏实在太大，而且太不专业了。</p><h1 id="小伙伴们问b站为什么要对up主们的上传音频格式经行限制">小伙伴们问：B站为什么要对UP主们的上传音频格式经行限制？</h1><p>UP主答：这个问题其实很大。UP主就站在小伙伴们的角度上举两个例子：首先很多小伙伴们手上的设备包括手机、平板等等并能够很好的处理和支持环绕声内容，比如DTS HD音轨等等，这样小伙伴们就只能看无声视频啦~。其次，真正环绕声的内容数据量都很大，DTS HDMA和Dolby TrueHD采用无损压缩码率都以Mbps来计算，嗯~看完视频，小伙伴们的流量套餐也就炸了~（移动happy~ing），嗯~，当小伙伴们网络信号不好的时候更容易卡出翔呐~</p><h1 id="小伙伴们问我怎样才能看到我所播放的音视频信息呢">小伙伴们问：我怎样才能看到我所播放的音视频信息呢？</h1><p>UP主答：嗯~UP主这次就充当一回临时客服大大。以电脑的网页端为例：</p><ul><li><p>播放器设置中选择H5播放器，如下图所示：<br><img src="https://user-images.githubusercontent.com/16996753/57343842-9072cb80-7177-11e9-8199-6abd33cd761e.png" alt="image"></p></li><li><p>然后右击视频，选择视频统计信息，如下图：<br><img src="https://user-images.githubusercontent.com/16996753/57343846-94065280-7177-11e9-92e9-fe53dc0b22ae.png" alt="image"></p></li><li><p>再然后就可以看到实时的音视频信息啦！如下图：<br><img src="https://user-images.githubusercontent.com/16996753/57343849-9668ac80-7177-11e9-9f0f-4eec34b3fd6b.png" alt="image"></p></li><li><p>嗯嗯~至于还有其它很多情况嘛，还请各位小伙伴们去请教拿工资的客服大大吧~</p></li></ul><h1 id="小伙伴们问那么在b站上的很多视频节目的确能够听到精彩的不一样的环绕效果啦这是怎么回事呢">小伙伴们问：那么在B站上的很多视频节目的确能够听到精彩的不一样的环绕效果啦，这是怎么回事呢？</h1><p>UP主答：的确是这样呢，小伙伴们没有听错啦。其实要在AAC2.0声道的规格下呈现各种环绕声在当前的技术和科学是可行的呢~。这里UP主要稍微引入一个叫做“双耳信号”的专业词汇呢，English叫”Binaural Signal”。在目前B站上所有视频内容的音频部分如果从格式上分就只有AAC一种，然而AAC格式并不是造成环绕听感的原因哦。如果从信号特点上分的话有2类呢，一类是我们熟知的2声道立体声，小伙伴们是不可能从这类信号上听到环绕声的啦。而另一类就是双耳信号，小伙伴们能够听到环绕感觉的就是这类信号的音频内容呢。</p><h1 id="小伙伴们问能否更加详细的说明一下么-">小伙伴们问：能否更加详细的说明一下么^-^</h1><p>UP主答：OK哦！首先呢，双耳信号是从信号内容的角度来分的，所以音频格式对它没什么影响，也就是说说双耳信号可以是AAC格式，也可以是MP3格式。这就是为什么小伙伴们能够在B站上听到双耳信号的第一个原因。第二点，绝大多数情况下，双耳信号和通常所说的立体声在声道数量上是一样的呢，都是2路信号。这就是小伙伴们能够在B站听到它的第二个原因呢。但是两者的信号定义却不相同哦，通常立体声是对应定义为左声道和右声道，但是双耳信号的定义是左耳朵听到的声音和右耳朵听到的声音呢^-^，因为正常人就只有2只耳朵嘛。</p><h1 id="小伙伴们问x_x-有什么不同">小伙伴们问：X_X? 有什么不同？</h1><p>UP主答：简单来说，当小伙伴们在听2声道的立体声音箱时，左声道声音从左喇叭发出，右声道的声音从右喇叭发出。但是小伙伴的左耳朵听到的声音却=左喇叭的声音+右喇叭的声音+空间信息（反射，房间等等空间声音大杂烩），同样的右耳朵也一样。这就是不一样嘛。</p><h1 id="小伙伴们问那听耳机呢">小伙伴们问：那听耳机呢？</h1><p>UP主答：姆姆姆~小伙伴们用耳机听立体声音乐的时候，两者信号被近似画上的等号，因为右耳朵听不到左耳机的声音嘛~所以这也就是小伙伴们听耳机和听音箱会有不一样感受的原因之一啊。换句话说，如果能够把小伙伴们在听耳机时候左耳朵听到的声音变成听音箱时候一样的声音特性的话，听耳机和听音箱就没啥差别了呢^-^。这也是各种虚拟环绕声算法的设计目标之一哦~嗯嗯~又是一个很大的问题呢，UP主会在日后的节目里为大家详细介绍和科普的呢。</p><p><a href="https://www.bilibili.com/video/av48047021" target="_blank" rel="noopener">耳机和扬声器听音的小视频</a></p><iframe src="//player.bilibili.com/player.html?aid=48047021&cid=84167031&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>上面是UP主一段介绍耳机和扬声器听音的小视频呢^-^</p><h1 id="小伙伴们问那小伙伴们如何区分b站上视频所听内容是那个呢">小伙伴们问：那小伙伴们如何区分B站上视频所听内容是那个呢？</h1><p>UP主答：从数据规格上的确很难区分听到的是什么呢~ 一个方法是耳朵听，通常双耳信号作品能够产生小伙伴们不一样的环绕感呢。UP主再分享一些经验公式，通常指定小伙伴们用耳机听的大概率是哦（基于扬声器的双耳信号节目目前在B站上UP主还没有发现X-X），ASMR，3D标签的也可能是呐。对啦，还有那个8D标签，转来转去的也是。（UP主好想知道8D的高维空间是哪8个D啊T-T）</p><h1 id="小伙伴们问那耳机里听环绕声是伪科学么">小伙伴们问：那耳机里听环绕声是伪科学么？</h1><p>UP主答：虚拟环绕声是真科学的啦~，真正的虚拟环绕声技术就是将声音处理成双耳信号输出的讷~UP主会在其它的节目里再为小伙伴们详解这个话题啦。当然，如果要用什么杜比全景声在B站上“直接正面刚一波”的话，UP想说：“你已经没有下一个回合了。“</p><h1 id="小伙伴们问如何正确科学的食用双耳信号的环绕声节目呢">小伙伴们问：如何正确科学的食用双耳信号的环绕声节目呢？</h1><p>UP主答：嗯，这个才是正题好吧~。小伙伴们需要做的是，根据节目提示戴上耳机，别戴反哦~关闭手机或者设备上的所有音效，包括杜比音效，DTS音效等等。它们的处理效果会有冲突，再然后就~Enjoy！~</p><p>鼓掌<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第一期节目结束</span><br></pre></td></tr></table></figure></p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/30/2019-05-08-Surround-Earphone/#disqus_thread</comments>
    </item>
    
    <item>
      <title>从电子产品说起</title>
      <link>https://blog.tonystudio.ml/2019/04/28/2019-04-28-Talk-about-electronic-products/</link>
      <guid>https://blog.tonystudio.ml/2019/04/28/2019-04-28-Talk-about-electronic-products/</guid>
      <pubDate>Sun, 28 Apr 2019 03:30:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;事情的起因是我又想买买买，HomePod正好降价历史最低1999，家里的电视扬声器实在太渣，于是有了选设备的冲动。顺便可以整理一下自己的音视频资料，刚好之前已经整理了一份在豆瓣上，根据豆瓣的信息再建立自己的媒体库，这就是另一个坑，目前感觉最合适的是群晖，音视频的媒体库都可以
        
      
      </description>
      
      <content:encoded><![CDATA[<p>事情的起因是我又想买买买，HomePod正好降价历史最低1999，家里的电视扬声器实在太渣，于是有了选设备的冲动。顺便可以整理一下自己的音视频资料，刚好之前已经整理了一份在豆瓣上，根据豆瓣的信息再建立自己的媒体库，这就是另一个坑，目前感觉最合适的是群晖，音视频的媒体库都可以自己建立了。不然就需要严重依赖第三方了，比如音乐库依赖Apple Music。视频库更加严重，从Netflix到Bilibili等等。现在中国的环境真的非常好，建立了豆瓣的资料库，然后基本上Google（电影名）都能找到资源，再过10年是什么环境真的很难说，毕竟迪士尼等等第一方内容产出者也开始建立自己的版权库了，只能说且看且珍惜了，或者和Apple Music一样做成订阅制，像已经完成的Apple Music和正在推动的Apple New+。</p><h1 id="需求">需求</h1><hr><ul><li>1.播放电视中的足球比赛。</li><li>2.播放群晖媒体库的电影（用Android TV解码）。</li><li>3.播放群晖媒体库的音乐。</li></ul><p>其实再精简一下需求，就是音响系统能为各种播放终端（比如电视或iPhone）提供扬声器，或者能自己播放一些nas中的内容。</p><h1 id="现在情况">现在情况</h1><hr><h2 id="homepod">HomePod</h2><hr><p>只能满足为苹果系统的扬声器，macos的桌面音响系统是最好的体验。应该能替换掉CAS1等等以前的老设备。</p><p>不能作为电视的扬声器也不能播放nas中的内容。但是能播放Apple Music的内容。</p><h2 id="sonos">sonos</h2><hr><p>满足所有需求，作为电视扬声器需要有光纤线输出。 音乐源见<a href="https://www.sonos.com/zh-cn/support/adding-music-sources" target="_blank" rel="noopener">链接</a></p><h1 id="对比老一代的hi-fi设备-革新的话题">对比老一代的Hi-Fi设备-革新的话题</h1><hr><p>一直都没了解音响系统的事情，由于太贵了。经常说一套音响系统的建立要好几万，而且那些什么功放机还是国产的牌子，还不会更新。这里肯定是有什么问题。</p><p>我觉得其实变化已经从很早开始革新了，以前的媒体介质是CD/DVD等等。再来就是MP3播放器的出现，彻底从模拟信号转到数字信号。</p><p>功放机是否是模拟信号的产物我也不清楚，但是从厂家的更新应该印证了这一点。比如现在还在更新的Sony 数码解析器（5000元左右），完全不清楚其作用。然后蓝牙音响的产品系列已经有差不多10个，我想这就是在转型了。</p><p>另外一个更新比较多的就是SoundBar/回音壁等等。其实也是模拟5.1声道。</p><h1 id="你要在传统行业打败巨头基本是不可能你只有在新领域才有机会">你要在传统行业打败巨头基本是不可能，你只有在新领域才有机会。</h1><hr><p>传统的功放机的来源是CD？或者通过蓝牙？这里我相信多多少少会有损失。Apple和Sonos都直接通过Wi-Fi在互联网拿无损内容。</p><p>再比如蓝光光碟。现在的内容提供商都支持在网站提供4K片源，我相信那是h264和h265等等标准。达到4K其实并不需要40G才能达到显示效果。</p><p>音乐肯定离不开录音设备，录音设备也一直在进化。视频也离不开输入源。Youtube的4K输入也是用户自己压制60帧的mp4上传。</p><h1 id="其他领域">其他领域</h1><hr><p>比如汽车的核心件还是发动机，这个领域要超越BBA感觉是不可能，但是Apple为啥要做车？因为电动机可能会有新的突破。</p><p>电动机能做到怎样我不清楚，但这是巨大的产业。现在想想15年那波锂电池背后有这么一套逻辑。</p><p>电动机还能干什么？请发挥你的想象力，撬动巨大的产业。比如飞机/直升飞机换成电动机？载人小型交通工具的出现？</p><p>比如空调 只要压缩机一日没突破 还是很难打破新的空调</p><h1 id="手机的发展带动其他行业">手机的发展带动其他行业</h1><hr><p>2009至今，手机快速发展带动了什么？ 我见到的是锂电池，显示器也在快速发展。你要找一个屏幕的水准/色域能达到iPhone X的显示水平，得多少钱？最便宜的验证颜色是否准确的是手机显示，而不是什么打印器打印出来的东西。</p><h1 id="关键词都是近10多年的新事物">关键词（都是近10多年的新事物）</h1><hr><p>老 ： CD/VCD/DVD/BD/RMVB/Flash/AUX 3.5mm / USB / 莲花头 / CCD<br>老但没淘汰 ：光纤音频线<br>新 ： h264/mp3/mp4/Wi-Fi/蓝牙/4G/5G路由器/HDMI/ CMOS</p><p>06年手机N70/6300等等手机都没Wi-Fi模块/蓝牙 2.0/上网靠WAP</p><p>就是所有通过Wi-Fi/蓝牙等通信技术都是新方向</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/28/2019-04-28-Talk-about-electronic-products/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HomePod</title>
      <link>https://blog.tonystudio.ml/2019/04/28/2019-04-28-HomePod/</link>
      <guid>https://blog.tonystudio.ml/2019/04/28/2019-04-28-HomePod/</guid>
      <pubDate>Sun, 28 Apr 2019 02:54:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://sspai.com/post/46199&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HomePod：聊音箱，其它评测没告诉你的事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文，我不想重复任何其它评测中谈烂的话题。我将从实际听感
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://sspai.com/post/46199" target="_blank" rel="noopener">HomePod：聊音箱，其它评测没告诉你的事</a></p><p>本文，我不想重复任何其它评测中谈烂的话题。我将从实际听感及使用场景的角度来聊聊 HomePod 适合谁，为什么，怎么用。文末，我录制了一段实机对比录音视频，若你对 HomePod 的发音倾向感兴趣，可以实际听听来参考。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857166-f05dbb00-699c-11e9-8c67-0b764480f05f.png" alt="image"><br>本文录音设备及对比对象</p><p>关于 HomePod，我看过不少评测或体验，但他们大多都只谈到了皮毛。涉及严肃的实际体验方面，如发音倾向，和它底适不适合你的使用场景等问题，这些评测大多浅尝辄止，没有讲明白。</p><p>考虑到 HomePod 的文章本就不少，我本没打算写这篇文章。但在实际用了一阵子后，我发现 HomePod 使用场景很有针对性，若你对它有错误的期待，那可能很大可能买了也不会满意，若你是 HomePod 使用场景针对的用户，那 HomePod 无疑是最优选择。</p><p>在文章开始前，先说下猫爪板的问题，有很多人担心 HomePod 会被用来当猫抓板。从我的体验来看，猫星人对 HomePod 完全不感兴趣，所以不必担心。但是如果你实在不放心，给 HomePod 买个 AppleCare+ 就可以了，保两年两次意外损坏。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857168-fd7aaa00-699c-11e9-9f8e-c52f92604403.png" alt="image"><br>猫抓板的比喻</p><h1 id="homepod-到底是不是蓝牙音箱">HomePod 到底是不是蓝牙音箱？</h1><hr><p>很多人把 HomePod 当个蓝牙音箱，并抱怨其不支持其它设备。其实不然，HomePod 本质是个完全独立的音乐播放器。我甚至推测 HomePod 实际放歌的时候不是采用蓝牙传输音频的，而是 WI-FI。这样既可以杜绝蓝牙的带宽限制，也不需要设备在 HomePod 附近才可以播放。</p><p>若你附近有 HomePod，你可以做这样一个测试，把 HomePod 相连的手机关机后让 SIRI 放歌，HomePod 依旧可以正常播放，也可以完全正常工作。这说明了 HomePod 的工作是不依托任何其他设备的，而是直接和家里的 WI-FI 互动来获取信息。</p><p>这么一来，它的语音歌曲模式只支持 Apple Music 也就好理解了，因为它的歌曲播放是直接向 Apple Music 服务器要求的，而不是手机或者其它设备，对于其它音乐服务 Apple 无权直接索要歌曲。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857170-079ca880-699d-11e9-9693-8c59de53e89e.png" alt="image"><br>HomePod 主板 | ifixit</p><p><strong>HomePod 本身采用 iOS 系统，拥有蓝牙 5.0，5G-MIMO WI-FI，且自带 1GB 内存和 16GB 闪存</strong>。在我看来，HomePod 设置时需要 iOS 设备主要是是为了获取账户订阅信息和 WI-FI 密码，在这之后便和 iOS 其它设备完全无关了，这时候若你用其他设备放歌，这些设备充当的更像是一台遥控器，而不是歌曲本身的发送者。在某种意义上，HomePod 是一台纯互联网设备。</p><p>当然，如果你喜欢，你也可以把 HomePod 当成一个蓝牙音箱来用。并不像很多人说的只能用 Apple Music，你可以用任何苹果生态系统中的设备，任何音乐服务，任何应用程序，HomePod 这时候充当的是音响的角色。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857172-12efd400-699d-11e9-9a49-537760ef6b73.png" alt="image"><br>HomePod 连接 Apple TV</p><p>从延迟的角度看， HomePod 充当音响时有细微的延迟，我不会建议用它来看电影，因为充当音响模式下的 HomePod 采用蓝牙会自带延迟属性加成。但这个延迟一点也不高，如果你能接受 AirPods 看电影，那 HomePod 的延迟也类似，几乎无法感知。</p><h1 id="我们听到的声音如何而来">我们听到的声音如何而来？</h1><hr><p>既然聊的是音箱，那么我们先来看看日常听到的音乐如何而来，这有助于理解为什么 HomePod 非常适合听歌或者博客，却不适合用来当作电视音响。</p><p>我们从不同设备中听到任何声音，来源基本只有两个途径：一个是录音，另一个是合成。</p><h2 id="录音">录音</h2><hr><p>这是最主要的音频来源。比如人说话的声音，唱歌的声音，电影中关门的声音，武打特效兵戈相碰的声音，甚至手机铃声等，基本都是录音。</p><p>录音的主要设备是麦克风。常见麦克风一般有两个类型：一个是单声道麦克风，另一个是立体声麦克风。这两个类型没有绝对谁比谁好的说法，我们习惯在不同场景使用其中的某一类。</p><p><strong>单声道麦克风</strong> 单声道麦克风的特点是指向性极强，麦克风永远指向录音前方，因此天生具有抗环境噪音的特质。下面的四张图是常见的几种比较有代表性的单声道麦克风。第一个是常用在歌手录歌或演讲，第二个常用在主持或者访谈时，第三个用在播客或工作室录音，前面有防破音网，最后一个是摄影摄像记者常装在相机上的麦克。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857194-2602a400-699d-11e9-9752-2084d58b9e7f.png" alt="image"><br>常见的单声道麦克风</p><p>这些单身道麦克风主要在做什么呢？从上面的使用场景中不难看出，单身到麦克风的核心作用就是录制人声。讲到这里，可以和 HomePod 联系在一起了。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857199-3024a280-699d-11e9-8b36-cbf73e404fc0.png" alt="image"><br>一台 HomePod</p><p>正因为一台 HomePod 是一台单声道播放器，它并不适合用来当作电影音箱来播放需要空间定位的音源，若你买一台 HomePod 希望把它主力看电影用，这并不合适。一台 HomePod 极适合用来听歌，听播客这些事情。</p><p><strong>立体声麦克风</strong> 与单声道麦克风的指向性强相反，立体声麦克风需要接收多个指定位置，甚至四面八方传来的音乐，这时候录音时需要采用立体声麦克风。下面这几种是比较常见的立体声麦克风，比如下方中间这个称做 XY 麦克风，一个指向左一个指向右，就录出了我们常常听到的双声道立体声。下图左边的是单声道/立体声麦克风，右边的则是全域麦克风。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857201-39157400-699d-11e9-9c5b-5b89fb9f8b60.png" alt="image"><br>常见的立体声麦克风</p><p>同理。若想要如实的表达这些麦克风录制的内容，你也需要至少两个音响。如果你家房间非常大，或者你希望获得传统的左右声道的体验，那么你就需要两台 HomePod。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857202-3f0b5500-699d-11e9-93a7-02d1c1dbc1ea.png" alt="image"><br>一对 HomePod</p><p>当两台 HomePod 被连接在一起后，它会自动将左右声道分配到两台机器上，由于 HomePod 采用的声场技术非常先进，你不必局限在两个机器一左一右放置很近。你可以把它们放在房间的两端然后享受传统立体声。</p><h2 id="合成音">合成音</h2><hr><p>这大多指的是你听到的一些不寻常的声音，比如某些电音，一些歌曲的特殊处理，或者虚拟立体声等。这些音效往往通过了许多后期软件加工，在音色和声道上加以处理以达到纯录音不能表现出的效果。</p><p>之所以要聊这个，是因为除了立体声外，很多时候我们在电影院或者家庭影院中听到的那些震撼的声音，可能是后期计算出来的。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857213-492d5380-699d-11e9-9c51-01dc23cfa5b7.png" alt="image"><br>电影或游戏所追求的立体声 | Dolby Atmos</p><p>若你追求的是超强的立体感，比如玩游戏或者看电影，那么一对 HomePod 可能不会让你完全满意。你可以考虑纯 5.1 或者 7.1 声道的音箱系统，或者配备杜比全景声技术的音箱。这些虚拟技术可以将声音在即便只有两声道的情况下虚拟出多个声道来，使得声音的定位感更强。由于产品定位不同，HomePod 并不具备这些技术。</p><h1 id="homepod-听歌感受如何">HomePod 听歌感受如何？</h1><hr><p>HomePod 极其适合听歌。一台 HomePod 可以瞬间将家变成你的私家舞厅，这主要得益于 HomePod 的三个设计。</p><h2 id="发音倾向忠于原音">发音倾向忠于原音</h2><hr><p>每个品牌对音乐的诠释都有所不同，有的追求清晰锐利，有的追求超级重低音。HomePod 的风格在我看来则是忠于原音。它不会一上来就给你的所有音乐加上咚咚咚的重低音的感觉，而是针对每一首歌尽量还原出作者创作时希望的风格取向。</p><p>主观上来说，它给我的感觉就是听打击乐可以低音很低，听起来你可能会跟着鼓点一起肝颤；听钢琴曲又好像置身于某个礼堂，钢琴声的端庄和力量都让人能设身处地，甚至比现场听钢琴曲效果还好；听清脆的女声则是干净纯粹，像是用水洗过一般的声音。</p><p>这可能是 A8 芯片在后面调节的成果。简而言之，用它来听各种风格的音乐，你都不会失望。它不会一股脑的将某个风格强加在所有音乐上，而是针对每首歌都尽量让其表现出原有的样貌，这大概就是我想表达的忠于原音。</p><h2 id="声音大而不失真">声音大而不失真</h2><hr><p>这主要得益于它是扬声器确实多，HomePod 的外放由七个高音喇叭和一个巨大的低音喇叭组成。与许多传统音响声音一调大就容易破音不同，HomePod 在我使用期间即使声音最大也没有出现过破音的情况。它的音量调节很线性，若衡量最大音量，大概是一间大客厅听起来嫌吵的程度。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857219-59453300-699d-11e9-8e6a-feb116f5abd8.png" alt="image"><br>HomePod 构成 | Apple</p><h2 id="声音能填满房子">声音能填满房子</h2><hr><p>这是个比较神奇的体验。简单来说，它是个全域音响，听音乐的话临场感很强，但只在一个房间有用。这个特性受益于 A8 芯片的分析，它会实时根据摆放位置调整每个喇叭的输出，来确保房间的每个角落听到的声音都差不多。主观感受也确实如此，这也是我说开 HomePod 像是进了迪厅的原因，它的声音可以非常饱满的填充整个房子。如果你的房子之间隔了门的话，那就不能指望还有能填满房子的体验了，你可能需要考虑第二台 HomePod。</p><p><img src="https://user-images.githubusercontent.com/16996753/56857222-619d6e00-699d-11e9-9eb4-15509848b817.png" alt="image"><br>HomePod 声场 | Apple</p><p>小结一下，HomePod 的音质完全不需要担心，在其它各方面表现也很不错。根据你的实际需要，你可以考虑买一个，或者买两个。</p><h1 id="homepod-实际录音对比">HomePod 实际录音对比</h1><hr><p>为了更好的说明 HomePod 的发声倾向，我录制了一段对比罗技 Z200 音响的视频，这段视频不能代表 HomePod 的实际发声效果，因为你很可能用的是别的音响或耳机，但是它可以在某种程度上展示出 HomePod 在处理不同歌曲时的趋向。</p><p>在接下来的视频/音频中，你将会首先听到罗技音响的录音，结束后第二次播放的相同曲目则是 HomePod 的录音。若你查看的是视频，则可以在视频中看到我加入的波形图和文字说明。录制时，MacBook Pro 控制的是罗技音响，iPad 控制的是 HomePod。视频中 L 表示罗技音响，H 表示 HomePod。</p><p><a href="https://www.bilibili.com/video/av29822823/" target="_blank" rel="noopener">【点击播放视频】聊音箱，其它评测没告诉你的事 -bilibili</a></p><p>测试歌曲，按视频录制顺序排列：</p><p>电音：ALEX F<br>中国女声：忽然之间<br>钢琴：One Call Away<br>动漫： Senbonsakura<br>外国男声：Despacito<br>经典：加州旅馆<br>中国男声：蓝莲花<br>中国女声：后来<br>外国女声：Faded</p><p><img src="https://user-images.githubusercontent.com/16996753/56857226-77ab2e80-699d-11e9-8e22-561ee7d556e4.png" alt="image"><br>录制设备</p><p>录音用的麦克风是舒尔 MV88，测试时为了照顾左右两侧的立体声罗技音响，选择的模式是 105 度夹角的立体声录制，音频本身没有做任何后期处理及修复，若你听到破音，则代表音响真的在播放时破音了。</p><h1 id="写在文后">写在文后</h1><hr><p>我用 HomePod 来做什么？我买它的时候想法比较直接，就是我需要一个能在洗澡的时候还能听得清的音箱，同时我希望早晨一起来能用它放 Medium 当天的文章朗读或者 YouTube 有趣的视频，在我干活吸地洗碗的时候都必须能听清。这是我的两个核心需求，其次就是用来听歌，听歌反而是个次要需求。</p><p>像我之前提到的，单个 HomePod 非常擅长播发单声道的内容，音频素质优秀。空间技术允许 HomePod 的声音填满整个房间，最终我的需求得到了很好的满足。若你需要立体声，则需要购买两个 HomePod。若你希望用它来充当家庭影院的音效，这和听歌是两种截然不同的需求，强烈建议你选择其他产品，有很多产品在影视音乐的表现远比 HomePod 优秀。</p><hr><p>Reference：</p><blockquote><p>少数派：<a href="https://sspai.com/post/46199" target="_blank" rel="noopener">HomePod：聊音箱，其它评测没告诉你的事</a></p><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/28/2019-04-28-HomePod/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AirPlay2</title>
      <link>https://blog.tonystudio.ml/2019/04/24/AirPlay2/</link>
      <guid>https://blog.tonystudio.ml/2019/04/24/AirPlay2/</guid>
      <pubDate>Wed, 24 Apr 2019 02:54:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://sspai.com/post/54114&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HomePod 的定位深究与 AirPlay 2 的正确使用姿势&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://sspai.com/post/54114" target="_blank" rel="noopener">HomePod 的定位深究与 AirPlay 2 的正确使用姿势</a></p><p><img src="https://user-images.githubusercontent.com/16996753/56629323-8f25a700-667f-11e9-983a-4627a3cb7278.png" alt="image"><br>HomePod 的定位深究与 AirPlay 2 的正确使用姿势</p><p>两年前的 WWDC 2017 上，HomePod 闪亮登场，补齐了苹果在家庭智能音箱和的一环，也宣告苹果正式以整套解决方案进军多房间音频市场。而同在 WWDC 上发布的 AirPlay 2，则成了这一整套系统背后的核心。<br><img src="https://user-images.githubusercontent.com/16996753/56629341-a2387700-667f-11e9-97e2-c1d75e541d1a.png" alt="image"></p><p>好事多磨，HomePod 距离发布到上市用了 7 个月，而同在 WWDC 2017 出生的 AirPlay 2，却整整跳票了一年。在这期间，我们不知道苹果经历了什么困难，但它终于还是来了 —— 不像 AirPower……算了上个香吧。</p><p>可不得不承认的是，苹果这些年让人越来越有学习压力。为了摸清 AirPlay 2 背后的逻辑和使用方法，我也花了不少时间，翻了不少晦涩难懂的官方文档，也砸了不少钱买硬件。我想，是时候需要一篇大白话来总结。因此我写了这份教程，希望能给想要搭建苹果多房间音频系统的人一些「捷径」。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629356-afedfc80-667f-11e9-8a7c-548ab65bda00.png" alt="image"></p><h1 id="苹果的多房间音频系统逻辑"><strong>苹果的「多房间音频系统」逻辑</strong></h1><p>要说流化音频的技术，苹果早在 2010 年的 iOS 4.2 及 OS X Mountain Lion 中早就已经实现。但要说 MultiRoom Audio，苹果就是个刚出新手村的玩家。毕竟，前面有个专注于这个领域十多年的 Sonos。</p><p>不过从实现方式来说，二者却是殊途同归。无论是苹果还是 Sonos，亦或是其它厂家，都可以轻松实现「所有房间同时放一首歌」和「不同房间放不同的歌」这两个 MultiRoom Audio 的核心功能。 它们本质上都是将手机或其他控制设备变成「遥控器」，或通过 Wi-Fi 来实现音频传输和播放。只不过 Sonos 借助于 app 来实现对音响的控制，而苹果则直接把 AirPlay 2 构筑在了 iOS 和 macOS系统之中。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629374-b9776480-667f-11e9-9082-c3241333ee56.png" alt="image"></p><p>这也意味着，如果你家是一整套的苹果产品，那么你的 AirPlay 2 体验将会非常之惬意：不需要 app，不需要繁琐的连接设置，支持 Siri / HomeKit 等等。</p><h1 id="homepod-的奇怪定位"><strong>HomePod 的「奇怪」定位</strong></h1><p>然而，事情并没有这么简单。当苹果给 HomePod 带来了 AirPlay 2 之后，它的定位就不再是一个简单的「智能音箱」—— 既可以是一个独立的个体，又可以是一个接收的终端，甚至还可以成为音频的发送源。</p><p>因此，在通过 AirPlay 2 构建的整个多房间音频系统来说，HomePod 始终是个耐人寻味的存在。但其实浅思后不难发现苹果对 HomePod 所寄予的厚望：它希望成为你家庭智能音频系统的核心组成部分，拿下整个音频系统的控制权。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629400-cdbb6180-667f-11e9-9234-814adfff1385.png" alt="image"></p><p>无论是 Sonos、YAMAHA、B&amp;O，还是国内的小爱同学、天猫精灵、腾讯叮咚，他们从来没有想过要成为一整套音频系统的核心。前者是专心于声音的高保真还原，而后者则是在另一个所谓「智能」的领域挤破了头，却忽略了音箱本应该做的事情 —— 播放音乐。</p><p>而苹果的不同之处，便是选择了一个「中庸」的定位，并赋予了它更多「家庭音频系统核心」定位的属性。</p><p>让 AirPlay 2 系统支持 HomeKit，不仅是为了实现 Siri 的支持。其背后的深层原因，也许是苹果希望你停留在这这个形成闭环的、半开放的生态系统中。同时，HomePod 的三种播放状态（独立音源、接收终端、音频发送源），则更加印证了我的想法。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629413-d744c980-667f-11e9-8ccb-ef4d83684e60.png" alt="image"></p><p>虽然 AirPlay 2 可以授权其它厂家使用，但无一不是成为一个简单的接收端，无论绕到哪里，最终还是离不开苹果的其它产品。而 HomePod，却可以成为罗马，条条大路都通达。</p><p>同样，其实 Apple TV 也是这么想的 —— 成为你的影音中心。<br><img src="https://user-images.githubusercontent.com/16996753/56629425-e0359b00-667f-11e9-9ec0-3107f9f689ce.png" alt="image"></p><h1 id="airplay-2-使用全指南"><strong>AirPlay 2 使用全指南</strong></h1><p>到这里，就应该来介绍 AirPlay 2 怎么用了。</p><p>目前我所拥有的 AirPlay 2 设备，分别是 HomePod、AirPort Express 以及公司的一台 Apple TV。曾经买过一台 Sonos One，由于一些原因退掉了，但由于第三方支持 AirPlay 2 的扬声器都是比较简单的「接收端」，因此可以等同于 AirPort Express。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629434-eaf03000-667f-11e9-8f64-a60d53b0549f.png" alt="image"></p><p>在这里要说一下 AirPort Express 这个小玩意。作为路由器来说它早就已经落伍，但在去年 8 月，苹果却意外地更新了它的固件，使它成为了全世界唯一一款能够支持 AirPlay 2 的路由器。尽管功能不如 HomePod 多，但可能是目前想要玩 AirPlay 2 最低的准入门槛。</p><p>只要买几个 AirPort Express，通过 3.5mm 将音频输出到旧音响，便可以为其它旧音响带来 AirPlay 2 的核心功能。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629446-ef1c4d80-667f-11e9-81e9-6f3d29c8a50e.png" alt="image"></p><p>要使用 AirPlay 2，我们要从其他的苹果设备开始说起。</p><p><strong>作为接收端</strong></p><p><strong>这部分内容支持所有 AirPlay 2 扬声器</strong></p><p>AirPlay 2 与 AirPlay 的最根本区别，就是前者的多房间音频功能。而作为 AirPlay 2 最核心也是最基础的功能，很幸运苹果将它的协议开放了，支持第三方扬声器的接入。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629458-f9d6e280-667f-11e9-9cea-b0842732bdd5.png" alt="image"></p><p>简单来说，有了 AirPlay 2 支持后，你就可以在不同的房间播放不同的音乐，也可以在所有房间都播放同一首音乐。</p><p>在控制中心点击 AirPlay 按钮，勾选下方播放设备列表右侧的圈，就可以把音乐发送到对应设备播放，并可以单独控制音量。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629463-ff342d00-667f-11e9-9a3a-65dd6b54e574.png" alt="image"></p><p>如果想要用 Siri 控制，则需要将扬声器加入到家庭应用中。在添加配件时，点击「没有代码或无法扫描？」，家庭 app 就会发现 AirPlay 2 设备，点击即可加入。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629470-052a0e00-6680-11e9-8f10-43cc03ee8dfa.png" alt="image"></p><p>在家庭 app 内，可以修改音箱的名字，例如「客厅」、「书房」、「浴室」等等。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629474-09562b80-6680-11e9-9899-8105e3883583.png" alt="image"><br>苹果对于房间的设定真的很不接地气…</p><p>只要对 Siri 说，在 A 房间播放 XX ，即可在 A 房间播放音乐。</p><p><strong>作为独立音源</strong></p><p><strong>这部分内容只支持 HomePod</strong></p><p>你可以把 HomePod 简单理解成一个只能放音乐、没有屏幕的 iPhone 6（HomePod 使用的是 A8 芯片）。而为了操作这个「没有屏幕的 iPhone 6」，苹果提供了两种方式：</p><ul><li>Siri；</li><li>手机上的音乐 App。<br><img src="https://user-images.githubusercontent.com/16996753/56629493-1e32bf00-6680-11e9-99df-de72da191744.png" alt="image"></li></ul><p>若 HomePod 和 iOS 连入了同一个 Wi-Fi，且当前不作为接收端的时候，打开音乐 app，点击下方的 AirPlay 按钮，就可以看到控制中心下方会出现 HomePod 播放信息。</p><p>点击这个播放信息并回到音乐 app，就可以进入到 HomePod 的控制界面。在这个界面下，你可以看到当前 HomePod 播放的音乐，并可以控制播放 / 暂停、调节音量或者调整播放顺序。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629509-2985ea80-6680-11e9-830a-5d88ac549735.png" alt="image"></p><p>如果这个时候，你切换回手机的播放器（AirPlay 按钮旁边没有 HomePod），点击播放，音乐会从手机的扬声器放出，而 HomePod 是不会有任何响应的，依然会执行当前操作。</p><p>如何分辨 HomePod 是在哪种播放状态？注意下方 AirPlay 按钮旁和 mini Player 的「HomePod（HOMEPOD）」字样，这是 HomePod 作为独立音源播放时会显示的内容。若显示「iPhone → HomePod」，则是从手机投放音乐到 HomePod 播放。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629521-30acf880-6680-11e9-8513-6135d0404224.png" alt="image"></p><p>需要提醒的是，如果你没有打开 iCloud 音乐资料库，那么是无法让 HomePod 在「独立音源」状态下从 iPhone 修改当前播放音乐的。一旦点击了手机上的音乐，HomePod 会立即变为接收端。</p><p>（大白话：HomePod 如果在播放 A，你在手机上看到了一首歌 B，想让 HomePod 播放 B。如果开启了 iCloud 音乐资料库，则 HomePod 可以继续作为独立音源播放 B；如果没开启 iCloud 音乐资料库，就会变回接收端，从 iPhone 发送 B 到 HomePod 播放）</p><p><img src="https://user-images.githubusercontent.com/16996753/56629529-386c9d00-6680-11e9-96a6-fa24cbf2fd86.png" alt="image"><br>不过鉴于 iCloud 音乐资料库会篡改我的专辑封面……我宁愿播放被打断也不会打开。</p><p><strong>作为音频发送源</strong></p><p><strong>这部分内容只支持 HomePod，Apple TV 未测试</strong></p><p>在 HomePod 作为一个独立音源的状态下，它还具备了将音乐发送到其它 HomePod、AirPlay 2 音箱或 Apple TV 播放，实现「所有房间都播放一首歌」的功能。</p><p>同样，因为音频源不来自手机，切换回手机的播放器操作，HomePod 依然不会有任何相应。<br><img src="https://user-images.githubusercontent.com/16996753/56629540-44585f00-6680-11e9-8997-e6561d56cb1b.png" alt="image"><br>左边两张图是两个扬声器的控制界面，最右侧是手机本身的播放器控制界面。</p><h1 id="尾巴"><strong>尾巴</strong></h1><p>当大家一窝蜂地往智能音箱领域挤的时候，苹果依然是保持了自己一贯的「克制」作风，姗姗来迟。但就算是苹果，也在这个领域里撞了墙，2017 年生产的 HomePod 在 2019 年都没卖完。</p><p>智能音箱到底算不算是强需求？到底要不要买一个 HomePod？或者直接问，智能音箱值不值得买？</p><p><img src="https://user-images.githubusercontent.com/16996753/56629547-50442100-6680-11e9-990e-8179f5a85743.png" alt="image"><br>图片来自 The Verge</p><p>我只能说，现在也许还不是智能音箱爆发的时候。它就像是多年前的「智能家居」一样，是一个一个「超前」的设备，选择了它，必然需要一整套生态系统才能实现最完整和最惬意的体验。如果你在乎的是当下，而且家里并没有太多智能设备，我是不推荐购买的，无论是 HomePod 还是其它。</p><p>如果你和我一样，已经比别人先一步踏入了智能生活，而且喜欢音乐，那么不用犹豫，买一台，会让你的智能生活体验更上一层楼。买的时候选择对应平台的产品即可，比如 HomeKit 对应 HomePod，米家对应小爱音箱。</p><p><img src="https://user-images.githubusercontent.com/16996753/56629553-55a16b80-6680-11e9-8765-389c6a2131a3.png" alt="image"><br>充钱，你就会变得更强</p><p>当然，如果你只是喜欢更好的音质，那么选择 Sonos、B&amp;O、YAMAHA 这些大厂里支持 AirPlay 2 的扬声器会更满足你需求，毕竟它们也可以实现 AirPlay 2 的最核心功能。</p><hr><p>Reference：</p><blockquote><p>少数派：<a href="https://sspai.com/post/54114" target="_blank" rel="noopener">HomePod 的定位深究与 AirPlay 2 的正确使用姿势</a></p><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/24/AirPlay2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openbilibili</title>
      <link>https://blog.tonystudio.ml/2019/04/24/2019-04-24-openbilibili/</link>
      <guid>https://blog.tonystudio.ml/2019/04/24/2019-04-24-openbilibili/</guid>
      <pubDate>Wed, 24 Apr 2019 02:54:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;收集一些相关有用的咨询并继续留意相关进度。&lt;/p&gt;
&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/github/dmca/blob/master/2019/04/2019-04-23-bili
        
      
      </description>
      
      <content:encoded><![CDATA[<p>收集一些相关有用的咨询并继续留意相关进度。</p><h1 id="github">GitHub</h1><hr><p><a href="https://github.com/github/dmca/blob/master/2019/04/2019-04-23-bilibili.md" target="_blank" rel="noopener">https://github.com/github/dmca/blob/master/2019/04/2019-04-23-bilibili.md</a></p><blockquote><p>Hello Dear Github:</p><p>We Are:</p><p>Bilibili Security <a href="http://Group.It" target="_blank" rel="noopener">Group.It</a> is nice to be able to yse Github such a professional and effcient platform,and mpw we have a need to be very hopefully able to get Github’s support  and resolution.I sent the mail yesterday and the mail attachments is the my signature!!</p><p>We have read and understand GitHub’s Guide to Filling a DMCA Notice</p><p>Some one created a Repository called ‘openbilibili/go-common’ two hours ago and many people forked it or clone it and reupload the repository,which contained too much sensitive &gt; information,such as secret key,database address,very important api key and so on.If these information are found by other people in Github,our company will be left out of pocket.</p><p>The following is Github’s URL and Screenshots about this Repository:</p><p>[private]</p><p>Since the reupload repositories and the contains our company’s important source code,algorithm and system configuration,so we hope Giuhub as soon as possible to help us &gt; completely remove the reupload repositories and thank you very much</p><p>The following is our contact information:</p><p>Company Name : Bilibili<br>My e-mail Address: [private]<br>Cellphone: [private]<br>Company Address: [private]<br>Website: <a href="https://www.bilibili.com/" target="_blank" rel="noopener">https://www.bilibili.com/</a><br>I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law. I have taken fair use into consideration.</p><p>I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an &gt; exclusive right that is allegedly infringed.</p><p>Hoping for your response and thanks again.<br>Please help us!!!</p></blockquote><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/24/2019-04-24-openbilibili/#disqus_thread</comments>
    </item>
    
    <item>
      <title>996</title>
      <link>https://blog.tonystudio.ml/2019/04/22/996/</link>
      <guid>https://blog.tonystudio.ml/2019/04/22/996/</guid>
      <pubDate>Mon, 22 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://www.v2ex.com/t/557056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;996.ICU 一番热度过去，留下了什么&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;jzer0n&quot;&gt;Jzer0n&lt;/h1&gt;
&lt;hr&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://www.v2ex.com/t/557056" target="_blank" rel="noopener">996.ICU 一番热度过去，留下了什么</a></p><h1 id="jzer0n">Jzer0n</h1><hr><blockquote><p>这事情没完，看看各方的得失分：</p><p>1.先锋队输了。在这些所谓企业创始人出来为 996 站台又没得到法律的处罚开始，它就输了，而在可见的将来，它没有翻盘的可能。它制定的法律，成了一纸空文，在可见不可见的将来，更多千奇百怪的事情都会出现了，等着看。</p><p>2.资本家当前似乎赢了，但长远来看是输了。当前这一代人，或者因为收到房贷等负担迫不得已妥协了这个 996，但种子已经种下，这一代人肯定会慢慢退出更竞争的行业的，到了接下来的一代，资本家会发现自己埋下的苦果自己啃。对于马云刘强东之流，送上一个字“呸”。迟早会清算。</p><p>3.劳动者当前似乎输了，但未来可期。中国畸形的房地产和楼价，摧毁了至少一代人甚至是三代人的钱包，他们不得已只好更辛苦的负重前行，这波 996，先锋队站在资本家的一面，抛弃了底层无数的劳动者，资本家露出了他们原本的丑陋嘴脸，我们或者当前没有胜利，但我们的后辈心里的种子已经生根发芽。</p><p>等着吧，一代新人胜旧人，我们未竟的事，下一代会越来越更多人继续下去。</p><p>另外，先锋队和资本家成了一家人，真是完全颠覆了马克思，“马克思老人家，你不要来中国了，你的徒子徒孙已经抛弃你了。”</p></blockquote><h1 id="starqoq">starqoq</h1><hr><blockquote><p>鲁迅先生的作品《聪明人和傻子和奴才》</p></blockquote><h1 id="mingyun">mingyun</h1><hr><blockquote><p>关于 996 大讨论的微博总结</p><p>资本家的话一个字都不要信。我每天只睡四个小时，我每天工作 16 个小时等等，诸如此类，你要是信了，你觉得鸡汤的味道不错，开始努力工作憧憬未来，那么恭喜，一个崭新的韭菜苗子就破土而出了。</p><p>驴再努力的拉磨，把磨盘拉碎了，并没什么卵用。你越努力工作，所承担的压力和责任就越大，你不一定得到相应的回报。</p><p>给多少钱干多少活，这就是职业道德。干的活比给的钱多，那就是不道德，那就是在助纣为虐，活该被剥削。</p><p>资本家努力的工作和普通人努力工作能一样吗？人家在私人飞机上思考全球投资，大白腿给端茶倒水，你特么在黑压压的大开间 996 加班写代码；资本家吹空调喝 XO 看财报简讯，你在挤地铁公交大太阳下给人装 APP 完成 KPI ；资本家赔政要吃饭跳舞，你在家里一面抱着孩子一面线上解 BUG。资本家 16 个小时工作是吃喝玩乐，你 16 个小时是工地搬砖。资本家酒会舞会高尔夫保龄球来去自由，你在公司那个钢筋水泥的透明监狱指纹考勤。</p><p>资本家财富积累都是通过剩余价值的剥削，资本家考虑怎么剥削你，你考虑怎么更多贡献剩余价值？</p><p>上班摸鱼还能节节高升那才是本事，啥也不干资本家还的笑脸相迎高薪聘请，反向割资本家韭菜，这才是你应该思考的东西。</p><p>资本家公开发言劝你努力，就当他们用嘴放屁，止增笑耳。</p><p>不是说既然资本家剥削我，我就彻底混了，自暴自弃，也不加班也不努力。</p><p>这是不对的，这也正式中了资本家的逻辑陷阱。个人努力提升不等于 996 给资本家拉磨，不给资本家搬砖也不代表自我放纵自暴自弃。</p><p>看看人家刘慈欣是怎么做的？上班摸鱼摸出了雨果奖，这才是打工者的一条明路。</p><p>公司分配给你的工作都是没啥价值的重复性工作，或许对新人有点提升，一旦熟悉以后就对个人来说没半点意义。这种垃圾工作干一天算一天钱，谁他妈也不欠谁。你来逼我 996，我就问候你家人，有来有往，礼尚往来。</p><p>有价值，有提升，有技术含量的工作多做点不亏，技术练好了，不给加钱就炒老板鱿鱼。反过来重复性的垃圾任务，打钱就干，不打钱，滚！</p><p>投资自己的事业，多苦多累都可以，为别人做嫁衣，多做一分都嫌弃。</p><p>你年青有为，用青春和健康为别人成就霸业，最后仅得了一个养家糊口的薪水而已；当你人到中年，上有老下有小，一个裁员就让你滚蛋，你家里老人看病小孩待哺，你跟谁哭去？</p><p>什么企业文化，什么都是兄弟，全 TMD 放屁，在利益面前都是贪婪的魔鬼。别尼玛假惺惺的来的劝我努力，害不害臊。</p><p>别特么给我谈理想，谈未来，谈努力，谈回报，爷心里明镜似的，识破了你们这帮贪婪资本家的吸血本质，我就有了未来，我就能努力了，我的回报应该奖励我自己，而不是被你剥削宰割，反过来还喷我不努力！</p><p>from <a href="https://weibo.com/1687243315/Hpz3SgDdf" target="_blank" rel="noopener">https://weibo.com/1687243315/Hpz3SgDdf</a></p></blockquote><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/22/996/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tampermonkey Tutorial</title>
      <link>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/</link>
      <guid>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/</guid>
      <pubDate>Thu, 04 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;浏览器神器教程&lt;/p&gt;
&lt;h1 id=&quot;文档&quot;&gt;&lt;a href=&quot;https://tampermonkey.net/documentation.php?ext=dhdg&amp;amp;locale=zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>浏览器神器教程</p><h1 id="文档"><a href="https://tampermonkey.net/documentation.php?ext=dhdg&amp;locale=zh" target="_blank" rel="noopener">文档</a></h1><hr><p>第一步当然是看官方<a href="https://tampermonkey.net/documentation.php?ext=dhdg&amp;locale=zh" target="_blank" rel="noopener">文档</a>啦.</p><h1 id="hello-world">Hello World</h1><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         douban-ifttt-airtable-tampermonkey</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       CoderTonyChan</span></span><br><span class="line"><span class="comment">// @match        https://*.douban.com/people/103961302/*</span></span><br><span class="line"><span class="comment">// @connect        *</span></span><br><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// @require         http://cdn.bootcss.com/jquery/1.8.3/jquery.min.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br></pre></td></tr></table></figure><p>@name就是脚本名，@namespace是脚本的主页，@version是版本，@description是介绍，@author是作者，@match是匹配到什么页面执行此脚本，@grant是需求权限。其他属性在油猴的<a href="https://tampermonkey.net/documentation.php" target="_blank" rel="noopener">文档</a>里可以看到，在此就不再赘述。</p><p>⚠️:一定要写做 <code>==/UserScript==</code> 以上 不然没办法使用</p><p>加上这个 hello world就完成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line"> </span><br><span class="line">    alert(&apos;Hello, world!&apos;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="匹配">匹配</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @match        https://*.douban.com/people/103961302/*</span></span><br></pre></td></tr></table></figure><p>这个就是匹配使用的站点 但是具体还要如何配匹呢? 可以用 ,参考这个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> doubanSite = location.href;</span><br><span class="line">    <span class="keyword">const</span> reMovie = <span class="regexp">/movie.douban/i</span>;</span><br><span class="line">    <span class="keyword">const</span> reBook = <span class="regexp">/book.douban/i</span>;</span><br><span class="line">    <span class="keyword">const</span> reGame = <span class="regexp">/\/games/i</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ifttt = <span class="string">'&lt;button class="ifttt" style="font-size: 18px;outline: none;"&gt;[upload airtable]&lt;/button&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影</span></span><br><span class="line">    <span class="keyword">if</span> (reMovie.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 📖</span></span><br><span class="line">    <span class="keyword">if</span> (reBook.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 🎮</span></span><br><span class="line">    <span class="keyword">if</span> (reGame.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="按钮hook">按钮hook</h1><p>利用jQuery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ifttt = <span class="string">'&lt;button class="ifttt" style="font-size: 18px;outline: none;"&gt;[upload airtable]&lt;/button&gt;'</span>;</span><br><span class="line"><span class="keyword">const</span> ul_tag = $(<span class="string">"div.grid-view .item .info .title"</span>);</span><br><span class="line"><span class="keyword">if</span> (ul_tag) &#123;</span><br><span class="line">    ul_tag.append(ifttt);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">".ifttt"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以做一些东西了</p><h1 id="网络请求">网络请求</h1><hr><p>如果需要网络请求 需要加上这些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @connect        *</span></span><br><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This Userscirpt can't run under Greasemonkey 4.x platform</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> GM_xmlhttpRequest === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    alert(<span class="string">"不支持Greasemonkey 4.x，请换用暴力猴或Tampermonkey"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再封装一下 ⚠️ : GM_xmlhttpRequest 不会帮你拼任何 Content-Type 啊 和 处理object类型 需要自己封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log('post');</span></span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">"object"</span>) &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> req = GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        data: data,</span><br><span class="line">        onreadystatechange: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    callback(res.response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDoc</span>(<span class="params">url, meta, callback</span>) </span>&#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        onload: <span class="function"><span class="keyword">function</span> (<span class="params">responseDetail</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (responseDetail.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> doc = page_parser(responseDetail.responseText);</span><br><span class="line">                callback(doc, responseDetail, meta);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onload: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">                callback(<span class="built_in">JSON</span>.parse(response.responseText), url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="literal">false</span>, url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发布脚本">发布脚本</h1><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @homepageURL  https://domain/folder/index.html</span></span><br><span class="line"><span class="comment">// @supportURL   https://domain/folder/issues.html</span></span><br><span class="line"><span class="comment">// @downloadURL  https://domain/folder/code.user.js</span></span><br><span class="line"><span class="comment">// @updateURL    https://domain/folder/code.user.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br></pre></td></tr></table></figure><p>@homepageURL是主页，@supportURL是问题报告页面，@downloadURL是下载地址，@updateURL是自动更新地址。值得注意的地方是下载地址和更新地址一定要是.user.js结尾的，这样如果你装了油猴插件，在打开这个URL的时候，会跳转到油猴脚本的安装页面。只需要把这个URL共享给别人，他就可以直接安装脚本了。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apple News Format</title>
      <link>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/</link>
      <guid>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/</guid>
      <pubDate>Wed, 03 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今年苹果春季发布会主要发布的是软件,  Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。但最终发布的「现货」只有 Apple News+ 这一项。Apple News+ 能不能成为新闻业的 Netflix
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今年苹果春季发布会主要发布的是软件,  Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。但最终发布的「现货」只有 Apple News+ 这一项。Apple News+ 能不能成为新闻业的 Netflix？</p><h1 id="apple-news-format">Apple News Format</h1><hr><p>Apple News+ 的内容呈现技术是以 Apple News Format 为基础的。这是苹果为 Apple News 定制的一种私有格式，它通过 JSON 语法定义页面中元素的布局、外观和功能，可以实现比普通网页格式更丰富的视觉效果和交互。虽然 Apple News Format 在 2015 年就已随着初版 News 应用一起上线，但它此次也迎来了一次功能更新，包括根据屏幕宽度动态调整布局、文章链接支持显示标题和预览图等；显然，这是为了让 Apple News+ 更好地支持不同尺寸的设备和版式复杂的杂志文章而做的铺垫。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445156-754af400-55ec-11e9-8ee1-65c8cf4e74b7.png" alt="image"></p><h1 id="apple-news-的竞争力">Apple News+ 的竞争力</h1><hr><p>当然，评价 Apple News+ 的优劣还要将它和竞争者对比之后才能做出结论。提供「打包」式杂志订阅并不是一种很新颖的模式。除了被苹果收购以为 Apple News+ 做准备的 Texture（已经宣布即将结束独立运营），如今还有 Magzter、Scribd 等公司提供功能和价格均相近的订阅服务。此外，亚马逊的 Kindle Unlimited 订阅虽然以图书为主，但也涵盖了不少杂志内容；PressReader 的模式则是与图书馆和酒店合作，用户可以在连接到它们特设的 WiFi 热点时无限阅读期刊。</p><p>在杂志内容的呈现形式上，这些竞争服务有的只提供 PDF 图像（如 Magzter），有的只提供文本（如 Scribd），也有的两者均提供、并允许用户在两种模式间切换（如 Kindle）。但无论采用哪种做法，呈现效果都不尽如人意。PDF 格式的局限性无需多言，即使像 Kindle 那样提供文本，其样式也非常单调，并且常有错漏（何况 Kindle 软件本身的排版效果一直很差）。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445241-fd30fe00-55ec-11e9-861f-7cf9a063e11d.png" alt="image"></p><p>表现最好的可能是 PressReader，它会在图像版本上高亮框出文章标题，点按后即可跳转到对应的文字版，并且界面上会给出相关内容推荐。但即使如此，它也没有能完全克服传统刊物在移动设备上水土不服的问题，读者在使用时能明显感到这是一种妥协后的效果。与它们相比，Apple News+ 的确有比较明显的优势。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445245-05893900-55ed-11e9-8ed8-5c0a10af771d.png" alt="image"></p><p>不过，这种优势是有前提的，那就是内容提供方充分利用了 Apple News Format 的功能；但从前文可以看出，有条件做到这一点的只是少数。对于大多数只是简单转换格式、甚至直接丢给用户一个扫描版的文章来说，其在 Apple News+ 上的阅读体验和在其他平台上并无本质区别。</p><p>要获得成功，Apple News+ 还需要说服读者从传统的订阅渠道转移。为此，苹果少见地打起了价格牌，在发布会上指出：如果一一订阅该服务中所有刊物，每年需要花费 8000 美元以上，因此 Apple News+ 不到两位数的月费就显得十分超值了。</p><p>显然，这种算法是有所夸大的。首先，没有人会真的去订阅几百种杂志。对于一般人而言，同时阅读三四份刊物可能已经是精力上限。另外，8000 美元的价格显然是用名义上的标价计算的，但实际情况是几乎没有人会按原价订阅杂志。除了《纽约客》《时代》等名声相对显赫的杂志，大多数 Apple News+ 中的刊物都可以在亚马逊等网站上用一季度甚至一年 5 美元的价格订阅纸刊，并且附送 Kindle 版和官网阅读权限。极端如《连线》等媒体甚至隔周就会出现 4 美元/两年这种「跳楼价」。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445256-13d75500-55ed-11e9-97db-0e4930d87cba.png" alt="image"></p><p>不仅如此，如今期刊内容的免费获取渠道也极为广泛。这里的「免费」并不是指盗版；很多杂志都会在其网站上将纸刊内容都会同步甚至提前全文刊出，且其中很大比例是没有付费墙的。即使有的限制了阅读篇数，其执行也通常极为宽松。因此，即使没有 Apple News+，通过现有渠道阅读杂志内容也是相对方便和廉价的，平均成本未必会达到每月 10 美元。</p><p>实际上，期刊目前的低廉定价和 Apple News+ 杂志库的庞大是同一枚硬币的两面，其成因都在于期刊行业的营利模式和业务现状。与报纸、电视等其他大众传媒类似，杂志行业的主要收入并不在于销售，而是来自广告。在美国，期刊行业广告收入占总收入的比例是 51.1%，显著高于来自订阅和零售的收入（34.9%）。因此，即使赔本销售杂志，如果能由此扩大发行量和读者群，随之增加的广告投放也足以让杂志社维持经营。</p><p>但在近年，随着广告投入越发向数字平台转移，期刊行业的传统商业模式已经难以维持。以美国为例，该行业的收入总额连续多年下滑，从 2009 年的 3970 万美元跌至 2018 年的 2112 万美元，雇员人数从 14 万余人缩减到 8 万余人。仅去年一年，就有包括《Interview》《The Village Voice》在内的多家著名刊物宣布停刊。因此，通过低价促销和加入 Apple News+ 这样的平台来维持覆盖面，某种程度上也是不得已而为之的选择。发布会前几周，有消息称苹果对 Apple News+ 的内容方 收取高达 50% 的收入提成，引发了不少关于苹果是否过于「贪婪」的讨论。这或许能体现双方谈判地位的差异，但换一个角度看，既然很多杂志之前已经通过各种渠道提供了电子版，将这一现成资源挪用到苹果平台上销售并不需要多少额外成本，因此即使在「克扣」后也是一种净得。</p><p>当然，对于处于金字塔顶端的一些刊物，例如《华尔街日报》《纽约时报》来说，情况可能有所不同。这些媒体本身具有较强的订户基础，拥有自己的广告发行渠道，并已在向数字发行转移的方向上取得了一定成功，因此并不依赖于苹果提供的平台；Apple News 的封闭式特征反倒会影响它们自己网站的流量。不仅如此，这些大牌媒体往往并不满足于沦落为科技公司的内容提供商，而是希望强化自己的品牌识别度，和订户建立直接的业务和情感联系——《纽约时报》在其面向 2020 年的运营策略报告中就反复强调读者的「忠诚」「参与」和对报道的反哺作用。于是，它们要么干脆不和苹果合作，要么用缩水的内容谨慎试水。这进一步限制了 Apple News+ 能为用户带来的优惠程度。</p><p>总之，Apple News+ 并不是苹果替消费者行道、与期刊业博弈的让利之举，而是苹果与内容方基于各自对内容和平台的渴求展开的合作。10 美元的打包价当然具有一定吸引力，但并不是一笔稳赚不赔的投资。</p><hr><p>Reference：</p><blockquote><p>少数派：<a href="https://sspai.com/post/53837" target="_blank" rel="noopener">Apple News+ 能不能成为新闻业的 Netflix？这是我的一周使用体验</a></p><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019 春分</title>
      <link>https://blog.tonystudio.ml/2019/03/21/2019-Spring/</link>
      <guid>https://blog.tonystudio.ml/2019/03/21/2019-Spring/</guid>
      <pubDate>Thu, 21 Mar 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在9012年寒冬中迎来了春分, 春分自淮北，寒食渡江南。&lt;/p&gt;
&lt;p&gt;几个互联网公司发布了重要举动。真是一年之计在于春啊。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apple.com/v/apple-events/home/b/built/assets/e
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在9012年寒冬中迎来了春分, 春分自淮北，寒食渡江南。</p><p>几个互联网公司发布了重要举动。真是一年之计在于春啊。</p><p><a href="https://www.apple.com/v/apple-events/home/b/built/assets/event.ics" target="_blank" rel="noopener">苹果春季发</a>布会还有几日, 但是各种产品已经在商城更新, WWDC19也定于6月3日-7日。</p><p>谷歌在 GDC 大会上公布云游戏平台「Stadia」。</p><p>腾讯公司也于昨日开启了自家云游戏平台「<a href="https://start.qq.com" target="_blank" rel="noopener">START</a>」 的预约内测页面, 已经预约, 看看是否能颠覆主机, 其实主要看开发商, 有开发商加盟才有戏。</p><p>亚马逊上架 Kindle 全新青春版。</p><h1 id="苹果">苹果</h1><hr><p>最有性价比的应该是27寸iMac。</p><p>AirPods等到颈长,表现应该有保障,主要是充电器涨价了。总的来说，有一代的基本可以忽略不计（电池不行的除外），等二代的可以直接入手了。</p><p><img src="https://user-images.githubusercontent.com/16996753/54731343-b4c71880-4bc8-11e9-9a15-8ce1a01dfd76.jpg" alt="2019-03-21 08 40 32"></p><p><img src="https://user-images.githubusercontent.com/16996753/54731531-a0cfe680-4bc9-11e9-9a63-0bba02051a1e.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/16996753/54732396-7b91a700-4bce-11e9-94eb-c673d0f916ec.png" alt="image"></p><h2 id="春季发布会">春季发布会</h2><hr><p>仅发布了 Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。</p><h1 id="亚马逊">亚马逊</h1><hr><p>Kindle 低配加灯 非常懂需求 看漫画32G也不够用 4G有点难受 但是电子书的话 最便宜了</p><p><img src="https://user-images.githubusercontent.com/16996753/54731351-babcf980-4bc8-11e9-9bf7-4e1418316c79.png" alt="WX20190321-084450"></p><h1 id="谷歌">谷歌</h1><hr><p>谷歌云游戏平台 Stadia 2019年内上线，同时成立第一方游戏公司 - 4K 60帧</p><p><img src="https://user-images.githubusercontent.com/16996753/54731517-8ac22600-4bc9-11e9-8349-fd394424a19c.png" alt="image"></p><h1 id="腾讯">腾讯</h1><hr><h1 id="小米">小米</h1><hr><p>小米首个年度财报出来</p><p><img src="https://user-images.githubusercontent.com/16996753/54731467-50588900-4bc9-11e9-8f1d-859bc290ddfb.png" alt="image"></p><h1 id="两会">两会</h1><hr><p>只知道人民网疯涨, 都在等科创</p><p><img src="https://user-images.githubusercontent.com/16996753/54732139-1ab59f00-4bcd-11e9-8be9-e704d1430d95.jpg" alt="2"></p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/21/2019-Spring/#disqus_thread</comments>
    </item>
    
    <item>
      <title>A ttrss setup guide.</title>
      <link>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/</link>
      <guid>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/</guid>
      <pubDate>Thu, 21 Mar 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This is a detailed guide to setup a fully running ttrss instance and explore its potential.&lt;/p&gt;
&lt;h1 id=&quot;docker&quot;&gt;docker&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This is a detailed guide to setup a fully running ttrss instance and explore its potential.</p><h1 id="docker">docker</h1><hr><h2 id="requirements">Requirements</h2><hr><p>yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><h2 id="set-up-the-repository">SET UP THE REPOSITORY</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="install-docker-ce">INSTALL DOCKER CE</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="start-docker">Start Docker</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="postgresql">PostgreSQL</h1><hr><p>I chose this image because it allows you to specify the extensions you want to enable. pg_trgm is required for marking similar feeds as read via the ttrss plugin af_psql_trgm.</p><p>The default user is <code>postgres</code>.</p><p>It persists its data in directory <code>/docker/postgres/data/</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name postgres --restart=always \</span><br><span class="line">-v /docker/postgres/data/:/var/lib/postgresql/ \</span><br><span class="line">-e PG_PASSWORD=mydbpass \</span><br><span class="line">-e DB_EXTENSION=pg_trgm \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">sameersbn/postgresql:latest</span><br></pre></td></tr></table></figure><h2 id="change-password">change password</h2><hr><p><a href="http://tonystudio.ml" target="_blank" rel="noopener">tonystudio.ml</a></p><p>navicat</p><h1 id="nginx">nginx</h1><hr><p>SSL功能需要openssl库，直接通过yum安装:</p><p>sudo yum install openssl</p><p>gzip模块需要zlib库，直接通过yum安装:</p><p>sudo yum install zlib</p><p>rewrite模块需要pcre库，直接通过yum安装:</p><p>sudo yum install pcre</p><p>sudo yum install nginx</p><p>sudo service nginx start</p><h2 id="config">config</h2><hr><p>ssl certificate can be obtained for free here at <a href="https://letsencrypt.org" target="_blank" rel="noopener">Let’s Encrypt</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">upstream ttrss &#123;</span><br><span class="line">    server 127.0.0.1:7722;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  rss.tonystudio.ml;</span><br><span class="line">    return 301 https://rss.tonystudio.ml$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    gzip on;</span><br><span class="line">    server_name  rss.tonystudio.ml;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /home/kiritochan1990/tonystudio/Nginx/1_tonystudio.ml_bundle.crt;</span><br><span class="line">    ssl_certificate_key /home/kiritochan1990/tonystudio/Nginx/2_tonystudio.ml.key;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/ttrss_access.log combined;</span><br><span class="line">    error_log  /var/log/nginx/ttrss_error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://ttrss;</span><br><span class="line"></span><br><span class="line">        proxy_set_header  Host                $http_host;</span><br><span class="line">        proxy_set_header  X-Real-IP           $remote_addr;</span><br><span class="line">        proxy_set_header  X-Forwarded-Ssl     on;</span><br><span class="line">        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">        proxy_set_header  X-Frame-Options     SAMEORIGIN;</span><br><span class="line"></span><br><span class="line">        client_max_body_size        100m;</span><br><span class="line">        client_body_buffer_size     128k;</span><br><span class="line"></span><br><span class="line">        proxy_buffer_size           4k;</span><br><span class="line">        proxy_buffers               4 32k;</span><br><span class="line">        proxy_busy_buffers_size     64k;</span><br><span class="line">        proxy_temp_file_write_size  64k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test-todo">test todo</h2><hr><p>curl <a href="https://127.0.0.1" target="_blank" rel="noopener">https://127.0.0.1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl: (60) Peer&apos;s Certificate issuer is not recognized.</span><br><span class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl performs SSL certificate verification by default, using a &quot;bundle&quot;</span><br><span class="line"> of Certificate Authority (CA) public keys (CA certs). If the default</span><br><span class="line"> bundle file isn&apos;t adequate, you can specify an alternate file</span><br><span class="line"> using the --cacert option.</span><br><span class="line">If this HTTPS server uses a certificate signed by a CA represented in</span><br><span class="line"> the bundle, the certificate verification probably failed due to a</span><br><span class="line"> problem with the certificate (it might be expired, or the name might</span><br><span class="line"> not match the domain name in the URL).</span><br><span class="line">If you&apos;d like to turn off curl&apos;s verification of the certificate, use</span><br><span class="line"> the -k (or --insecure) option.</span><br></pre></td></tr></table></figure><h1 id="ttrss">TTRSS</h1><hr><p>This links ttrss with the PostgreSQL container created just now and exposes port 7722 to the public.</p><p>The default credential is admin and password. You should be prompted to change them upon first login, please do so.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -dit --name=ttrss --restart=always \</span><br><span class="line">-e SELF_URL_PATH=http://rss.tonystudio.ml \</span><br><span class="line">-e DB_HOST=postgres  \</span><br><span class="line">-e DB_PORT=5432  \</span><br><span class="line">-e DB_NAME=myttrss  \</span><br><span class="line">-e DB_USER=tonychan  \</span><br><span class="line">-e DB_PASS=your-passwd  \</span><br><span class="line">-p 7722:80  \</span><br><span class="line">wangqiru/ttrss</span><br></pre></td></tr></table></figure><h2 id="test">test</h2><p>curl <a href="http://127.0.0.1:7722" target="_blank" rel="noopener">http://127.0.0.1:7722</a> 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Startup failed&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/default.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body class=&apos;sanity_failed claro ttrss_utility&apos;&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Startup failed&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Tiny Tiny RSS was unable to start properly. This usually means a misconfiguration or an incomplete upgrade. Please fix</span><br><span class="line">errors indicated by the following messages:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;alert alert-danger&quot; id=&quot;&quot;&gt;Please set SELF_URL_PATH to the correct value for your server (possible value: &lt;b&gt;http://127.0.0.1:7722/&lt;/b&gt;)&lt;/div&gt;&lt;div class=&quot;alert alert-danger&quot; id=&quot;&quot;&gt;Please set SELF_URL_PATH to the correct value detected for your server: &lt;b&gt;http://127.0.0.1:7722/&lt;/b&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;You might want to check tt-rss &lt;a href=&quot;http://tt-rss.org/wiki&quot;&gt;wiki&lt;/a&gt; or the</span><br><span class="line">&lt;a href=&quot;http://tt-rss.org/forum&quot;&gt;forums&lt;/a&gt; for more information. Please search the forums before creating new topic</span><br><span class="line">for your question.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="stopampampdelete">stop&amp;&amp;delete</h3><hr><p>sudo docker container ls</p><p>sudo docker stop ttrss</p><p>sudo docker rm ttrss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -dit --name=ttrss --restart=always \</span><br><span class="line">--net ttrss_network \</span><br><span class="line">-e SELF_URL_PATH=http://localhost:7722/ \</span><br><span class="line">-e DB_HOST=127.0.0.1  \</span><br><span class="line">-e DB_PORT=5432  \</span><br><span class="line">-e DB_NAME=myttrss  \</span><br><span class="line">-e DB_USER=tonychan  \</span><br><span class="line">-e DB_PASS=your-passwd  \</span><br><span class="line">-p 7722:80  \</span><br><span class="line">wangqiru/ttrss</span><br></pre></td></tr></table></figure><h2 id="docker-network">docker network</h2><hr><p>sudo docker network create ttrss_network<br>sudo docker network connect ttrss_network postgres<br>sudo docker network connect ttrss_network ttrss<br>sudo docker restart ttrss</p><h1 id="docker-compose">docker-compose</h1><hr><p>for centos</p><p>sudo curl -L “<a href="https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$</a>(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose</p><p>sudo chmod +x /usr/local/bin/docker-compose</p><p>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</p><p>docker-compose --version</p><h1 id="up">up</h1><hr><p>sudo docker-compose up -d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  database.postgres:</span><br><span class="line">    image: sameersbn/postgresql:latest</span><br><span class="line">    container_name: postgres</span><br><span class="line">    ports:</span><br><span class="line">      - 5678:5432</span><br><span class="line">    environment:</span><br><span class="line">      - PG_PASSWORD=your-passwd # please change the password</span><br><span class="line">      - DB_EXTENSION=pg_trgm</span><br><span class="line">    volumes:</span><br><span class="line">      - ~/postgres/data/:/var/lib/postgresql/ # persist postgres data to ~/postgres/data/ on the host</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.rss:</span><br><span class="line">    image: wangqiru/ttrss:latest</span><br><span class="line">    container_name: ttrss</span><br><span class="line">    ports:</span><br><span class="line">      - 7722:80</span><br><span class="line">    environment:</span><br><span class="line">      - SELF_URL_PATH=https://rss.tonystudio.ml/ # please change to your own domain</span><br><span class="line">      - DB_HOST=database.postgres</span><br><span class="line">      - DB_PORT=5432</span><br><span class="line">      - DB_NAME=ttrss</span><br><span class="line">      - DB_USER=postgres</span><br><span class="line">      - DB_PASS=your-passwd # please change the password</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    restart: always</span><br><span class="line">    command: sh -c &apos;sh /wait-for database.postgres:5432 -- php /configure-db.php &amp;&amp; exec s6-svscan /etc/s6/&apos;</span><br><span class="line"></span><br><span class="line">  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/mercury-parser-api:latest</span><br><span class="line">    container_name: mercury</span><br><span class="line">    expose:</span><br><span class="line">      - 3000</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/opencc-api-server:latest</span><br><span class="line">    container_name: opencc</span><br><span class="line">    environment:</span><br><span class="line">      NODE_ENV: production</span><br><span class="line">    expose:</span><br><span class="line">      - 3000</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>The default credential is admin and password.</p><h1 id="fever">fever</h1><hr><p>Reeder3 邮箱地址填你的用户名 默认使用admin<br>密码 在Fever中设置</p><p>fever API不支持添加和删除订阅源 只支持Star等常规操作.</p><h1 id="gcp">GCP</h1><hr><p>Something about GCP Settings.</p><ul><li>禁止root登陆</li><li>只开放需要的端口。</li><li>不要用常规默认端口。例如ssh 不要用22</li><li>不使用默认账号(但是始终要记一个管理员账号)</li><li>限制IP段登录 (暂时没做)</li><li>没使用Linux的iptable做, 使用VPC网络做(相当于路由器)</li></ul><p><img src="https://user-images.githubusercontent.com/16996753/54900715-4d360380-4f0f-11e9-9de0-045e9cc9c752.png" alt="image"></p><h1 id="backup">Backup</h1><hr><p>backup database.</p><h2 id="主从复制">主从复制</h2><hr><p>主流 todo</p><h2 id="物理备份">物理备份</h2><hr><p>复制的恢复不出来 而且需要版本的一致</p><h2 id="逻辑备份">逻辑备份</h2><hr><h3 id="转存sql">转存SQL</h3><hr><p>这个跨平台能通用 缺点是包比较大 (10.8M)</p><h3 id="navicat内置">navicat内置</h3><hr><p>应该有兼容性问题 例如 部署在centos中的postgres的备份 在macos中恢复失败</p><p>但是用SQL先恢复出来后 然后在macos中备份 然后在macos中恢复成功</p><h1 id="postgres备份"><a href="http://www.postgres.cn/docs/9.6/backup-dump.html" target="_blank" rel="noopener">postgres备份</a></h1><hr><h2 id="sql转储">SQL转储</h2><hr><p>SQL 转储方法的思想是创建一个由SQL命令组成的文件，当把这个文件回馈给服务器时，服务器将利用其中的SQL命令重建与转储时状态一样的数据库。pg_dump创建的备份在内部是一致的， 也就是说，转储表现了pg_dump开始运行时刻的数据库快照，且在pg_dump运行过程中发生的更新将不会被转储。pg_dump工作的时候并不阻塞其他的对数据库的操作。 （但是会阻塞那些需要排它锁的操作，比如大部分形式的ALTER TABLE）</p><h2 id="文件系统级别备份">文件系统级别备份</h2><hr><h2 id="流复制">流复制</h2><hr><p>流复制允许一台后备服务器比使用基于文件的日志传送更能保持为最新的状态。 后备服务器连接到主服务器， 主服务器则在 WAL(write ahead log) 记录产生时即将它们以流式传送给后备服务器而不必等到 WAL文件被填充。在这种情况下主服务器上提交一个事务与该变化在后备服务器上变得可见之间存在短暂的延迟。 不过这种延迟比基于文件的日志传送方式中要小得多， 在后备服务器的能力足以跟得上负载的前提下延迟通常低于一秒。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019博客升级</title>
      <link>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/</link>
      <guid>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/</guid>
      <pubDate>Tue, 05 Mar 2019 06:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;2019年更新一下😊&lt;/p&gt;
&lt;h1 id=&quot;目标功能&quot;&gt;目标功能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[x] Disqus换Gitalk&lt;/li&gt;
&lt;li&gt;[x] Google Analytics&lt;/li&gt;
&lt;li&gt;[ ] 标签功能升级&lt;/li&gt;
&lt;li&gt;[ ] 分类功能&lt;/l
        
      
      </description>
      
      <content:encoded><![CDATA[<p>2019年更新一下😊</p><h1 id="目标功能">目标功能</h1><ul><li>[x] Disqus换Gitalk</li><li>[x] Google Analytics</li><li>[ ] 标签功能升级</li><li>[ ] 分类功能</li><li>[ ] 照片墙功能</li></ul><h1 id="disqus换gitalk">Disqus换Gitalk</h1><hr><p>由于在国内上 Disqus 十分糟糕，而且本人社交基本在GitHub上，故改成Gitalk</p><h2 id="集成-gitalk">集成 Gitalk</h2><hr><p>可参考文档 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Gitalk 评论 start  --&gt;</span><br><span class="line">&#123;% if site.gitalk.enable %&#125;</span><br><span class="line">&lt;!-- Link Gitalk 的支持文件  --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: `Github Application clientID`,</span><br><span class="line">        clientSecret: `Github Application clientSecret`,</span><br><span class="line">        repo: `存储你评论 issue 的 Github 仓库名`,</span><br><span class="line">        owner: &apos;Github 用户名&apos;,</span><br><span class="line">        admin: [&apos;Github 用户名&apos;],</span><br><span class="line">        id: location.pathname,</span><br><span class="line">    &#125;);</span><br><span class="line">    gitalk.render(&apos;gitalk-container&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;!-- Gitalk end --&gt;</span><br></pre></td></tr></table></figure><h3 id="gitalk的错误">Gitalk的错误</h3><hr><p>error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%<a href="http://2Fdeveloper.github.com" target="_blank" rel="noopener">2Fdeveloper.github.com</a>%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch</p><ul><li><p>中文或者空格路径的问题</p></li><li><p>配置后面加上 /</p></li></ul><p><img src="https://user-images.githubusercontent.com/16996753/55541634-ef1bd400-56f7-11e9-8a67-417e833a8dfa.png" alt="image"></p><h2 id="创建-github-application">创建 Github Application</h2><hr><p>如果没有 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a>，<code>Authorization callback URL</code> 填写当前使用插件页面的域名。</p><h2 id="创建issue">创建issue</h2><hr><p>当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 repo 的仓库下创建对应 issue。</p><p>当然，你也可以手动创建issue作为 gitalk评论容器。只要有 Gitalk 标签 和 id 对应标签就可以。</p><p>Gitalk 需要在管理员在登录状态下点开每篇文章的页面才会创建对应的 issue。</p><p>解决方案如下 :<br><a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a></p><h1 id="google-analytics">Google Analytics</h1><hr><h1 id="标签功能升级">标签功能升级</h1><hr><h1 id="分类功能">分类功能</h1><hr><h1 id="照片墙功能">照片墙功能</h1><hr><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/#disqus_thread</comments>
    </item>
    
    <item>
      <title>七牛云备份命令</title>
      <link>https://blog.tonystudio.ml/2019/02/26/qiniu/</link>
      <guid>https://blog.tonystudio.ml/2019/02/26/qiniu/</guid>
      <pubDate>Tue, 26 Feb 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;由于最近博客搬家, 使用了七牛云&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>由于最近博客搬家, 使用了七牛云</p></blockquote><p><img src="https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11e9-9d32-b5507474259b.png" alt="image"></p><h1 id="批量上传">批量上传</h1><hr><p>blog.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"src_dir"</span>: <span class="string">"/Users/tonychan/Pictures/qiniu"</span>,</span><br><span class="line"><span class="attr">"bucket"</span>: <span class="string">"tonystudio-ml"</span>,</span><br><span class="line"><span class="attr">"rescan_local"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"skip_suffixes"</span>: <span class="string">".DS_Store"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qupload blog.json</span><br></pre></td></tr></table></figure><h1 id="批量下载">批量下载</h1><hr><pre><code class="language-shell">qshell listbucket tonystudio-ml  &gt; listcat list | awk -F ' ' ' {print &quot;http://oss.zhcoco.com/&quot;$1}' &gt; urlList</code></pre><p>将tonystudio-ml 和 <a href="http://oss.zhcoco.com" target="_blank" rel="noopener">http://oss.zhcoco.com</a> 改成自己的变量即可</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/02/26/qiniu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2018 年总结</title>
      <link>https://blog.tonystudio.ml/2019/01/01/2018-summary/</link>
      <guid>https://blog.tonystudio.ml/2019/01/01/2018-summary/</guid>
      <pubDate>Mon, 31 Dec 2018 16:11:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;不知不觉已经到了9102年了，回顾过去的2018，自己也有不少的收获。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oss.zhcoco.com/2019/2018-summary.0.png&quot; alt=&quot;&quot;&gt;&lt;/p
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>不知不觉已经到了9102年了，回顾过去的2018，自己也有不少的收获。</p></blockquote><p><img src="http://oss.zhcoco.com/2019/2018-summary.0.png" alt=""></p><h1 id="2018总结">2018总结</h1><hr><p>2018慢慢体验到了苹果，Google，腾讯的伟大的。慢慢拾起苹果的各种效率应用，比如邮件、日历、提醒事项、备忘录、捷径等等。还有离不开iPhone的生态。在设计行业和影音行业的领先，比如发布了iMac Pro，和iPad Pro都是针对设计行业。</p><p>Google的云服务基本没任何对手。YouTube，Google Photos，Google Maps暂时没任何对手。</p><p>后慢慢了解到社交的重要性，虽然腾讯不是最牛的，但是是微信让我理解到这一点。社交可以做任何事情，社交 + 教育 / 社交 + 金融 / 社交 + 电商 。</p><p>因为社交的载体是人，就有了无限的可能性，而互联网最重要的是内容，内容正是从人而来，这就应了习大大的口号：“人才是第一资源，创新是第一动力”。</p><p>对于我个人成长，我需要利用好这些工具去更快成长！</p><p>2018年，我接触到很多软件工程外其他领域，比如产品设计，平面设计，摄影师，录像师，健身教程，花式溜冰，炒菜教程等等。</p><p>通过观看各种各样的教程，更加发现，名师的重要性。再次体验到人在这个环节的重要性。“你爸是谁”既然存在，就非常合理。</p><p>以下通过几个关键词去总结过去一年。</p><h1 id="健康">健康</h1><hr><h2 id="keep">Keep</h2><hr><p>总结报告</p><p>Keep的课程分类<br><img src="https://user-images.githubusercontent.com/16996753/53464300-aaf83c80-3a84-11e9-9eec-84952cdfe77a.png" alt="22dbb8df-7f7b-4bae-9276-efb80908933a"><br><img src="https://user-images.githubusercontent.com/16996753/53464304-b0ee1d80-3a84-11e9-8f68-1eab6ef90e88.png" alt="c3383a41-76e9-45d6-8bcd-18afe9740b28"></p><p>但是也没真正减肥，只是能保证以后没这么多病。</p><h2 id="滑冰️">滑冰⛸️</h2><hr><p>夏天的新尝试，但是现在几乎都忘了。</p><h1 id="读书电影">读书/电影</h1><hr><h2 id="豆瓣">豆瓣</h2><hr><p><a href="https://www.douban.com/standbyme/2018?uid=103961302&amp;dt_dapp=1" target="_blank" rel="noopener">总结报告</a></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-1.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-2.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-3.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-4.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-5.png" alt=""></p><h2 id="kindle">Kindle</h2><hr><p>购入了Kindle，看更多的书籍</p><h1 id="平面设计摄影师录像师">平面设计/摄影师/录像师</h1><hr><p>艺术，使人脱颖而出。</p><p>我们不只是用相机拍照，我们带到摄影中去的是所有我们读过的书、看过的电影、听过的音乐、走过的路、爱过的人。</p><h2 id="平面设计">平面设计</h2><hr><p>接触到了wacom全线产品，对比iPad Pro和Surface系列。</p><p>也了解一些绘图的基本功。</p><p>学习了一些素描的基础，但是没有坚持下去。</p><h2 id="摄影师">摄影师</h2><hr><p>A7 + 55 1.8/28 f2/85 1.8 的使用</p><p>理论基本上全部看完了，什么构图，调色，机器的使用，LR/PS教程。</p><p>但是能拿出手的就只有漫展和日本旅行的照片，平时并没有作为摄影师的素养。</p><h2 id="录像师">录像师</h2><hr><p>基本上看完了Final Cut Pro X的所有基本操作。还购入了大疆的OSMO Mobile 2。</p><p>但是一个像样的视频也没有创作出来，基本是demo。</p><h1 id="金融">金融</h1><hr><p>业余时间也读了一些经济学相关的教材，了解经济学的知识对作者的影响还是比较大的，虽然很多经济学的结论都能够根据直觉推测出来，但是有一些现象和规则学习起来还是非常有趣。</p><p>明年可能还是会花一些时间来阅读经济学相关的书籍，同时也希望减少技术书籍的阅读量，目前市面上真正值得多次阅读的技术书籍真的非常的少，想要静下心来好好学习一下更抽象的知识，帮助自己在软件设计上的理解更进一步。</p><h1 id="生活">生活</h1><h2 id="小公主1岁">小公主1岁</h2><hr><p>通过iPhone的照片应用，的确留下不是珍贵的片段。</p><p>小孩教育的思考：</p><p>魔都娃标配兴趣班列表：</p><ul><li>一门乐器，以钢琴为首，小提琴、架子鼓，长笛、古筝等民乐为辅，再佐以黑管、大提琴、古琴等小众乐器等；</li><li>一门运动，游泳最佳，足球、网球、篮球、轮滑、跆拳道等为辅，再佐以冰球、剑道、高尔夫等小众高端运动项目；</li><li>一门艺术，以画画、舞蹈为首，书法、国学、其他手工课程为辅；</li><li>一门学科，以英语、奥数（思维／数学）为主，大部分是两门都上，再辅以乐高、机器人等其他高冷课程；</li></ul><h2 id="10月日本之旅">10月日本之旅</h2><hr><p>一些照片</p><h1 id="游戏">游戏</h1><hr><ul><li>怪物猎人世界</li><li>机战X</li><li>奥德赛</li><li>Let’s Go 皮卡超</li></ul><h1 id="社交网络">社交网络</h1><hr><ul><li>RSSHub</li><li>YouTube</li><li>BiliBili</li><li>Telegram</li><li>好友圈</li><li>博客</li><li>Facebook</li><li>Ins</li><li>微博</li></ul><h1 id="个人项目">个人项目</h1><hr><ul><li>GCP的梯子</li><li>GitHub的PR</li><li>自建RSS</li></ul><h2 id="博客">博客</h2><hr><p>培养写作的能力。</p><h1 id="未来技术趋势">未来技术趋势</h1><hr><ul><li>分布式</li><li>区块链</li><li>云原生（k8s）</li></ul><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/01/01/2018-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FFmpeg命令</title>
      <link>https://blog.tonystudio.ml/2018/11/06/FFmpeg/</link>
      <guid>https://blog.tonystudio.ml/2018/11/06/FFmpeg/</guid>
      <pubDate>Tue, 06 Nov 2018 00:11:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;最近研究音视频的下载, 用上FFMpeg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39d
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>最近研究音视频的下载, 用上FFMpeg</p></blockquote><p><img src="https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11e9-9d32-b5507474259b.png" alt="image"></p><h1 id="mp4分割">mp4分割</h1><hr><p>由于iCloud的上传只能上传15min以内的,所有有了这个需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">startTime=0</span><br><span class="line">endTime=0</span><br><span class="line">length=11530</span><br><span class="line">i=0</span><br><span class="line">file=$1</span><br><span class="line">while [ $endTime -le $length ]; do</span><br><span class="line"><span class="meta">#</span>statements</span><br><span class="line">    i=$[$i+1]</span><br><span class="line">    endTime=$[$startTime+840]</span><br><span class="line">    ./ffmpeg -ss $startTime -to $endTime -accurate_seek -i $1 -codec copy -avoid_negative_ts 1 $&#123;file%.*&#125;$i.mp4</span><br><span class="line">    startTime=$[endTime]</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="flv2mp4">FLV2MP4</h1><hr><pre><code class="language-shell">for file in *.mp4do    ./ffmpeg -i $file ${file%.mp4}v2.mp4done</code></pre><h1 id="m3u8-dl">m3u8-dl</h1><hr><p>不想用工具的时候可以凑合使用, 更加推荐 you-get , YouTube-dl等更加好的工具 , 或者使用gui工具, 如Downie3</p><pre><code class="language-shell">ffmpeg -i &quot;http://video.qqdaiguaxitong.com:8091/9720180601/972018063017/650kb/hls/index.m3u8&quot; -c copy video1.mp4</code></pre><p>这种方法虽然能用 但是很耗时间</p><hr><p>文中所有代码如下</p><blockquote><p>Source: <a href="https://github.com/CoderTonyChan/shell-repo" target="_blank" rel="noopener">CoderTonyChan/shell-repo</a></p></blockquote><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p><p>Source: <a href="https://github.com/CoderTonyChan/shell-repo" target="_blank" rel="noopener">CoderTonyChan/shell-repo</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/11/06/FFmpeg/#disqus_thread</comments>
    </item>
    
    <item>
      <title>wireshark 入门教程</title>
      <link>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/</link>
      <guid>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/</guid>
      <pubDate>Wed, 05 Sep 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（快速分析网络包），和Wireshare。之前写过一篇介绍tcpdump抓包的入门文章，和tcpdump相比，
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（快速分析网络包），和Wireshare。之前写过一篇介绍tcpdump抓包的入门文章，和tcpdump相比，Wireshark提供丰富的GUI交互，而且能分析所有的网络协议，关键还是免费的，掌握好Wireshark就能应付绝大部分需要分析网络协议的场景了。</p></blockquote><h1 id="安装初识">安装初识</h1><hr><p>Wireshark提供Mac版本，可以从官网下载安装，到这篇博客为止最新版本应该是2.2.1。安装好之后打开的第一个界面如下：</p><img width="500" alt="6acb6917-0d00-4673-ac57-f6200a853865" src="https://user-images.githubusercontent.com/16996753/53470399-827c3c80-3a9c-11e9-8bb5-37f44cfbd35b.png"><p>Wireshark在第一个界面就把当前系统所包含的网卡列出来了，直接点击任何一项就可以开始监听通过该网卡的所有网络流量。<br>当我们把iPhone通过usb连接macbook时，Wireshark并不能直接监听通过iPhone的网络流量，需要通过一个系统程序在我们的Mac系统上，建立一个映射到iPhone的虚拟网卡，在terminal中输入如下命令即可：</p><img width="500" alt="10f399c5-1527-46eb-adcf-be4d4a8425f5" src="https://user-images.githubusercontent.com/16996753/53470411-8c9e3b00-3a9c-11e9-8180-1dc405b7fa17.png"><p>格式是rvictl -s [设备udid]，设备的udid可以通过itunes或者itools获取，执行命令之后Wireshark能立即识别新增加的rvi0网卡，也就是上图中高亮的部分，双击rvi0这一项，Wireshare即进入如下界面开始监听iPhone设备上的所有流量。</p><img width="500" alt="cd63d159-765f-437f-974f-19a17e3c05f6" src="https://user-images.githubusercontent.com/16996753/53470427-97f16680-3a9c-11e9-8ac6-49af3ac74981.png"><p>此时，启动iPhone上的任意App，只要有网络流量产生，对应的网络包都会在Wireshark上述的列表中展示出来。<br>Wireshark的流量监控界面主要分为四块，由上至下第一部分（标号为1）是工具栏，通过工具栏我们可以控制监控的行为，比如开始抓包，停止抓包，重新开始抓包，以及在包之间跳转等等。工具栏的底部有个输入框，可以让我们手动输入包的过滤条件，这部分对于熟练使用Wireshark抓包非常重要，后面会详细的讲解。<br>第二部分（标号为2）是历史流量包列表展示界面，这里展示的是从抓包开始，所有通过我们iPhone设备的流量。列表界面不同的包有不同的颜色，Wireshark通过颜色来区分包的类型，对于特定场景快速识别目标流量非常有用，后面也会专门讲解。<br>第三部分（标号为3）是单个包的详细信息展示面板，我们在第二部分选中的网络包在这一部分会将其结构以可阅读的文本形式展示出来，要正确阅读这一部分的信息需要对tcp/ip协议有一定的掌握。<br>第四部分（标号为4）是单个包的二进制流信息展示面板，这一部分展示的信息是包的原始数据，也是一个网络包所包含内容的真实展现，我们在第三部分多选中的协议头，都会在这一部分以同步高亮的形式标记出来。这一部分的展示是为了让我们对包的真实内容做直观的判断，能具体到单个byte。<br>初步认识上述四块主要面板之后，可以尝试开始分析网络包，在开始分析网络包之前，先要对网络包有个大致的概念。</p><h1 id="网络包结构">网络包结构</h1><hr><p>我们最初学习网络协议的时候，无论是OSI七层模型，还是经典的TCP/IP五层结构，都是以下图中的左边部分的形式展示的。</p><img width="500" alt="1b6e7c66-5253-48b7-9b98-291dd966219c" src="https://user-images.githubusercontent.com/16996753/53470437-9cb61a80-3a9c-11e9-85ee-d5645e7af178.png"><p>这是一种经典的分层架构，确实也符合网络协议设计上的思路，但却不能表达网络包真实的包含关系。上图右边部分是我所绘制的一个包结构示意图。在我看来，这种洋葱式的结构更符合网络包的真实形态。Application是最内层的payload，除了Application这一层之外，其他层都是用自己这一层的协议header+所包含那一层的payload。可以用如下公式表示：</p><p>TCP Layer = TCP Header + Application Payload</p><p>IP Layer = IP Header + TCP Payload</p><p>…</p><p>我们分析每个网络包的时候要能理解每一个包它所代表的抽象含义，再进一步将相关联的包串联起来，形成一次完整的网络会话。</p><h1 id="分析包结构">分析包结构</h1><hr><p>对于iOS程序员来说，我们绝大部分的流量分析都集中在HTTP或者基于TCP的socket长连接。从这一层面来说，和我们最贴近的三层是应用层(http)，传输层(tcp or udp)，网络层(ip)。<br>对于应用层来说主要是http协议的学习，对于http request和response格式的阅读，比如下图表示的一个http request包：</p><img width="500" alt="a2873532-9e47-4a03-ab95-45599923129b" src="https://user-images.githubusercontent.com/16996753/53470438-a049a180-3a9c-11e9-920f-c74bca0b946b.png"><p>Packet详情面板以符合http协议的表述，将header中各个field清晰的罗列出来了，阅读起来很方便。<br>传输层我们应用较多的是tcp，这一层的阅读主要是tcp header的学习：</p><img width="500" alt="d7069508-f4e1-4813-b31b-3d91f8636435" src="https://user-images.githubusercontent.com/16996753/53470444-a3dd2880-3a9c-11e9-9c5a-35f5f436b0b9.png"><p>典型的tcp header一般长度为20个字节，将这20个字节逐一学习一遍就可以分析大部分的tcp流量了。<br>网络层的分析主要是针对于IP Header，header结构如下：</p><img width="500" alt="eba25723-c341-44c3-a4fd-7c2730584cbc" src="https://user-images.githubusercontent.com/16996753/53470446-a6d81900-3a9c-11e9-93b1-0b2036865375.png"><p>这其中IP Header第十三个字节各个filed的理解，对于我们分析tcp流量的起始和结束尤其有用，典型的IPV4 Header也是20个字节，梳理一遍就可以分析IP包了。<br>所以对于包结构的分析关键在于三个知识点的学习：http header, tcp header, ip header，这么一看好像也没多少东西 ;)</p><h1 id="使用filter过滤包">使用Filter过滤包</h1><hr><p>使用Wireshark和使用Charles最大的区别在于，Charles只捕获HTTP流量，而Wireshark捕捉的是经过目标网卡所有的流量，流量包可以在几秒内膨胀到难以阅读的数量，所以此时我们需要使用Filter来做包的过滤，Filter规则定的越细，剔除掉的干扰信息就越多，分析起来就越快。</p><p>Wireshark的Filter分为两种，一种为Capture Filter，另一种是Display Filter。</p><p>Capture Filter出现在初始界面，在网卡列表的上方有个输入框，允许我们输入capture filter，一旦输入了特定的capture规则，Wireshark就只捕获符合该规则的流量包了。</p><img width="500" alt="ce1a622b-1312-46c8-a7c4-90f3cc9615da" src="https://user-images.githubusercontent.com/16996753/53470448-a9d30980-3a9c-11e9-9ea5-1b705fea4af2.png"><p>Display Filter出现在流量监控界面，在工具栏的下方有个输入框，允许我们输入display filter，display filter只是从界面上过滤掉不符合规则的包，Wireshark实际上还是监听了这些包，一旦去掉display filter，所有的包又会出现在同一界面。</p><img width="500" alt="33749cab-566e-47e0-8aed-9d516644f1ff" src="https://user-images.githubusercontent.com/16996753/53470454-ad669080-3a9c-11e9-8016-05bd1e5a5e97.png"><p>Capture Filter的规则和我们平常使用tcpdump的filter语法是一致的，比如为了只监控http的流量，我们可以先在初始化界面选中rvi0网卡，再在capture filter输入框里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获HTTP流量</span><br><span class="line">port 80 or port 443</span><br></pre></td></tr></table></figure><p>回车之后Wireshark就开始监控我们iPhone上所有的http和https流量了 ，非常简单，我们还可以使用其他的capture filter来捕获特定的流量，比如想分析DNS解析过程，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获DNS流量</span><br><span class="line">port 53</span><br></pre></td></tr></table></figure><p>比如只想捕获和特定服务器相关的流量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获和特定主机的流量</span><br><span class="line">host 171.10.191.10</span><br></pre></td></tr></table></figure><p>Display Filter的语法是由Wireshark自定义的，和Capture filter的语法不能混用。比如我们只想看某个主机的流量，可以使用如下Display Filter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr==171.10.191.10</span><br></pre></td></tr></table></figure><p>如果只看http或者https的流量，可以用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == 80 || tcp.port == 443</span><br></pre></td></tr></table></figure><p>更多的语法规则可以查看Wireshark官方文档，Wireshark实际上提供了便捷的UI操作帮助我们来书写Display Filter，在Display Filter输入框的最右边有个Expression按钮，点击之后可以弹出如下界面：</p><img width="500" alt="4af664f7-0694-43c9-807e-1d3f2eb54a11" src="https://user-images.githubusercontent.com/16996753/53470458-b22b4480-3a9c-11e9-81b5-3dd647ea3b39.png"><p>Display Filter的语法本质上是个等是关系描述，我们可以在search当中输入我们感兴趣的协议比如http，再在展开的协议头里选择我们的条件比如http.host，最后设置Relation和Value就可以生成一个Display Filter条件了。</p><h1 id="包颜色规则">包颜色规则</h1><hr><p>Wireshark在大多数时候捕获的包数量都远超我们感兴趣的数量，而且各个连接的包都混杂在一起，为了方便我们识别不同的连接会话，Wireshark默认使用一种着色规则帮助我们来进行包类型区分。</p><p>具体的规则可以通过菜单View-&gt;Coloring Rules…查看，默认规则如下：</p><img width="500" alt="4d3b2980-dfd4-4a1a-9b8b-99dfc1cd8eb1" src="https://user-images.githubusercontent.com/16996753/53470468-b5becb80-3a9c-11e9-9338-4ec6fc8f4bdc.png"><p>这里有个小技巧，如上图所示，我只将我感兴趣的协议包上了色，集中在http，tcp，udp包，这样分析起来更加直观。比如根据上图的规则，tcp三次握手中的Sync包是使用灰色标记的，这样我就可以在下图的包中迅速定位一次tcp连接的开始包位置：</p><img width="500" alt="236e7e35-ab3d-4be1-a911-8844e5187b78" src="https://user-images.githubusercontent.com/16996753/53470472-b8b9bc00-3a9c-11e9-9439-c652a28ac418.png"><p>当然，包的颜色也可以按照自己的视觉习惯进行定制，我个人习惯把Sync包和FIN包设置一个高亮的颜色，方便判断一次HTTP会话的起始和结束。</p><h1 id="流量跟踪">流量跟踪</h1><hr><p>Wireshark默认情况下将不同网络连接的流量都混在一起展示，即使给不同协议的包上色之后，要单独查看某个特定连接的流量依然不怎么方便，我们可以通过Wireshark提供的两种方式来实现这个目标。</p><p>方式一：Follow Stream</p><p>当我们选中某个包之后，右键弹出的菜单里，有个选项允许我们将当前包所属于的完整流量单独列出来，如下图：</p><img width="500" alt="4f0320fb-6bb0-4161-b5f1-8e5789775a6d" src="https://user-images.githubusercontent.com/16996753/53470484-bc4d4300-3a9c-11e9-9a94-80b77723b876.png"><p>Wireshark支持我们常见的四种Stream，TCP，UDP，HTTP，SSL。比如我们选中Follow TCP Stream之后可以得到如下的详细分析输出（样本为监控iPhone手机的流量）：</p><img width="500" alt="44c54654-9f31-4b9e-9db9-8ba21995eef0" src="https://user-images.githubusercontent.com/16996753/53470489-bfe0ca00-3a9c-11e9-82e4-9cec23966158.png"><p>上图中将iPhone和Server之间某次的连接流量完整的呈现出来，包括iPhone发送了多少个包，Server回了多少个包，以及iPhone上行和下行的流量，还提供流量编解码选择，文本搜索功能等。</p><p>方式二：Flow Graph</p><p>Flow Graph可以通过菜单Statistics-&gt;Flow Graph来生成，这样我们可以得到另一种形式的流量呈现：</p><img width="500" alt="fc19eb0d-15fd-42f5-a729-e22c02c22ced" src="https://user-images.githubusercontent.com/16996753/53470491-c2dbba80-3a9c-11e9-911a-f6de53eb1ad2.png"><p>和Follow Stream不同的是我们获取到的是完整的流量，从上图中可以看出从10.136.66.127(我的iPhone手机IP地址)发出的流向多个服务器的网络流量，包括DNS解析和SSL安全握手等。当然我们也可以在上图中下方的操作区域做进一步的过滤，可以使用Display Filter做进一步的流量定位。</p><p>Follow Stream更适合分析针对某一个服务器地址的流量，而Flow Graph更适合分析某个App的整体网络行为，包含从DNS解析开始到和多个服务器交互等。</p><p>其实Statistics菜单下还有更多的图表分析模式，可以根据不同的分析目标来选择，比如Statistics-&gt;HTTP-&gt;Requests可以得到如下按主机分门别类的HTTP请求分析图，和收费的Charles的展示结果类似。</p><img width="500" alt="8bcde133-c012-4262-a785-8a822b7aebc7" src="https://user-images.githubusercontent.com/16996753/53470496-c5d6ab00-3a9c-11e9-9e14-fa60eb62d214.png"><h1 id="https包分析">HTTPS包分析</h1><hr><p>介绍完使用方式再来实际分析下HTTPS的流量。下图是我使用Wireshark在iPhone上抓包知乎App网络请求的结果：</p><img width="500" alt="4af664f7-0694-43c9-807e-1d3f2eb54a11" src="https://user-images.githubusercontent.com/16996753/53470501-c8d19b80-3a9c-11e9-9d83-28b146f1f0c4.png"><p>当我使用Follow TCP Stream之后，一次完整的HTTPS会话流量就被单独过滤出来了，第一步先分析包列表界面。<br>通过高亮颜色找到会话的其实Sync包，继而可以快速的定位到HTTP建立连接之初的tcp三次握手所产生的三个包：</p><p>Sync： iPhone发送Sync。</p><p>Sync+Ack： Server发送Sync+Ack。</p><p>Ack： iPhone Ack。</p><p>三次握手之后是ssl handshake，ssl handshake分为以下几步：</p><p>Client Hello</p><p>这一个包是ssl握手的起始包，客户端（我的iPhone）会携带当前会话所依赖的一些关键信息：使用的tls版本（当前为tls1.2），上次的Session ID（如果可以session重用，就可以避免当前这次的安全握手），客户端所支持的加密算法套件（从下图中可以看出可以从22个suites里面挑选）等。</p><img width="500" alt="9d04e8e8-9b84-4983-a203-3ca05cf9188d" src="https://user-images.githubusercontent.com/16996753/53470507-cbcc8c00-3a9c-11e9-9954-4fd365174e69.png"><p>Server Hello</p><p>Server Hello这个包带上服务器这一端的一些信息，比如Server所选择的tls版本，或者带上可以重用的Session ID避免重新握手，在Client传过来的Cipher Suites当中挑选一个Cipher Suite进行后续的安全通话等。</p><img width="500" alt="88434006-295c-4a12-814b-45f102b8ea3a" src="https://user-images.githubusercontent.com/16996753/53470514-ce2ee600-3a9c-11e9-82a7-eebe4a717f4f.png"><p>Server 下发Certificate</p><p>Server同时会下发自己的Certificate，如下图所示：</p><img width="500" alt="1113cc9c-bd09-4a2d-987c-d7f63df3ea4c" src="https://user-images.githubusercontent.com/16996753/53470519-d129d680-3a9c-11e9-9e56-6589ce9b43f9.png"><p>从包列表界面可以看出，Certificate（大小为2407个bytes）这个包由于超过了1440个字节，被拆成了2个包，所以我们可以在包Info里面看到[TCP segment of a reassembled PDU]，我们使用Wireshark抓包的时候经常会看到reassembled PDU，出现这种情况是因为包太大，超过了MSS，需要拆成两个来发送。<br>接下来几个包是Client和Server基于上面交换的信息协商最后使用的密钥。</p><p>Server Key Exchange</p><p>Client Key Exchange</p><p>Change Cipher Spec</p><p>…</p><p>Send Application Data</p><p>各个包里面所包含的详细内容分析涉及到非对称加密算法的相关知识，这里就不展开了，使用Wireshark可以将整个HTTPS的握手过程非常清晰的展现出来，感兴趣的同学可以阅读这篇文章。<br>当然大部分时候我们需要分析iPhone上HTTPS流量里的具体包内容，Wireshark虽然支持配置RSA私钥，但我们没办法直接获取iPhone设备上各个App所使用的私钥，这种场景下我们一般使用MITM（Man In The Middle）中间人攻击来破解HTTPS包内容，收费工具Charles可以通过代理的方式来实现此功能，免费版抓包工具mitmproxy同样也可以，Charles的使用教程比较多了，后续我们会再写一篇mitmproxy的教程介绍如何使用破解调试HTTPS的流量。<br>结束语</p><p>Wireshark就介绍到这里，现在在iPhone上抓包的方式有很多，有面向所有协议的tcpdump和Wireshark，也有针对HTTP的Charles和mitmproxy，无论使用哪个工具，前提都是我们需要对网络协议有全面的认识，所以在学习使用这些工具的同时，要持续深入的学习网络协议知识。</p><h1 id="抓包例子">抓包例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rvictl -s c85646a786f30eaea5732c806c586f3ed7fae11c</span><br><span class="line">// capture filter</span><br><span class="line">host==59.36.6.53 ||  host==192.168.3.65</span><br><span class="line">// Filter  </span><br><span class="line">ip.addr==59.36.6.53 ||  ip.addr==192.168.3.65</span><br></pre></td></tr></table></figure><h2 id="抓websocket">抓websocket</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471087-8d37d100-3a9e-11e9-8fdb-1a0721f49331.png" alt="wireshark1"></p><h2 id="字节解析器">字节解析器</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471105-9c1e8380-3a9e-11e9-9492-e2a07a796a3d.png" alt="056b5218-f16f-453b-bba8-1b7abdabd7ca"></p><h2 id="完整的https请求">完整的HTTPS请求</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471113-9f197400-3a9e-11e9-9563-0d6cff8695dd.png" alt="6c6f2aba-dc2c-4d1c-886b-eac90941ee1f"></p><h2 id="证书超过1400-做了分包">证书超过1400 做了分包</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471119-a2acfb00-3a9e-11e9-99a1-23438dd9ad8a.png" alt="86e8c06f-4b19-4ee7-a1d2-b02c26e969ce"></p><h1 id="流量跟踪功能测试">流量跟踪功能测试</h1><hr><h2 id="追踪-http流">追踪 HTTP流</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471123-a6408200-3a9e-11e9-9936-ba3f5ee05cfe.png" alt="shark2"></p><h2 id="追踪tcp为http服务的">追踪TCP（为HTTP服务的）</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471128-a9d40900-3a9e-11e9-90b0-dfca3ff79f61.png" alt="tcp"></p><h2 id="追踪ssl-和-tcp一样">追踪SSL （和 TCP一样）</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471131-accef980-3a9e-11e9-8159-2322ac3e67a4.png" alt="09e86bc8-a1ac-49f3-9701-79c6f7d1463c"></p><h2 id="追踪websocket-连接">追踪WebSocket 连接</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471135-b0628080-3a9e-11e9-8857-08576b8ac399.png" alt="00575db6-982e-4f40-9e10-23ac6dc7f6b0"></p><h2 id="websocket的开始和结束">Websocket的开始和结束</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471136-b3f60780-3a9e-11e9-86e9-68f917072b5b.png" alt="websocket"></p><h1 id="wireshark常用过滤规则">wireshark常用过滤规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// GET包</span><br><span class="line">http.request.method == “GET” &amp;&amp; http contains “Host: “</span><br><span class="line"></span><br><span class="line">tcp.len &gt;= 7   指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><span class="line">ip.src eq 10.175.168.182</span><br></pre></td></tr></table></figure><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Filza Summary</title>
      <link>https://blog.tonystudio.ml/2018/08/08/ios-Filza/</link>
      <guid>https://blog.tonystudio.ml/2018/08/08/ios-Filza/</guid>
      <pubDate>Wed, 08 Aug 2018 02:18:22 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Filza File Manager 是iOS 系统的一款多功能文件管理器，需要越狱后安装，功能强大，使用简单，可以查看所有文件，是一款真正意义上的iOS 文件管理器，兼容iOS 7~iOS 11 系统，适用于iPhone、iPad、iPod To
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Filza File Manager 是iOS 系统的一款多功能文件管理器，需要越狱后安装，功能强大，使用简单，可以查看所有文件，是一款真正意义上的iOS 文件管理器，兼容iOS 7~iOS 11 系统，适用于iPhone、iPad、iPod Touch。</p></blockquote><hr><h1 id="filza-file-manager简介">Filza File Manager简介</h1><p>Filza File Manager 主要特点：</p><ul><li><p>系统文件管理，读取和修改</p></li><li><p>支持多格式文件查看</p></li><li><p>方便的查看应用目录</p></li><li><p>收藏路径，随时直达</p></li><li><p>文件压缩和解压</p></li><li><p>安装/查看ipa 程序</p></li><li><p>安装/查看deb 插件</p></li><li><p>文件导出和WiFi 传输</p></li></ul><h1 id="插件安装">插件安装</h1><p>Filza 免费即可下载，大家可以到官方源下载最新版本体验，目前已经适配iOS 11 系统。如果你是64位系统，请下载Filza File Manager 64-bit 版本。</p><p>名称：Filza File Manager</p><p>作者：TIGI Software</p><p>大小：21012kB</p><p>版本：3.5.2-4</p><p>价格：完整版$5.99</p><p>语言：英语</p><p>兼容：iOS 7~iOS 11</p><p>官方源：<a href="http://tigisoftware.com/cydia/" target="_blank" rel="noopener">http://tigisoftware.com/cydia/</a></p><p>首次安装Filza File Manager ，需要安装多个依赖。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608689-c25b3500-3bfe-11e9-9821-42a01e2d0768.png" alt="image"></p><h1 id="功能介绍">功能介绍</h1><p>Filza 功能非常丰富，下面小编给大家简单介绍一下。</p><h2 id="文件查看和管理">文件查看和管理</h2><p>Filza 主打文件管理功能，可以读取手机内的所有文件，包含系统目录，Filza 支持多种格式的文件查看。<br><img src="https://user-images.githubusercontent.com/16996753/53608715-d69f3200-3bfe-11e9-9c3d-882474c2959e.png" alt="image"></p><p>你可以预览、查看、移动、修改、删除或者分享文件，给你电脑般的体验。解压和压缩文件也变得非常简单。<br><img src="https://user-images.githubusercontent.com/16996753/53608718-d99a2280-3bfe-11e9-8c08-dcea4b5bb5d7.png" alt="image"></p><p>移动文件，非常方便。编辑状态选择文件后，点击移动，会弹出提示。<br><img src="https://user-images.githubusercontent.com/16996753/53608724-ddc64000-3bfe-11e9-9b88-24781c4bd422.png" alt="image"></p><p>只需在你想移动到的文件夹点击一下粘贴按钮，文件就移动完成了。<br><img src="https://user-images.githubusercontent.com/16996753/53608728-e0289a00-3bfe-11e9-8983-a04478c7ba15.png" alt="image"></p><p>通过一些文件的修改或者替换，你可以实现很多内容，例如替换字体，替换提示铃声等等。</p><p>如下图所示为导入的铃声，可以预览或者删除。路径：</p><p>/private/var/mobile/Media/iTunes_Control/Ringtones<br><img src="https://user-images.githubusercontent.com/16996753/53608734-e4ed4e00-3bfe-11e9-8767-a0ec844c056e.png" alt="image"></p><p>搜索功能，可以帮你快速找到想要的文件，并定位到路径。点击搜索结果右上角的箭头，可以快速打开文件所在的位置。可以在根目录或者当前文件夹搜索。<br><img src="https://user-images.githubusercontent.com/16996753/53608740-e880d500-3bfe-11e9-90de-fbeb1a0dab7c.png" alt="image"></p><p>显示路径，当你打开一个文件夹，点击一下标题栏。<br><img src="https://user-images.githubusercontent.com/16996753/53608746-eb7bc580-3bfe-11e9-84d5-7dbc4260197f.png" alt="image"></p><p>就会当前文件夹显示路径，可以复制。</p><p>标签管理，点击底部的标签按钮，可以打开多页面，就像Safari 浏览器一样的多页面方式的管理，方便文件整理。<br><img src="https://user-images.githubusercontent.com/16996753/53608753-efa7e300-3bfe-11e9-9983-93155b5cf210.png" alt="image"></p><p>在多页面切换界面，底部按钮可以快速直达App 管理器，和音乐库管理器。</p><h1 id="善用收藏夹">善用收藏夹</h1><p>打开收藏夹，你可以快速到达特定的路径。点击右上角“+”号，你可以将当前的路径，添加到收藏夹，方便快速打开。</p><p>Filza 内置了一些收藏夹内容，例如App 管理器。<br><img src="https://user-images.githubusercontent.com/16996753/53608761-f8001e00-3bfe-11e9-8c94-ef257e8dad1c.png" alt="image"></p><p>App 管理器可以快速打开App 主目录，你可以打开每个App 的文件，查看详细内容，非常方便。<br><img src="https://user-images.githubusercontent.com/16996753/53608763-f9c9e180-3bfe-11e9-9a26-ff64c76e3296.png" alt="image"></p><p>Filza 内置回收站功能，你删除的文件可以在回收站内查看，以免误删文件。</p><h1 id="安装ipa-程序">安装IPA 程序</h1><p>Filza 内置ipa 安装和查看功能，使用Filza ，可以很方便的安装ipa 文件。</p><p>例如我们QQ中的ipa 文件，选择使用其他应用打开，拷贝到Filza。<br><img src="https://user-images.githubusercontent.com/16996753/53608766-ffbfc280-3bfe-11e9-99ed-b14dbd5e8305.png" alt="image"></p><p>在Filza 中打开ipa 文件，点击右上角的安装，即可快速安装。稍等片刻，返回桌面就会看到应用已经安装了。<br><img src="https://user-images.githubusercontent.com/16996753/53608768-03ebe000-3bff-11e9-9be1-eac0cc26c2d7.png" alt="image"></p><p>你也可以解压ipa 安装包，查看详细内容。例如查看info.plist 文件。<br><img src="https://user-images.githubusercontent.com/16996753/53608776-0817fd80-3bff-11e9-8ea0-09b3d2a3364e.png" alt="image"></p><p>在info.plist 文件可以轻松的找到应用的URL Schemes。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608779-0bab8480-3bff-11e9-924f-7dce642915cb.png" alt="image"></p><h1 id="安装deb-文件">安装DEB 文件</h1><p>Filza 也支持deb 格式文件查看和安装，我们可以很方便的安装deb 插件。</p><p>例如一些没有上传到源的deb 包，例如在Cyida 无法打开的特殊情况，我们使用Filza 来安装修补插件，可以解决很多问题。</p><p>首先需要将deb 包拷贝到Filza ，然后点击打开，点击右上角的安装。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608788-12d29280-3bff-11e9-8297-4b68e1c47699.png" alt="image"></p><p>你会看到安装进度和显示。安装完毕，如果插件是需要注销才能生效的类型，请点击右上角的注销，注销设备。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608792-16661980-3bff-11e9-8745-dae8df20bfdb.png" alt="image"></p><p>打开Cydia ，在已安装→最近里面，可以看到刚刚安装的插件。值得注意的是，插件需要在Cydia 中才能卸载。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608795-1a923700-3bff-11e9-834b-7331e31f3860.png" alt="image"></p><h1 id="文件导出和wifi-传输">文件导出和WiFi 传输</h1><p>Filza 拥有方便的文件导出功能，你可以将文件以邮件发送，或者使用其他App打开进行导出。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608799-1e25be00-3bff-11e9-96a6-665c9339f1d1.png" alt="image"></p><p>Filza 支持Web 服务，进入设置，启动WebDAV 服务。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608803-2120ae80-3bff-11e9-9cb9-e45c2632a19b.png" alt="image"></p><p>在同一网络的情况下，在电脑浏览器上输入地址，可以打开文件进行共享，实现在电脑上查看手机所有文件。<br><img src="https://user-images.githubusercontent.com/16996753/53608807-241b9f00-3bff-11e9-9c5f-1a4341cb7095.png" alt="image"></p><p>你可以直接下载 /重命名 / 删除文件。在没有数据线的情况下，导出文件也变得非常简单。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608810-28e05300-3bff-11e9-91e7-f852ccde9a10.png" alt="image"></p><h1 id="丰富的设置">丰富的设置</h1><p>Filza 的设置非常丰富，你可以根据自身情况进行自定义。<br><img src="https://user-images.githubusercontent.com/16996753/53608815-2e3d9d80-3bff-11e9-96fe-c32c092fd980.png" alt="image"></p><p>例如文件显示，文件关联，或者文件查看器。<br><img src="https://user-images.githubusercontent.com/16996753/53608817-30076100-3bff-11e9-9a62-3eea81f34b99.png" alt="image"></p><p>你也可以对文件夹进行进行属性修改。在编辑状态选中文件夹，更多→属性，就可以修改了。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608823-33025180-3bff-11e9-876c-d0ae55a13be8.png" alt="image"></p><h1 id="使用小结">使用小结</h1><p>iOS 系统没有文件管理器，也无法查看系统文件。越狱后，我们安装Filza File Manager，可以实现电脑版的文件管理功能。</p><p>Filza 可以说是非常强大：</p><ul><li><p>方便的文件管理系统</p></li><li><p>多格式文件查看或编辑</p></li><li><p>内置ipa /deb 安装器，可以轻松查看和安装ipa /deb 文件</p></li><li><p>便捷的文件移动/复制方式</p></li><li><p>支持搜索功能，快速找到想要的文件</p></li><li><p>App管理器，快速找到App 文件目录</p></li><li><p>支持Web 服务，方便的文件导入和导出</p></li></ul><p>有了Filza ，可以突破系统限制，轻松的完成很多事情。当然，对于系统文件，如果你不是那么熟悉，建议不要轻易删除或者修改，以免出错。</p><p>篇幅有限，文章仅仅介绍了Filza 的部分功能，更多使用技巧欢迎留言分享。</p><p>越狱后，有些插件是必须安装的，Filza 就是必备工具之一。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/08/08/ios-Filza/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flex Summary</title>
      <link>https://blog.tonystudio.ml/2018/08/06/ios-flex/</link>
      <guid>https://blog.tonystudio.ml/2018/08/06/ios-flex/</guid>
      <pubDate>Sun, 05 Aug 2018 16:15:22 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Flex 3 是iOS 系统的一款修改工具，需要越狱后安装。Flex 3 功能强大，使用简单，可以让用户修改iOS 系统功能，实现系统功能自定义；修改App 应用程序，或者去除广告，或者增强App 体验等，兼容iOS 11 系统。&lt;/p&gt;
&lt;/bl
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Flex 3 是iOS 系统的一款修改工具，需要越狱后安装。Flex 3 功能强大，使用简单，可以让用户修改iOS 系统功能，实现系统功能自定义；修改App 应用程序，或者去除广告，或者增强App 体验等，兼容iOS 11 系统。</p></blockquote><hr><h1 id="flex-3介绍">Flex 3介绍</h1><p>Flex 3 主要特点：</p><ul><li>修改系统功能</li><li>修改应用程序</li><li>云端补丁库，免费下载使用</li></ul><h1 id="功能介绍">功能介绍</h1><hr><h2 id="脚本使用">脚本使用</h2><hr><p>Flex 3 通过添加补丁来工作。打开Flex 3 ，有三个分类：</p><p>我的补丁：存放所有已添加补丁</p><p>云端补丁：云端补丁库</p><p>仪表盘：插件信息，个人账户等<br><img src="https://user-images.githubusercontent.com/16996753/53608155-a787c100-3bfc-11e9-9ac0-885b90207d25.png" alt="image"></p><p>首页是我的补丁列表，这里存放的是你已经下载的所有补丁。可以自行选择开启或者关闭补丁，以颜色深浅区分。顶部点击编辑，可以对补丁进行排序。点击“+”号可以新建补丁。App 补丁会显示相应App 图标，需要该应用已经安装。系统补丁则显示默认手机图标。向左滑动，可以点击删除补丁。</p><p>点击底部云按钮，进入云端补丁，有四个分类：</p><p>Installed：本机已经安装的应用程序，点击即可查看相关补丁</p><p>Recent：最近上传到云端的补丁</p><p>Trending：流行的补丁</p><p>Popular：热门补丁</p><p>Search：搜索补丁</p><p><img src="https://user-images.githubusercontent.com/16996753/53608163-b2425600-3bfc-11e9-8cf0-c6990f3400b7.png" alt="image"></p><p>例如墨迹天气，点击即可查看App相关补丁，你可以查看补丁详细信息，也可以立即获取。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608168-b66e7380-3bfc-11e9-9ca6-6d4fbe06f32d.png" alt="image"></p><p>补丁详细介绍页面标注了补丁的作者，描述（Description）补丁的用处，补丁适配App的版本，以及更新日期，补丁使用者的评论（comments），以及版本信息。如果补丁适合，点击GET即可下载。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608179-bcfceb00-3bfc-11e9-93fc-c5fe9684a4a9.png" alt="image"></p><p>你下载的补丁会出现在“我的补丁”里面，打开开关，补丁就生效了。可以实现补丁介绍的效果，如图所示的墨迹天气优化补丁，当你打开应用你会发现顿时清爽了。你也可以查看或者编辑补丁。</p><p>App补丁无需注销，立即生效<br><img src="https://user-images.githubusercontent.com/16996753/53608186-c25a3580-3bfc-11e9-906c-d9e82a397a65.png" alt="image"></p><p>系统相关的补丁，当你打开或者关闭的时候，需要注销才能生效。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608189-c5552600-3bfc-11e9-808d-66d691441cd8.png" alt="image"></p><p>系统补丁开启/关闭需要注销生效</p><p>你可以在云端寻找适合自己的补丁，搜索能快速寻找你需要的补丁。国内anton_j 、5iFlex、iBreak 等作者制作的补丁相当出色，介绍也非常详细。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608194-c9814380-3bfc-11e9-94cb-bc7c8328caf8.png" alt="image"></p><p>在云端补丁的Installed分类，你可以找到SpringBoard（桌面）和System Wide （全系统）相关的补丁。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608197-cc7c3400-3bfc-11e9-846d-ea5cbb1bc8f5.png" alt="image"></p><p>这里的补丁可以修改系统功能，如下图所示。值得注意的是，使用系统相关补丁前，请仔细查看补丁说明以及兼容性，看一下评论。一些不兼容的补丁，可能会引起问题。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608201-cf772480-3bfc-11e9-9df1-d7f034dbae02.png" alt="image"></p><p>通过云端补丁库，即使你不会制作补丁，下载安装大神们已经制作好的补丁，也能享受Flex 3 的功能。</p><p>值得注意的是：</p><p>下载补丁前请自行阅读说明</p><p>App 补丁请仔细检查已安装版本是否匹配补丁要求，版本不一致会造成补丁无效</p><p>系统补丁请仔细核对是否兼容当前手机系统，以免出现问题</p><p>在仪表盘界面，你可查看Flex 3 的更新日志，登录账号，购买升级等等。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608225-d736c900-3bfc-11e9-83d9-5a8d53734c87.png" alt="image"></p><p>已经下载的Flex 3补丁，会以patches.plist 合集的方式存在，你可以将补丁合集plist 文件导出备份，以免补丁丢失。</p><p>Flex 3 补丁路径</p><p>/var/mobile/Library/Application Support/Flex3</p><h1 id="配合app-admin-使用">配合App Admin 使用</h1><p>有了Flex 3，可以实现一些App 去除广告、获得额外功能。</p><p>但是有时候，已安装的App 版本和补丁要求不一致，我们可以使用App 降级插件，在App Store 降级应用，使用旧版，这样就能适合补丁使用。</p><p>名称：App Admin</p><p>作者：UnlimApps inc</p><p>大小：822kB</p><p>版本：目前1.0r-101</p><p>价格：免费</p><p>语言：英语</p><p>兼容：iOS 11</p><p>插件源：<a href="http://btea.unlimapps.com/" target="_blank" rel="noopener">http://btea.unlimapps.com/</a></p><p>App Admin 目前在测试中，兼容iOS 11 系统，主要作用：</p><p>App Store 安装任意版本软件</p><p>查看软件旧版本ID 号</p><p>App Admin 使用非常简单，安装后，打开App Store 即可使用。例如你已经下载过的软件，会显示云朵符号，点击云朵，弹出菜单。其中：</p><p>Continue：直接下载最新版本</p><p>Downgrade：降级软件版本<br><img src="https://user-images.githubusercontent.com/16996753/53608233-def66d80-3bfc-11e9-9c94-55a9ba3fed2f.png" alt="image"></p><p>我们选择Downgrade，就会弹出该软件的版本号列表，这里有尚在提供的所有旧版。</p><p>选择你需要安装的任意版本，点击即可下载。等待片刻，旧版软件就安装到手机了，非常简单轻松。<br><img src="https://user-images.githubusercontent.com/16996753/53608237-e1f15e00-3bfc-11e9-9ad3-664e8ff0e1a5.png" alt="image"></p><p>App Admin 支持屏蔽应用更新，长按更新按钮弹出菜单，选择“Block All Updates”，应用将不会出现在更新列表。在更新列表，点击左上角的齿轮标志，进入App Admin 设置界面。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608263-f897b500-3bfc-11e9-90bc-cd205df73193.png" alt="image"></p><p>App Admin 设置界面可以管理屏蔽更新的应用，或者一些开关的控制。已经屏蔽更新的应用，可以在管理列表内删除。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608268-fcc3d280-3bfc-11e9-8b81-31781daa1d9d.png" alt="image"></p><h1 id="一些补丁示例">一些补丁示例</h1><p>说了这么多，Flex 3 有什么强大之处呢？为什么要安装Flex 3 呢？下面介绍一些实用的补丁，或许是你安装Flex 3 的吸引力。</p><h2 id="去广告补丁">去广告补丁</h2><p>Flex 3 通过修改App实现去除App 广告，例如一些广告比较凶猛的观影工具，使用Flex 3 可以轻松解决，给你一个清爽的体验。<br><img src="https://user-images.githubusercontent.com/16996753/53608292-19f8a100-3bfd-11e9-91c7-b25e3e8bd43a.png" alt="image"></p><p>使用小结</p><p>Flex 3 是一款功能强大的iOS 修改器，通过自行修改变量、参数及函数等等，可以实现很多功能，例如去除广告，增强App体验，带来更多功能等。如果你会编写补丁，可以自行修改。即使你不会编写，你也可以从云端下载补丁，享受Flex 3 带来的乐趣。</p><p>有时候，无需安装插件，一个小小的补丁就可以搞定，方便简单。</p><p>注意事项：</p><p>下载补丁前请仔细阅读说明，观看使用评论</p><p>一些历史悠久的补丁一般都会失效</p><p>Installed 列表并不保证显示所有已经安装的应用，部分应用会无显示</p><p>使用App 补丁前请仔细检查已安装版本是否匹配补丁要求，版本不一致会造成补丁无效</p><p>系统补丁请仔细核对是否兼容当前手机系统，以免出现问题</p><p>在云端补丁库，部分应用或许没有任何补丁</p><p>云端补丁可能会因为部分原因下架，例如一些破解补丁，如果遇到好的补丁，请及时下载</p><p>篇幅有限，文章仅仅简单的介绍了Flex 3的部分功能，希望对新手朋友有帮助吧，更多使用技巧欢迎留言分享。</p><p>越狱后，有些插件是必须安装的，Flex 3  会是您的必备工具之一吗？</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/08/06/ios-flex/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
