<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tony&#39;s Studio</title>
    <link>https://blog.tonystudio.ml/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Tony写字的地方</description>
    <pubDate>Mon, 22 Apr 2019 01:47:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>996</title>
      <link>https://blog.tonystudio.ml/2019/04/22/996/</link>
      <guid>https://blog.tonystudio.ml/2019/04/22/996/</guid>
      <pubDate>Mon, 22 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;From &lt;a href=&quot;https://www.v2ex.com/t/557056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;996.ICU 一番热度过去，留下了什么&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;jzer0n&quot;&gt;Jzer0n&lt;/h1&gt;
&lt;hr&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>From <a href="https://www.v2ex.com/t/557056" target="_blank" rel="noopener">996.ICU 一番热度过去，留下了什么</a></p><h1 id="jzer0n">Jzer0n</h1><hr><blockquote><p>这事情没完，看看各方的得失分：</p><ol><li>先锋队输了。在这些所谓企业创始人出来为 996 站台又没得到法律的处罚开始，它就输了，而在可见的将来，它没有翻盘的可能。它制定的法律，成了一纸空文，在可见不可见的将来，更多千奇百怪的事情都会出现了，等着看。</li></ol><p>2.资本家当前似乎赢了，但长远来看是输了。当前这一代人，或者因为收到房贷等负担迫不得已妥协了这个 996，但种子已经种下，这一代人肯定会慢慢退出更竞争的行业的，到了接下来的一代，资本家会发现自己埋下的苦果自己啃。对于马云刘强东之流，送上一个字“呸”。迟早会清算。</p><p>3.劳动者当前似乎输了，但未来可期。中国畸形的房地产和楼价，摧毁了至少一代人甚至是三代人的钱包，他们不得已只好更辛苦的负重前行，这波 996，先锋队站在资本家的一面，抛弃了底层无数的劳动者，资本家露出了他们原本的丑陋嘴脸，我们或者当前没有胜利，但我们的后辈心里的种子已经生根发芽。</p><p>等着吧，一代新人胜旧人，我们未竟的事，下一代会越来越更多人继续下去。</p><p>另外，先锋队和资本家成了一家人，真是完全颠覆了马克思，“马克思老人家，你不要来中国了，你的徒子徒孙已经抛弃你了。”</p></blockquote><h1 id="starqoq">starqoq</h1><hr><blockquote><p>鲁迅先生的作品《聪明人和傻子和奴才》</p></blockquote><h1 id="mingyun">mingyun</h1><hr><blockquote><p>关于 996 大讨论的微博总结</p><p>资本家的话一个字都不要信。我每天只睡四个小时，我每天工作 16 个小时等等，诸如此类，你要是信了，你觉得鸡汤的味道不错，开始努力工作憧憬未来，那么恭喜，一个崭新的韭菜苗子就破土而出了。</p><p>驴再努力的拉磨，把磨盘拉碎了，并没什么卵用。你越努力工作，所承担的压力和责任就越大，你不一定得到相应的回报。</p><p>给多少钱干多少活，这就是职业道德。干的活比给的钱多，那就是不道德，那就是在助纣为虐，活该被剥削。</p><p>资本家努力的工作和普通人努力工作能一样吗？人家在私人飞机上思考全球投资，大白腿给端茶倒水，你特么在黑压压的大开间 996 加班写代码；资本家吹空调喝 XO 看财报简讯，你在挤地铁公交大太阳下给人装 APP 完成 KPI ；资本家赔政要吃饭跳舞，你在家里一面抱着孩子一面线上解 BUG。资本家 16 个小时工作是吃喝玩乐，你 16 个小时是工地搬砖。资本家酒会舞会高尔夫保龄球来去自由，你在公司那个钢筋水泥的透明监狱指纹考勤。</p><p>资本家财富积累都是通过剩余价值的剥削，资本家考虑怎么剥削你，你考虑怎么更多贡献剩余价值？</p><p>上班摸鱼还能节节高升那才是本事，啥也不干资本家还的笑脸相迎高薪聘请，反向割资本家韭菜，这才是你应该思考的东西。</p><p>资本家公开发言劝你努力，就当他们用嘴放屁，止增笑耳。</p><p>不是说既然资本家剥削我，我就彻底混了，自暴自弃，也不加班也不努力。</p><p>这是不对的，这也正式中了资本家的逻辑陷阱。个人努力提升不等于 996 给资本家拉磨，不给资本家搬砖也不代表自我放纵自暴自弃。</p><p>看看人家刘慈欣是怎么做的？上班摸鱼摸出了雨果奖，这才是打工者的一条明路。</p><p>公司分配给你的工作都是没啥价值的重复性工作，或许对新人有点提升，一旦熟悉以后就对个人来说没半点意义。这种垃圾工作干一天算一天钱，谁他妈也不欠谁。你来逼我 996，我就问候你家人，有来有往，礼尚往来。</p><p>有价值，有提升，有技术含量的工作多做点不亏，技术练好了，不给加钱就炒老板鱿鱼。反过来重复性的垃圾任务，打钱就干，不打钱，滚！</p><p>投资自己的事业，多苦多累都可以，为别人做嫁衣，多做一分都嫌弃。</p><p>你年青有为，用青春和健康为别人成就霸业，最后仅得了一个养家糊口的薪水而已；当你人到中年，上有老下有小，一个裁员就让你滚蛋，你家里老人看病小孩待哺，你跟谁哭去？</p><p>什么企业文化，什么都是兄弟，全 TMD 放屁，在利益面前都是贪婪的魔鬼。别尼玛假惺惺的来的劝我努力，害不害臊。</p><p>别特么给我谈理想，谈未来，谈努力，谈回报，爷心里明镜似的，识破了你们这帮贪婪资本家的吸血本质，我就有了未来，我就能努力了，我的回报应该奖励我自己，而不是被你剥削宰割，反过来还喷我不努力！</p><p>from <a href="https://weibo.com/1687243315/Hpz3SgDdf" target="_blank" rel="noopener">https://weibo.com/1687243315/Hpz3SgDdf</a></p></blockquote><hr><p>Reference：</p><blockquote><p>少数派：<a href="https://sspai.com/post/53837" target="_blank" rel="noopener">Apple News+ 能不能成为新闻业的 Netflix？这是我的一周使用体验</a></p><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/22/996/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tampermonkey Tutorial</title>
      <link>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/</link>
      <guid>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/</guid>
      <pubDate>Thu, 04 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;浏览器神器教程&lt;/p&gt;
&lt;h1 id=&quot;文档&quot;&gt;&lt;a href=&quot;https://tampermonkey.net/documentation.php?ext=dhdg&amp;amp;locale=zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>浏览器神器教程</p><h1 id="文档"><a href="https://tampermonkey.net/documentation.php?ext=dhdg&amp;locale=zh" target="_blank" rel="noopener">文档</a></h1><hr><p>第一步当然是看官方<a href="https://tampermonkey.net/documentation.php?ext=dhdg&amp;locale=zh" target="_blank" rel="noopener">文档</a>啦.</p><h1 id="hello-world">Hello World</h1><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         douban-ifttt-airtable-tampermonkey</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       CoderTonyChan</span></span><br><span class="line"><span class="comment">// @match        https://*.douban.com/people/103961302/*</span></span><br><span class="line"><span class="comment">// @connect        *</span></span><br><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// @require         http://cdn.bootcss.com/jquery/1.8.3/jquery.min.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br></pre></td></tr></table></figure><p>@name就是脚本名，@namespace是脚本的主页，@version是版本，@description是介绍，@author是作者，@match是匹配到什么页面执行此脚本，@grant是需求权限。其他属性在油猴的<a href="https://tampermonkey.net/documentation.php" target="_blank" rel="noopener">文档</a>里可以看到，在此就不再赘述。</p><p>⚠️:一定要写做 <code>==/UserScript==</code> 以上 不然没办法使用</p><p>加上这个 hello world就完成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line"> </span><br><span class="line">    alert(&apos;Hello, world!&apos;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="匹配">匹配</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @match        https://*.douban.com/people/103961302/*</span></span><br></pre></td></tr></table></figure><p>这个就是匹配使用的站点 但是具体还要如何配匹呢? 可以用 ,参考这个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> doubanSite = location.href;</span><br><span class="line">    <span class="keyword">const</span> reMovie = <span class="regexp">/movie.douban/i</span>;</span><br><span class="line">    <span class="keyword">const</span> reBook = <span class="regexp">/book.douban/i</span>;</span><br><span class="line">    <span class="keyword">const</span> reGame = <span class="regexp">/\/games/i</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ifttt = <span class="string">'&lt;button class="ifttt" style="font-size: 18px;outline: none;"&gt;[upload airtable]&lt;/button&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影</span></span><br><span class="line">    <span class="keyword">if</span> (reMovie.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 📖</span></span><br><span class="line">    <span class="keyword">if</span> (reBook.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 🎮</span></span><br><span class="line">    <span class="keyword">if</span> (reGame.test(doubanSite)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="按钮hook">按钮hook</h1><p>利用jQuery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ifttt = <span class="string">'&lt;button class="ifttt" style="font-size: 18px;outline: none;"&gt;[upload airtable]&lt;/button&gt;'</span>;</span><br><span class="line"><span class="keyword">const</span> ul_tag = $(<span class="string">"div.grid-view .item .info .title"</span>);</span><br><span class="line"><span class="keyword">if</span> (ul_tag) &#123;</span><br><span class="line">    ul_tag.append(ifttt);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">".ifttt"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以做一些东西了</p><h1 id="网络请求">网络请求</h1><hr><p>如果需要网络请求 需要加上这些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @connect        *</span></span><br><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This Userscirpt can't run under Greasemonkey 4.x platform</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> GM_xmlhttpRequest === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    alert(<span class="string">"不支持Greasemonkey 4.x，请换用暴力猴或Tampermonkey"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再封装一下 ⚠️ : GM_xmlhttpRequest 不会帮你拼任何 Content-Type 啊 和 处理object类型 需要自己封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log('post');</span></span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">"object"</span>) &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> req = GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        data: data,</span><br><span class="line">        onreadystatechange: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    callback(res.response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDoc</span>(<span class="params">url, meta, callback</span>) </span>&#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        onload: <span class="function"><span class="keyword">function</span> (<span class="params">responseDetail</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (responseDetail.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> doc = page_parser(responseDetail.responseText);</span><br><span class="line">                callback(doc, responseDetail, meta);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onload: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">                callback(<span class="built_in">JSON</span>.parse(response.responseText), url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="literal">false</span>, url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发布脚本">发布脚本</h1><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @homepageURL  https://domain/folder/index.html</span></span><br><span class="line"><span class="comment">// @supportURL   https://domain/folder/issues.html</span></span><br><span class="line"><span class="comment">// @downloadURL  https://domain/folder/code.user.js</span></span><br><span class="line"><span class="comment">// @updateURL    https://domain/folder/code.user.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br></pre></td></tr></table></figure><p>@homepageURL是主页，@supportURL是问题报告页面，@downloadURL是下载地址，@updateURL是自动更新地址。值得注意的地方是下载地址和更新地址一定要是.user.js结尾的，这样如果你装了油猴插件，在打开这个URL的时候，会跳转到油猴脚本的安装页面。只需要把这个URL共享给别人，他就可以直接安装脚本了。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/04/Tampermonkey-Tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apple News Format</title>
      <link>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/</link>
      <guid>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/</guid>
      <pubDate>Wed, 03 Apr 2019 00:38:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今年苹果春季发布会主要发布的是软件,  Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。但最终发布的「现货」只有 Apple News+ 这一项。Apple News+ 能不能成为新闻业的 Netflix
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今年苹果春季发布会主要发布的是软件,  Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。但最终发布的「现货」只有 Apple News+ 这一项。Apple News+ 能不能成为新闻业的 Netflix？</p><h1 id="apple-news-format">Apple News Format</h1><hr><p>Apple News+ 的内容呈现技术是以 Apple News Format 为基础的。这是苹果为 Apple News 定制的一种私有格式，它通过 JSON 语法定义页面中元素的布局、外观和功能，可以实现比普通网页格式更丰富的视觉效果和交互。虽然 Apple News Format 在 2015 年就已随着初版 News 应用一起上线，但它此次也迎来了一次功能更新，包括根据屏幕宽度动态调整布局、文章链接支持显示标题和预览图等；显然，这是为了让 Apple News+ 更好地支持不同尺寸的设备和版式复杂的杂志文章而做的铺垫。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445156-754af400-55ec-11e9-8ee1-65c8cf4e74b7.png" alt="image"></p><h1 id="apple-news-的竞争力">Apple News+ 的竞争力</h1><hr><p>当然，评价 Apple News+ 的优劣还要将它和竞争者对比之后才能做出结论。提供「打包」式杂志订阅并不是一种很新颖的模式。除了被苹果收购以为 Apple News+ 做准备的 Texture（已经宣布即将结束独立运营），如今还有 Magzter、Scribd 等公司提供功能和价格均相近的订阅服务。此外，亚马逊的 Kindle Unlimited 订阅虽然以图书为主，但也涵盖了不少杂志内容；PressReader 的模式则是与图书馆和酒店合作，用户可以在连接到它们特设的 WiFi 热点时无限阅读期刊。</p><p>在杂志内容的呈现形式上，这些竞争服务有的只提供 PDF 图像（如 Magzter），有的只提供文本（如 Scribd），也有的两者均提供、并允许用户在两种模式间切换（如 Kindle）。但无论采用哪种做法，呈现效果都不尽如人意。PDF 格式的局限性无需多言，即使像 Kindle 那样提供文本，其样式也非常单调，并且常有错漏（何况 Kindle 软件本身的排版效果一直很差）。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445241-fd30fe00-55ec-11e9-861f-7cf9a063e11d.png" alt="image"></p><p>表现最好的可能是 PressReader，它会在图像版本上高亮框出文章标题，点按后即可跳转到对应的文字版，并且界面上会给出相关内容推荐。但即使如此，它也没有能完全克服传统刊物在移动设备上水土不服的问题，读者在使用时能明显感到这是一种妥协后的效果。与它们相比，Apple News+ 的确有比较明显的优势。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445245-05893900-55ed-11e9-8ed8-5c0a10af771d.png" alt="image"></p><p>不过，这种优势是有前提的，那就是内容提供方充分利用了 Apple News Format 的功能；但从前文可以看出，有条件做到这一点的只是少数。对于大多数只是简单转换格式、甚至直接丢给用户一个扫描版的文章来说，其在 Apple News+ 上的阅读体验和在其他平台上并无本质区别。</p><p>要获得成功，Apple News+ 还需要说服读者从传统的订阅渠道转移。为此，苹果少见地打起了价格牌，在发布会上指出：如果一一订阅该服务中所有刊物，每年需要花费 8000 美元以上，因此 Apple News+ 不到两位数的月费就显得十分超值了。</p><p>显然，这种算法是有所夸大的。首先，没有人会真的去订阅几百种杂志。对于一般人而言，同时阅读三四份刊物可能已经是精力上限。另外，8000 美元的价格显然是用名义上的标价计算的，但实际情况是几乎没有人会按原价订阅杂志。除了《纽约客》《时代》等名声相对显赫的杂志，大多数 Apple News+ 中的刊物都可以在亚马逊等网站上用一季度甚至一年 5 美元的价格订阅纸刊，并且附送 Kindle 版和官网阅读权限。极端如《连线》等媒体甚至隔周就会出现 4 美元/两年这种「跳楼价」。</p><p><img src="https://user-images.githubusercontent.com/16996753/55445256-13d75500-55ed-11e9-97db-0e4930d87cba.png" alt="image"></p><p>不仅如此，如今期刊内容的免费获取渠道也极为广泛。这里的「免费」并不是指盗版；很多杂志都会在其网站上将纸刊内容都会同步甚至提前全文刊出，且其中很大比例是没有付费墙的。即使有的限制了阅读篇数，其执行也通常极为宽松。因此，即使没有 Apple News+，通过现有渠道阅读杂志内容也是相对方便和廉价的，平均成本未必会达到每月 10 美元。</p><p>实际上，期刊目前的低廉定价和 Apple News+ 杂志库的庞大是同一枚硬币的两面，其成因都在于期刊行业的营利模式和业务现状。与报纸、电视等其他大众传媒类似，杂志行业的主要收入并不在于销售，而是来自广告。在美国，期刊行业广告收入占总收入的比例是 51.1%，显著高于来自订阅和零售的收入（34.9%）。因此，即使赔本销售杂志，如果能由此扩大发行量和读者群，随之增加的广告投放也足以让杂志社维持经营。</p><p>但在近年，随着广告投入越发向数字平台转移，期刊行业的传统商业模式已经难以维持。以美国为例，该行业的收入总额连续多年下滑，从 2009 年的 3970 万美元跌至 2018 年的 2112 万美元，雇员人数从 14 万余人缩减到 8 万余人。仅去年一年，就有包括《Interview》《The Village Voice》在内的多家著名刊物宣布停刊。因此，通过低价促销和加入 Apple News+ 这样的平台来维持覆盖面，某种程度上也是不得已而为之的选择。发布会前几周，有消息称苹果对 Apple News+ 的内容方 收取高达 50% 的收入提成，引发了不少关于苹果是否过于「贪婪」的讨论。这或许能体现双方谈判地位的差异，但换一个角度看，既然很多杂志之前已经通过各种渠道提供了电子版，将这一现成资源挪用到苹果平台上销售并不需要多少额外成本，因此即使在「克扣」后也是一种净得。</p><p>当然，对于处于金字塔顶端的一些刊物，例如《华尔街日报》《纽约时报》来说，情况可能有所不同。这些媒体本身具有较强的订户基础，拥有自己的广告发行渠道，并已在向数字发行转移的方向上取得了一定成功，因此并不依赖于苹果提供的平台；Apple News 的封闭式特征反倒会影响它们自己网站的流量。不仅如此，这些大牌媒体往往并不满足于沦落为科技公司的内容提供商，而是希望强化自己的品牌识别度，和订户建立直接的业务和情感联系——《纽约时报》在其面向 2020 年的运营策略报告中就反复强调读者的「忠诚」「参与」和对报道的反哺作用。于是，它们要么干脆不和苹果合作，要么用缩水的内容谨慎试水。这进一步限制了 Apple News+ 能为用户带来的优惠程度。</p><p>总之，Apple News+ 并不是苹果替消费者行道、与期刊业博弈的让利之举，而是苹果与内容方基于各自对内容和平台的渴求展开的合作。10 美元的打包价当然具有一定吸引力，但并不是一笔稳赚不赔的投资。</p><hr><p>Reference：</p><blockquote><p>少数派：<a href="https://sspai.com/post/53837" target="_blank" rel="noopener">Apple News+ 能不能成为新闻业的 Netflix？这是我的一周使用体验</a></p><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/04/03/Apple%20News%20Format/#disqus_thread</comments>
    </item>
    
    <item>
      <title>A ttrss setup guide.</title>
      <link>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/</link>
      <guid>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/</guid>
      <pubDate>Thu, 21 Mar 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This is a detailed guide to setup a fully running ttrss instance and explore its potential.&lt;/p&gt;
&lt;h1 id=&quot;docker&quot;&gt;docker&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This is a detailed guide to setup a fully running ttrss instance and explore its potential.</p><h1 id="docker">docker</h1><hr><h2 id="requirements">Requirements</h2><hr><p>yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><h2 id="set-up-the-repository">SET UP THE REPOSITORY</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="install-docker-ce">INSTALL DOCKER CE</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="start-docker">Start Docker</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="postgresql">PostgreSQL</h1><hr><p>I chose this image because it allows you to specify the extensions you want to enable. pg_trgm is required for marking similar feeds as read via the ttrss plugin af_psql_trgm.</p><p>The default user is <code>postgres</code>.</p><p>It persists its data in directory <code>/docker/postgres/data/</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name postgres --restart=always \</span><br><span class="line">-v /docker/postgres/data/:/var/lib/postgresql/ \</span><br><span class="line">-e PG_PASSWORD=mydbpass \</span><br><span class="line">-e DB_EXTENSION=pg_trgm \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">sameersbn/postgresql:latest</span><br></pre></td></tr></table></figure><h2 id="change-password">change password</h2><hr><p><a href="http://tonystudio.ml" target="_blank" rel="noopener">tonystudio.ml</a></p><p>navicat</p><h1 id="nginx">nginx</h1><hr><p>SSL功能需要openssl库，直接通过yum安装:</p><p>sudo yum install openssl</p><p>gzip模块需要zlib库，直接通过yum安装:</p><p>sudo yum install zlib</p><p>rewrite模块需要pcre库，直接通过yum安装:</p><p>sudo yum install pcre</p><p>sudo yum install nginx</p><p>sudo service nginx start</p><h2 id="config">config</h2><hr><p>ssl certificate can be obtained for free here at <a href="https://letsencrypt.org" target="_blank" rel="noopener">Let’s Encrypt</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">upstream ttrss &#123;</span><br><span class="line">    server 127.0.0.1:7722;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  rss.tonystudio.ml;</span><br><span class="line">    return 301 https://rss.tonystudio.ml$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    gzip on;</span><br><span class="line">    server_name  rss.tonystudio.ml;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /home/kiritochan1990/tonystudio/Nginx/1_tonystudio.ml_bundle.crt;</span><br><span class="line">    ssl_certificate_key /home/kiritochan1990/tonystudio/Nginx/2_tonystudio.ml.key;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/ttrss_access.log combined;</span><br><span class="line">    error_log  /var/log/nginx/ttrss_error.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://ttrss;</span><br><span class="line"></span><br><span class="line">        proxy_set_header  Host                $http_host;</span><br><span class="line">        proxy_set_header  X-Real-IP           $remote_addr;</span><br><span class="line">        proxy_set_header  X-Forwarded-Ssl     on;</span><br><span class="line">        proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">        proxy_set_header  X-Frame-Options     SAMEORIGIN;</span><br><span class="line"></span><br><span class="line">        client_max_body_size        100m;</span><br><span class="line">        client_body_buffer_size     128k;</span><br><span class="line"></span><br><span class="line">        proxy_buffer_size           4k;</span><br><span class="line">        proxy_buffers               4 32k;</span><br><span class="line">        proxy_busy_buffers_size     64k;</span><br><span class="line">        proxy_temp_file_write_size  64k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test-todo">test todo</h2><hr><p>curl <a href="https://127.0.0.1" target="_blank" rel="noopener">https://127.0.0.1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl: (60) Peer&apos;s Certificate issuer is not recognized.</span><br><span class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl performs SSL certificate verification by default, using a &quot;bundle&quot;</span><br><span class="line"> of Certificate Authority (CA) public keys (CA certs). If the default</span><br><span class="line"> bundle file isn&apos;t adequate, you can specify an alternate file</span><br><span class="line"> using the --cacert option.</span><br><span class="line">If this HTTPS server uses a certificate signed by a CA represented in</span><br><span class="line"> the bundle, the certificate verification probably failed due to a</span><br><span class="line"> problem with the certificate (it might be expired, or the name might</span><br><span class="line"> not match the domain name in the URL).</span><br><span class="line">If you&apos;d like to turn off curl&apos;s verification of the certificate, use</span><br><span class="line"> the -k (or --insecure) option.</span><br></pre></td></tr></table></figure><h1 id="ttrss">TTRSS</h1><hr><p>This links ttrss with the PostgreSQL container created just now and exposes port 7722 to the public.</p><p>The default credential is admin and password. You should be prompted to change them upon first login, please do so.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -dit --name=ttrss --restart=always \</span><br><span class="line">-e SELF_URL_PATH=http://rss.tonystudio.ml \</span><br><span class="line">-e DB_HOST=postgres  \</span><br><span class="line">-e DB_PORT=5432  \</span><br><span class="line">-e DB_NAME=myttrss  \</span><br><span class="line">-e DB_USER=tonychan  \</span><br><span class="line">-e DB_PASS=your-passwd  \</span><br><span class="line">-p 7722:80  \</span><br><span class="line">wangqiru/ttrss</span><br></pre></td></tr></table></figure><h2 id="test">test</h2><p>curl <a href="http://127.0.0.1:7722" target="_blank" rel="noopener">http://127.0.0.1:7722</a> 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Startup failed&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/default.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body class=&apos;sanity_failed claro ttrss_utility&apos;&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Startup failed&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Tiny Tiny RSS was unable to start properly. This usually means a misconfiguration or an incomplete upgrade. Please fix</span><br><span class="line">errors indicated by the following messages:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;alert alert-danger&quot; id=&quot;&quot;&gt;Please set SELF_URL_PATH to the correct value for your server (possible value: &lt;b&gt;http://127.0.0.1:7722/&lt;/b&gt;)&lt;/div&gt;&lt;div class=&quot;alert alert-danger&quot; id=&quot;&quot;&gt;Please set SELF_URL_PATH to the correct value detected for your server: &lt;b&gt;http://127.0.0.1:7722/&lt;/b&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;You might want to check tt-rss &lt;a href=&quot;http://tt-rss.org/wiki&quot;&gt;wiki&lt;/a&gt; or the</span><br><span class="line">&lt;a href=&quot;http://tt-rss.org/forum&quot;&gt;forums&lt;/a&gt; for more information. Please search the forums before creating new topic</span><br><span class="line">for your question.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="stopampampdelete">stop&amp;&amp;delete</h3><hr><p>sudo docker container ls</p><p>sudo docker stop ttrss</p><p>sudo docker rm ttrss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -dit --name=ttrss --restart=always \</span><br><span class="line">--net ttrss_network \</span><br><span class="line">-e SELF_URL_PATH=http://localhost:7722/ \</span><br><span class="line">-e DB_HOST=127.0.0.1  \</span><br><span class="line">-e DB_PORT=5432  \</span><br><span class="line">-e DB_NAME=myttrss  \</span><br><span class="line">-e DB_USER=tonychan  \</span><br><span class="line">-e DB_PASS=your-passwd  \</span><br><span class="line">-p 7722:80  \</span><br><span class="line">wangqiru/ttrss</span><br></pre></td></tr></table></figure><h2 id="docker-network">docker network</h2><hr><p>sudo docker network create ttrss_network<br>sudo docker network connect ttrss_network postgres<br>sudo docker network connect ttrss_network ttrss<br>sudo docker restart ttrss</p><h1 id="docker-compose">docker-compose</h1><hr><p>for centos</p><p>sudo curl -L “<a href="https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$</a>(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose</p><p>sudo chmod +x /usr/local/bin/docker-compose</p><p>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</p><p>docker-compose --version</p><h1 id="up">up</h1><hr><p>sudo docker-compose up -d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  database.postgres:</span><br><span class="line">    image: sameersbn/postgresql:latest</span><br><span class="line">    container_name: postgres</span><br><span class="line">    ports:</span><br><span class="line">      - 5678:5432</span><br><span class="line">    environment:</span><br><span class="line">      - PG_PASSWORD=your-passwd # please change the password</span><br><span class="line">      - DB_EXTENSION=pg_trgm</span><br><span class="line">    volumes:</span><br><span class="line">      - ~/postgres/data/:/var/lib/postgresql/ # persist postgres data to ~/postgres/data/ on the host</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.rss:</span><br><span class="line">    image: wangqiru/ttrss:latest</span><br><span class="line">    container_name: ttrss</span><br><span class="line">    ports:</span><br><span class="line">      - 7722:80</span><br><span class="line">    environment:</span><br><span class="line">      - SELF_URL_PATH=https://rss.tonystudio.ml/ # please change to your own domain</span><br><span class="line">      - DB_HOST=database.postgres</span><br><span class="line">      - DB_PORT=5432</span><br><span class="line">      - DB_NAME=ttrss</span><br><span class="line">      - DB_USER=postgres</span><br><span class="line">      - DB_PASS=your-passwd # please change the password</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    restart: always</span><br><span class="line">    command: sh -c &apos;sh /wait-for database.postgres:5432 -- php /configure-db.php &amp;&amp; exec s6-svscan /etc/s6/&apos;</span><br><span class="line"></span><br><span class="line">  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/mercury-parser-api:latest</span><br><span class="line">    container_name: mercury</span><br><span class="line">    expose:</span><br><span class="line">      - 3000</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/opencc-api-server:latest</span><br><span class="line">    container_name: opencc</span><br><span class="line">    environment:</span><br><span class="line">      NODE_ENV: production</span><br><span class="line">    expose:</span><br><span class="line">      - 3000</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>The default credential is admin and password.</p><h1 id="fever">fever</h1><hr><p>Reeder3 邮箱地址填你的用户名 默认使用admin<br>密码 在Fever中设置</p><p>fever API不支持添加和删除订阅源 只支持Star等常规操作.</p><h1 id="gcp">GCP</h1><hr><p>Something about GCP Settings.</p><ul><li>禁止root登陆</li><li>只开放需要的端口。</li><li>不要用常规默认端口。例如ssh 不要用22</li><li>不使用默认账号(但是始终要记一个管理员账号)</li><li>限制IP段登录 (暂时没做)</li><li>没使用Linux的iptable做, 使用VPC网络做(相当于路由器)</li></ul><p><img src="https://user-images.githubusercontent.com/16996753/54900715-4d360380-4f0f-11e9-9de0-045e9cc9c752.png" alt="image"></p><h1 id="backup">Backup</h1><hr><p>backup database.</p><h2 id="主从复制">主从复制</h2><hr><p>主流 todo</p><h2 id="物理备份">物理备份</h2><hr><p>复制的恢复不出来 而且需要版本的一致</p><h2 id="逻辑备份">逻辑备份</h2><hr><h3 id="转存sql">转存SQL</h3><hr><p>这个跨平台能通用 缺点是包比较大 (10.8M)</p><h3 id="navicat内置">navicat内置</h3><hr><p>应该有兼容性问题 例如 部署在centos中的postgres的备份 在macos中恢复失败</p><p>但是用SQL先恢复出来后 然后在macos中备份 然后在macos中恢复成功</p><h1 id="postgres备份"><a href="http://www.postgres.cn/docs/9.6/backup-dump.html" target="_blank" rel="noopener">postgres备份</a></h1><hr><h2 id="sql转储">SQL转储</h2><hr><p>SQL 转储方法的思想是创建一个由SQL命令组成的文件，当把这个文件回馈给服务器时，服务器将利用其中的SQL命令重建与转储时状态一样的数据库。pg_dump创建的备份在内部是一致的， 也就是说，转储表现了pg_dump开始运行时刻的数据库快照，且在pg_dump运行过程中发生的更新将不会被转储。pg_dump工作的时候并不阻塞其他的对数据库的操作。 （但是会阻塞那些需要排它锁的操作，比如大部分形式的ALTER TABLE）</p><h2 id="文件系统级别备份">文件系统级别备份</h2><hr><h2 id="流复制">流复制</h2><hr><p>流复制允许一台后备服务器比使用基于文件的日志传送更能保持为最新的状态。 后备服务器连接到主服务器， 主服务器则在 WAL(write ahead log) 记录产生时即将它们以流式传送给后备服务器而不必等到 WAL文件被填充。在这种情况下主服务器上提交一个事务与该变化在后备服务器上变得可见之间存在短暂的延迟。 不过这种延迟比基于文件的日志传送方式中要小得多， 在后备服务器的能力足以跟得上负载的前提下延迟通常低于一秒。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/21/ttrss-guide%20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019 春分</title>
      <link>https://blog.tonystudio.ml/2019/03/21/2019-Spring/</link>
      <guid>https://blog.tonystudio.ml/2019/03/21/2019-Spring/</guid>
      <pubDate>Thu, 21 Mar 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在9012年寒冬中迎来了春分, 春分自淮北，寒食渡江南。&lt;/p&gt;
&lt;p&gt;几个互联网公司发布了重要举动。真是一年之计在于春啊。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apple.com/v/apple-events/home/b/built/assets/e
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在9012年寒冬中迎来了春分, 春分自淮北，寒食渡江南。</p><p>几个互联网公司发布了重要举动。真是一年之计在于春啊。</p><p><a href="https://www.apple.com/v/apple-events/home/b/built/assets/event.ics" target="_blank" rel="noopener">苹果春季发</a>布会还有几日, 但是各种产品已经在商城更新, WWDC19也定于6月3日-7日。</p><p>谷歌在 GDC 大会上公布云游戏平台「Stadia」。</p><p>腾讯公司也于昨日开启了自家云游戏平台「<a href="https://start.qq.com" target="_blank" rel="noopener">START</a>」 的预约内测页面, 已经预约, 看看是否能颠覆主机, 其实主要看开发商, 有开发商加盟才有戏。</p><p>亚马逊上架 Kindle 全新青春版。</p><h1 id="苹果">苹果</h1><hr><p>最有性价比的应该是27寸iMac。</p><p>AirPods等到颈长,表现应该有保障,主要是充电器涨价了。总的来说，有一代的基本可以忽略不计（电池不行的除外），等二代的可以直接入手了。</p><p><img src="https://user-images.githubusercontent.com/16996753/54731343-b4c71880-4bc8-11e9-9a15-8ce1a01dfd76.jpg" alt="2019-03-21 08 40 32"></p><p><img src="https://user-images.githubusercontent.com/16996753/54731531-a0cfe680-4bc9-11e9-9a63-0bba02051a1e.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/16996753/54732396-7b91a700-4bce-11e9-94eb-c673d0f916ec.png" alt="image"></p><h2 id="春季发布会">春季发布会</h2><hr><p>仅发布了 Apple News+、Apple Arcade、Apple TV+ 三个订阅服务和一张信用卡 Apple Card。</p><h1 id="亚马逊">亚马逊</h1><hr><p>Kindle 低配加灯 非常懂需求 看漫画32G也不够用 4G有点难受 但是电子书的话 最便宜了</p><p><img src="https://user-images.githubusercontent.com/16996753/54731351-babcf980-4bc8-11e9-9bf7-4e1418316c79.png" alt="WX20190321-084450"></p><h1 id="谷歌">谷歌</h1><hr><p>谷歌云游戏平台 Stadia 2019年内上线，同时成立第一方游戏公司 - 4K 60帧</p><p><img src="https://user-images.githubusercontent.com/16996753/54731517-8ac22600-4bc9-11e9-8349-fd394424a19c.png" alt="image"></p><h1 id="腾讯">腾讯</h1><hr><h1 id="小米">小米</h1><hr><p>小米首个年度财报出来</p><p><img src="https://user-images.githubusercontent.com/16996753/54731467-50588900-4bc9-11e9-8f1d-859bc290ddfb.png" alt="image"></p><h1 id="两会">两会</h1><hr><p>只知道人民网疯涨, 都在等科创</p><p><img src="https://user-images.githubusercontent.com/16996753/54732139-1ab59f00-4bcd-11e9-8be9-e704d1430d95.jpg" alt="2"></p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/21/2019-Spring/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019博客升级</title>
      <link>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/</link>
      <guid>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/</guid>
      <pubDate>Tue, 05 Mar 2019 06:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;2019年更新一下😊&lt;/p&gt;
&lt;h1 id=&quot;目标功能&quot;&gt;目标功能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[x] Disqus换Gitalk&lt;/li&gt;
&lt;li&gt;[x] Google Analytics&lt;/li&gt;
&lt;li&gt;[ ] 标签功能升级&lt;/li&gt;
&lt;li&gt;[ ] 分类功能&lt;/l
        
      
      </description>
      
      <content:encoded><![CDATA[<p>2019年更新一下😊</p><h1 id="目标功能">目标功能</h1><ul><li>[x] Disqus换Gitalk</li><li>[x] Google Analytics</li><li>[ ] 标签功能升级</li><li>[ ] 分类功能</li><li>[ ] 照片墙功能</li></ul><h1 id="disqus换gitalk">Disqus换Gitalk</h1><hr><p>由于在国内上 Disqus 十分糟糕，而且本人社交基本在GitHub上，故改成Gitalk</p><h2 id="集成-gitalk">集成 Gitalk</h2><hr><p>可参考文档 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Gitalk 评论 start  --&gt;</span><br><span class="line">&#123;% if site.gitalk.enable %&#125;</span><br><span class="line">&lt;!-- Link Gitalk 的支持文件  --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: `Github Application clientID`,</span><br><span class="line">        clientSecret: `Github Application clientSecret`,</span><br><span class="line">        repo: `存储你评论 issue 的 Github 仓库名`,</span><br><span class="line">        owner: &apos;Github 用户名&apos;,</span><br><span class="line">        admin: [&apos;Github 用户名&apos;],</span><br><span class="line">        id: location.pathname,</span><br><span class="line">    &#125;);</span><br><span class="line">    gitalk.render(&apos;gitalk-container&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;!-- Gitalk end --&gt;</span><br></pre></td></tr></table></figure><h3 id="gitalk的错误">Gitalk的错误</h3><hr><p>error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%<a href="http://2Fdeveloper.github.com" target="_blank" rel="noopener">2Fdeveloper.github.com</a>%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch</p><ul><li><p>中文或者空格路径的问题</p></li><li><p>配置后面加上 /</p></li></ul><p><img src="https://user-images.githubusercontent.com/16996753/55541634-ef1bd400-56f7-11e9-8a67-417e833a8dfa.png" alt="image"></p><h2 id="创建-github-application">创建 Github Application</h2><hr><p>如果没有 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里申请</a>，<code>Authorization callback URL</code> 填写当前使用插件页面的域名。</p><h2 id="创建issue">创建issue</h2><hr><p>当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 repo 的仓库下创建对应 issue。</p><p>当然，你也可以手动创建issue作为 gitalk评论容器。只要有 Gitalk 标签 和 id 对应标签就可以。</p><p>Gitalk 需要在管理员在登录状态下点开每篇文章的页面才会创建对应的 issue。</p><p>解决方案如下 :<br><a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a></p><h1 id="google-analytics">Google Analytics</h1><hr><h1 id="标签功能升级">标签功能升级</h1><hr><h1 id="分类功能">分类功能</h1><hr><h1 id="照片墙功能">照片墙功能</h1><hr><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/03/05/2019-blog-feature/#disqus_thread</comments>
    </item>
    
    <item>
      <title>七牛云备份命令</title>
      <link>https://blog.tonystudio.ml/2019/02/26/qiniu/</link>
      <guid>https://blog.tonystudio.ml/2019/02/26/qiniu/</guid>
      <pubDate>Tue, 26 Feb 2019 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;由于最近博客搬家, 使用了七牛云&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>由于最近博客搬家, 使用了七牛云</p></blockquote><p><img src="https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11e9-9d32-b5507474259b.png" alt="image"></p><h1 id="批量上传">批量上传</h1><hr><p>blog.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"src_dir"</span>: <span class="string">"/Users/tonychan/Pictures/qiniu"</span>,</span><br><span class="line"><span class="attr">"bucket"</span>: <span class="string">"tonystudio-ml"</span>,</span><br><span class="line"><span class="attr">"rescan_local"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"skip_suffixes"</span>: <span class="string">".DS_Store"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qupload blog.json</span><br></pre></td></tr></table></figure><h1 id="批量下载">批量下载</h1><hr><pre><code class="language-shell">qshell listbucket tonystudio-ml  &gt; listcat list | awk -F ' ' ' {print &quot;http://oss.zhcoco.com/&quot;$1}' &gt; urlList</code></pre><p>将tonystudio-ml 和 <a href="http://oss.zhcoco.com" target="_blank" rel="noopener">http://oss.zhcoco.com</a> 改成自己的变量即可</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/02/26/qiniu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2018 年总结</title>
      <link>https://blog.tonystudio.ml/2019/01/01/2018-summary/</link>
      <guid>https://blog.tonystudio.ml/2019/01/01/2018-summary/</guid>
      <pubDate>Mon, 31 Dec 2018 16:11:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;不知不觉已经到了9102年了，回顾过去的2018，自己也有不少的收获。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oss.zhcoco.com/2019/2018-summary.0.png&quot; alt=&quot;&quot;&gt;&lt;/p
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>不知不觉已经到了9102年了，回顾过去的2018，自己也有不少的收获。</p></blockquote><p><img src="http://oss.zhcoco.com/2019/2018-summary.0.png" alt=""></p><h1 id="2018总结">2018总结</h1><hr><p>2018慢慢体验到了苹果，Google，腾讯的伟大的。慢慢拾起苹果的各种效率应用，比如邮件、日历、提醒事项、备忘录、捷径等等。还有离不开iPhone的生态。在设计行业和影音行业的领先，比如发布了iMac Pro，和iPad Pro都是针对设计行业。</p><p>Google的云服务基本没任何对手。YouTube，Google Photos，Google Maps暂时没任何对手。</p><p>后慢慢了解到社交的重要性，虽然腾讯不是最牛的，但是是微信让我理解到这一点。社交可以做任何事情，社交 + 教育 / 社交 + 金融 / 社交 + 电商 。</p><p>因为社交的载体是人，就有了无限的可能性，而互联网最重要的是内容，内容正是从人而来，这就应了习大大的口号：“人才是第一资源，创新是第一动力”。</p><p>对于我个人成长，我需要利用好这些工具去更快成长！</p><p>2018年，我接触到很多软件工程外其他领域，比如产品设计，平面设计，摄影师，录像师，健身教程，花式溜冰，炒菜教程等等。</p><p>通过观看各种各样的教程，更加发现，名师的重要性。再次体验到人在这个环节的重要性。“你爸是谁”既然存在，就非常合理。</p><p>以下通过几个关键词去总结过去一年。</p><h1 id="健康">健康</h1><hr><h2 id="keep">Keep</h2><hr><p>总结报告</p><p>Keep的课程分类<br><img src="https://user-images.githubusercontent.com/16996753/53464300-aaf83c80-3a84-11e9-9eec-84952cdfe77a.png" alt="22dbb8df-7f7b-4bae-9276-efb80908933a"><br><img src="https://user-images.githubusercontent.com/16996753/53464304-b0ee1d80-3a84-11e9-8f68-1eab6ef90e88.png" alt="c3383a41-76e9-45d6-8bcd-18afe9740b28"></p><p>但是也没真正减肥，只是能保证以后没这么多病。</p><h2 id="滑冰️">滑冰⛸️</h2><hr><p>夏天的新尝试，但是现在几乎都忘了。</p><h1 id="读书电影">读书/电影</h1><hr><h2 id="豆瓣">豆瓣</h2><hr><p><a href="https://www.douban.com/standbyme/2018?uid=103961302&amp;dt_dapp=1" target="_blank" rel="noopener">总结报告</a></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-1.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-2.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-3.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-4.png" alt=""></p><p><img src="http://oss.zhcoco.com/2019/2018-summary-5.png" alt=""></p><h2 id="kindle">Kindle</h2><hr><p>购入了Kindle，看更多的书籍</p><h1 id="平面设计摄影师录像师">平面设计/摄影师/录像师</h1><hr><p>艺术，使人脱颖而出。</p><p>我们不只是用相机拍照，我们带到摄影中去的是所有我们读过的书、看过的电影、听过的音乐、走过的路、爱过的人。</p><h2 id="平面设计">平面设计</h2><hr><p>接触到了wacom全线产品，对比iPad Pro和Surface系列。</p><p>也了解一些绘图的基本功。</p><p>学习了一些素描的基础，但是没有坚持下去。</p><h2 id="摄影师">摄影师</h2><hr><p>A7 + 55 1.8/28 f2/85 1.8 的使用</p><p>理论基本上全部看完了，什么构图，调色，机器的使用，LR/PS教程。</p><p>但是能拿出手的就只有漫展和日本旅行的照片，平时并没有作为摄影师的素养。</p><h2 id="录像师">录像师</h2><hr><p>基本上看完了Final Cut Pro X的所有基本操作。还购入了大疆的OSMO Mobile 2。</p><p>但是一个像样的视频也没有创作出来，基本是demo。</p><h1 id="金融">金融</h1><hr><p>业余时间也读了一些经济学相关的教材，了解经济学的知识对作者的影响还是比较大的，虽然很多经济学的结论都能够根据直觉推测出来，但是有一些现象和规则学习起来还是非常有趣。</p><p>明年可能还是会花一些时间来阅读经济学相关的书籍，同时也希望减少技术书籍的阅读量，目前市面上真正值得多次阅读的技术书籍真的非常的少，想要静下心来好好学习一下更抽象的知识，帮助自己在软件设计上的理解更进一步。</p><h1 id="生活">生活</h1><h2 id="小公主1岁">小公主1岁</h2><hr><p>通过iPhone的照片应用，的确留下不是珍贵的片段。</p><p>小孩教育的思考：</p><p>魔都娃标配兴趣班列表：</p><ul><li>一门乐器，以钢琴为首，小提琴、架子鼓，长笛、古筝等民乐为辅，再佐以黑管、大提琴、古琴等小众乐器等；</li><li>一门运动，游泳最佳，足球、网球、篮球、轮滑、跆拳道等为辅，再佐以冰球、剑道、高尔夫等小众高端运动项目；</li><li>一门艺术，以画画、舞蹈为首，书法、国学、其他手工课程为辅；</li><li>一门学科，以英语、奥数（思维／数学）为主，大部分是两门都上，再辅以乐高、机器人等其他高冷课程；</li></ul><h2 id="10月日本之旅">10月日本之旅</h2><hr><p>一些照片</p><h1 id="游戏">游戏</h1><hr><ul><li>怪物猎人世界</li><li>机战X</li><li>奥德赛</li><li>Let’s Go 皮卡超</li></ul><h1 id="社交网络">社交网络</h1><hr><ul><li>RSSHub</li><li>YouTube</li><li>BiliBili</li><li>Telegram</li><li>好友圈</li><li>博客</li><li>Facebook</li><li>Ins</li><li>微博</li></ul><h1 id="个人项目">个人项目</h1><hr><ul><li>GCP的梯子</li><li>GitHub的PR</li><li>自建RSS</li></ul><h2 id="博客">博客</h2><hr><p>培养写作的能力。</p><h1 id="未来技术趋势">未来技术趋势</h1><hr><ul><li>分布式</li><li>区块链</li><li>云原生（k8s）</li></ul><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2019/01/01/2018-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>FFmpeg命令</title>
      <link>https://blog.tonystudio.ml/2018/11/06/FFmpeg/</link>
      <guid>https://blog.tonystudio.ml/2018/11/06/FFmpeg/</guid>
      <pubDate>Tue, 06 Nov 2018 00:11:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;最近研究音视频的下载, 用上FFMpeg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39d
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>最近研究音视频的下载, 用上FFMpeg</p></blockquote><p><img src="https://user-images.githubusercontent.com/16996753/53394471-5c8e6380-39da-11e9-9d32-b5507474259b.png" alt="image"></p><h1 id="mp4分割">mp4分割</h1><hr><p>由于iCloud的上传只能上传15min以内的,所有有了这个需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">startTime=0</span><br><span class="line">endTime=0</span><br><span class="line">length=11530</span><br><span class="line">i=0</span><br><span class="line">file=$1</span><br><span class="line">while [ $endTime -le $length ]; do</span><br><span class="line"><span class="meta">#</span>statements</span><br><span class="line">    i=$[$i+1]</span><br><span class="line">    endTime=$[$startTime+840]</span><br><span class="line">    ./ffmpeg -ss $startTime -to $endTime -accurate_seek -i $1 -codec copy -avoid_negative_ts 1 $&#123;file%.*&#125;$i.mp4</span><br><span class="line">    startTime=$[endTime]</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="flv2mp4">FLV2MP4</h1><hr><pre><code class="language-shell">for file in *.mp4do    ./ffmpeg -i $file ${file%.mp4}v2.mp4done</code></pre><h1 id="m3u8-dl">m3u8-dl</h1><hr><p>不想用工具的时候可以凑合使用, 更加推荐 you-get , YouTube-dl等更加好的工具 , 或者使用gui工具, 如Downie3</p><pre><code class="language-shell">ffmpeg -i &quot;http://video.qqdaiguaxitong.com:8091/9720180601/972018063017/650kb/hls/index.m3u8&quot; -c copy video1.mp4</code></pre><p>这种方法虽然能用 但是很耗时间</p><hr><p>文中所有代码如下</p><blockquote><p>Source: <a href="https://github.com/CoderTonyChan/shell-repo" target="_blank" rel="noopener">CoderTonyChan/shell-repo</a></p></blockquote><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p><p>Source: <a href="https://github.com/CoderTonyChan/shell-repo" target="_blank" rel="noopener">CoderTonyChan/shell-repo</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/11/06/FFmpeg/#disqus_thread</comments>
    </item>
    
    <item>
      <title>wireshark 入门教程</title>
      <link>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/</link>
      <guid>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/</guid>
      <pubDate>Wed, 05 Sep 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（快速分析网络包），和Wireshare。之前写过一篇介绍tcpdump抓包的入门文章，和tcpdump相比，
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（快速分析网络包），和Wireshare。之前写过一篇介绍tcpdump抓包的入门文章，和tcpdump相比，Wireshark提供丰富的GUI交互，而且能分析所有的网络协议，关键还是免费的，掌握好Wireshark就能应付绝大部分需要分析网络协议的场景了。</p></blockquote><h1 id="安装初识">安装初识</h1><hr><p>Wireshark提供Mac版本，可以从官网下载安装，到这篇博客为止最新版本应该是2.2.1。安装好之后打开的第一个界面如下：</p><img width="500" alt="6acb6917-0d00-4673-ac57-f6200a853865" src="https://user-images.githubusercontent.com/16996753/53470399-827c3c80-3a9c-11e9-8bb5-37f44cfbd35b.png"><p>Wireshark在第一个界面就把当前系统所包含的网卡列出来了，直接点击任何一项就可以开始监听通过该网卡的所有网络流量。<br>当我们把iPhone通过usb连接macbook时，Wireshark并不能直接监听通过iPhone的网络流量，需要通过一个系统程序在我们的Mac系统上，建立一个映射到iPhone的虚拟网卡，在terminal中输入如下命令即可：</p><img width="500" alt="10f399c5-1527-46eb-adcf-be4d4a8425f5" src="https://user-images.githubusercontent.com/16996753/53470411-8c9e3b00-3a9c-11e9-8180-1dc405b7fa17.png"><p>格式是rvictl -s [设备udid]，设备的udid可以通过itunes或者itools获取，执行命令之后Wireshark能立即识别新增加的rvi0网卡，也就是上图中高亮的部分，双击rvi0这一项，Wireshare即进入如下界面开始监听iPhone设备上的所有流量。</p><img width="500" alt="cd63d159-765f-437f-974f-19a17e3c05f6" src="https://user-images.githubusercontent.com/16996753/53470427-97f16680-3a9c-11e9-8ac6-49af3ac74981.png"><p>此时，启动iPhone上的任意App，只要有网络流量产生，对应的网络包都会在Wireshark上述的列表中展示出来。<br>Wireshark的流量监控界面主要分为四块，由上至下第一部分（标号为1）是工具栏，通过工具栏我们可以控制监控的行为，比如开始抓包，停止抓包，重新开始抓包，以及在包之间跳转等等。工具栏的底部有个输入框，可以让我们手动输入包的过滤条件，这部分对于熟练使用Wireshark抓包非常重要，后面会详细的讲解。<br>第二部分（标号为2）是历史流量包列表展示界面，这里展示的是从抓包开始，所有通过我们iPhone设备的流量。列表界面不同的包有不同的颜色，Wireshark通过颜色来区分包的类型，对于特定场景快速识别目标流量非常有用，后面也会专门讲解。<br>第三部分（标号为3）是单个包的详细信息展示面板，我们在第二部分选中的网络包在这一部分会将其结构以可阅读的文本形式展示出来，要正确阅读这一部分的信息需要对tcp/ip协议有一定的掌握。<br>第四部分（标号为4）是单个包的二进制流信息展示面板，这一部分展示的信息是包的原始数据，也是一个网络包所包含内容的真实展现，我们在第三部分多选中的协议头，都会在这一部分以同步高亮的形式标记出来。这一部分的展示是为了让我们对包的真实内容做直观的判断，能具体到单个byte。<br>初步认识上述四块主要面板之后，可以尝试开始分析网络包，在开始分析网络包之前，先要对网络包有个大致的概念。</p><h1 id="网络包结构">网络包结构</h1><hr><p>我们最初学习网络协议的时候，无论是OSI七层模型，还是经典的TCP/IP五层结构，都是以下图中的左边部分的形式展示的。</p><img width="500" alt="1b6e7c66-5253-48b7-9b98-291dd966219c" src="https://user-images.githubusercontent.com/16996753/53470437-9cb61a80-3a9c-11e9-85ee-d5645e7af178.png"><p>这是一种经典的分层架构，确实也符合网络协议设计上的思路，但却不能表达网络包真实的包含关系。上图右边部分是我所绘制的一个包结构示意图。在我看来，这种洋葱式的结构更符合网络包的真实形态。Application是最内层的payload，除了Application这一层之外，其他层都是用自己这一层的协议header+所包含那一层的payload。可以用如下公式表示：</p><p>TCP Layer = TCP Header + Application Payload</p><p>IP Layer = IP Header + TCP Payload</p><p>…</p><p>我们分析每个网络包的时候要能理解每一个包它所代表的抽象含义，再进一步将相关联的包串联起来，形成一次完整的网络会话。</p><h1 id="分析包结构">分析包结构</h1><hr><p>对于iOS程序员来说，我们绝大部分的流量分析都集中在HTTP或者基于TCP的socket长连接。从这一层面来说，和我们最贴近的三层是应用层(http)，传输层(tcp or udp)，网络层(ip)。<br>对于应用层来说主要是http协议的学习，对于http request和response格式的阅读，比如下图表示的一个http request包：</p><img width="500" alt="a2873532-9e47-4a03-ab95-45599923129b" src="https://user-images.githubusercontent.com/16996753/53470438-a049a180-3a9c-11e9-920f-c74bca0b946b.png"><p>Packet详情面板以符合http协议的表述，将header中各个field清晰的罗列出来了，阅读起来很方便。<br>传输层我们应用较多的是tcp，这一层的阅读主要是tcp header的学习：</p><img width="500" alt="d7069508-f4e1-4813-b31b-3d91f8636435" src="https://user-images.githubusercontent.com/16996753/53470444-a3dd2880-3a9c-11e9-9c5a-35f5f436b0b9.png"><p>典型的tcp header一般长度为20个字节，将这20个字节逐一学习一遍就可以分析大部分的tcp流量了。<br>网络层的分析主要是针对于IP Header，header结构如下：</p><img width="500" alt="eba25723-c341-44c3-a4fd-7c2730584cbc" src="https://user-images.githubusercontent.com/16996753/53470446-a6d81900-3a9c-11e9-93b1-0b2036865375.png"><p>这其中IP Header第十三个字节各个filed的理解，对于我们分析tcp流量的起始和结束尤其有用，典型的IPV4 Header也是20个字节，梳理一遍就可以分析IP包了。<br>所以对于包结构的分析关键在于三个知识点的学习：http header, tcp header, ip header，这么一看好像也没多少东西 ;)</p><h1 id="使用filter过滤包">使用Filter过滤包</h1><hr><p>使用Wireshark和使用Charles最大的区别在于，Charles只捕获HTTP流量，而Wireshark捕捉的是经过目标网卡所有的流量，流量包可以在几秒内膨胀到难以阅读的数量，所以此时我们需要使用Filter来做包的过滤，Filter规则定的越细，剔除掉的干扰信息就越多，分析起来就越快。</p><p>Wireshark的Filter分为两种，一种为Capture Filter，另一种是Display Filter。</p><p>Capture Filter出现在初始界面，在网卡列表的上方有个输入框，允许我们输入capture filter，一旦输入了特定的capture规则，Wireshark就只捕获符合该规则的流量包了。</p><img width="500" alt="ce1a622b-1312-46c8-a7c4-90f3cc9615da" src="https://user-images.githubusercontent.com/16996753/53470448-a9d30980-3a9c-11e9-9ea5-1b705fea4af2.png"><p>Display Filter出现在流量监控界面，在工具栏的下方有个输入框，允许我们输入display filter，display filter只是从界面上过滤掉不符合规则的包，Wireshark实际上还是监听了这些包，一旦去掉display filter，所有的包又会出现在同一界面。</p><img width="500" alt="33749cab-566e-47e0-8aed-9d516644f1ff" src="https://user-images.githubusercontent.com/16996753/53470454-ad669080-3a9c-11e9-8016-05bd1e5a5e97.png"><p>Capture Filter的规则和我们平常使用tcpdump的filter语法是一致的，比如为了只监控http的流量，我们可以先在初始化界面选中rvi0网卡，再在capture filter输入框里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获HTTP流量</span><br><span class="line">port 80 or port 443</span><br></pre></td></tr></table></figure><p>回车之后Wireshark就开始监控我们iPhone上所有的http和https流量了 ，非常简单，我们还可以使用其他的capture filter来捕获特定的流量，比如想分析DNS解析过程，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获DNS流量</span><br><span class="line">port 53</span><br></pre></td></tr></table></figure><p>比如只想捕获和特定服务器相关的流量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//只捕获和特定主机的流量</span><br><span class="line">host 171.10.191.10</span><br></pre></td></tr></table></figure><p>Display Filter的语法是由Wireshark自定义的，和Capture filter的语法不能混用。比如我们只想看某个主机的流量，可以使用如下Display Filter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr==171.10.191.10</span><br></pre></td></tr></table></figure><p>如果只看http或者https的流量，可以用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == 80 || tcp.port == 443</span><br></pre></td></tr></table></figure><p>更多的语法规则可以查看Wireshark官方文档，Wireshark实际上提供了便捷的UI操作帮助我们来书写Display Filter，在Display Filter输入框的最右边有个Expression按钮，点击之后可以弹出如下界面：</p><img width="500" alt="4af664f7-0694-43c9-807e-1d3f2eb54a11" src="https://user-images.githubusercontent.com/16996753/53470458-b22b4480-3a9c-11e9-81b5-3dd647ea3b39.png"><p>Display Filter的语法本质上是个等是关系描述，我们可以在search当中输入我们感兴趣的协议比如http，再在展开的协议头里选择我们的条件比如http.host，最后设置Relation和Value就可以生成一个Display Filter条件了。</p><h1 id="包颜色规则">包颜色规则</h1><hr><p>Wireshark在大多数时候捕获的包数量都远超我们感兴趣的数量，而且各个连接的包都混杂在一起，为了方便我们识别不同的连接会话，Wireshark默认使用一种着色规则帮助我们来进行包类型区分。</p><p>具体的规则可以通过菜单View-&gt;Coloring Rules…查看，默认规则如下：</p><img width="500" alt="4d3b2980-dfd4-4a1a-9b8b-99dfc1cd8eb1" src="https://user-images.githubusercontent.com/16996753/53470468-b5becb80-3a9c-11e9-9338-4ec6fc8f4bdc.png"><p>这里有个小技巧，如上图所示，我只将我感兴趣的协议包上了色，集中在http，tcp，udp包，这样分析起来更加直观。比如根据上图的规则，tcp三次握手中的Sync包是使用灰色标记的，这样我就可以在下图的包中迅速定位一次tcp连接的开始包位置：</p><img width="500" alt="236e7e35-ab3d-4be1-a911-8844e5187b78" src="https://user-images.githubusercontent.com/16996753/53470472-b8b9bc00-3a9c-11e9-9439-c652a28ac418.png"><p>当然，包的颜色也可以按照自己的视觉习惯进行定制，我个人习惯把Sync包和FIN包设置一个高亮的颜色，方便判断一次HTTP会话的起始和结束。</p><h1 id="流量跟踪">流量跟踪</h1><hr><p>Wireshark默认情况下将不同网络连接的流量都混在一起展示，即使给不同协议的包上色之后，要单独查看某个特定连接的流量依然不怎么方便，我们可以通过Wireshark提供的两种方式来实现这个目标。</p><p>方式一：Follow Stream</p><p>当我们选中某个包之后，右键弹出的菜单里，有个选项允许我们将当前包所属于的完整流量单独列出来，如下图：</p><img width="500" alt="4f0320fb-6bb0-4161-b5f1-8e5789775a6d" src="https://user-images.githubusercontent.com/16996753/53470484-bc4d4300-3a9c-11e9-9a94-80b77723b876.png"><p>Wireshark支持我们常见的四种Stream，TCP，UDP，HTTP，SSL。比如我们选中Follow TCP Stream之后可以得到如下的详细分析输出（样本为监控iPhone手机的流量）：</p><img width="500" alt="44c54654-9f31-4b9e-9db9-8ba21995eef0" src="https://user-images.githubusercontent.com/16996753/53470489-bfe0ca00-3a9c-11e9-82e4-9cec23966158.png"><p>上图中将iPhone和Server之间某次的连接流量完整的呈现出来，包括iPhone发送了多少个包，Server回了多少个包，以及iPhone上行和下行的流量，还提供流量编解码选择，文本搜索功能等。</p><p>方式二：Flow Graph</p><p>Flow Graph可以通过菜单Statistics-&gt;Flow Graph来生成，这样我们可以得到另一种形式的流量呈现：</p><img width="500" alt="fc19eb0d-15fd-42f5-a729-e22c02c22ced" src="https://user-images.githubusercontent.com/16996753/53470491-c2dbba80-3a9c-11e9-911a-f6de53eb1ad2.png"><p>和Follow Stream不同的是我们获取到的是完整的流量，从上图中可以看出从10.136.66.127(我的iPhone手机IP地址)发出的流向多个服务器的网络流量，包括DNS解析和SSL安全握手等。当然我们也可以在上图中下方的操作区域做进一步的过滤，可以使用Display Filter做进一步的流量定位。</p><p>Follow Stream更适合分析针对某一个服务器地址的流量，而Flow Graph更适合分析某个App的整体网络行为，包含从DNS解析开始到和多个服务器交互等。</p><p>其实Statistics菜单下还有更多的图表分析模式，可以根据不同的分析目标来选择，比如Statistics-&gt;HTTP-&gt;Requests可以得到如下按主机分门别类的HTTP请求分析图，和收费的Charles的展示结果类似。</p><img width="500" alt="8bcde133-c012-4262-a785-8a822b7aebc7" src="https://user-images.githubusercontent.com/16996753/53470496-c5d6ab00-3a9c-11e9-9e14-fa60eb62d214.png"><h1 id="https包分析">HTTPS包分析</h1><hr><p>介绍完使用方式再来实际分析下HTTPS的流量。下图是我使用Wireshark在iPhone上抓包知乎App网络请求的结果：</p><img width="500" alt="4af664f7-0694-43c9-807e-1d3f2eb54a11" src="https://user-images.githubusercontent.com/16996753/53470501-c8d19b80-3a9c-11e9-9d83-28b146f1f0c4.png"><p>当我使用Follow TCP Stream之后，一次完整的HTTPS会话流量就被单独过滤出来了，第一步先分析包列表界面。<br>通过高亮颜色找到会话的其实Sync包，继而可以快速的定位到HTTP建立连接之初的tcp三次握手所产生的三个包：</p><p>Sync： iPhone发送Sync。</p><p>Sync+Ack： Server发送Sync+Ack。</p><p>Ack： iPhone Ack。</p><p>三次握手之后是ssl handshake，ssl handshake分为以下几步：</p><p>Client Hello</p><p>这一个包是ssl握手的起始包，客户端（我的iPhone）会携带当前会话所依赖的一些关键信息：使用的tls版本（当前为tls1.2），上次的Session ID（如果可以session重用，就可以避免当前这次的安全握手），客户端所支持的加密算法套件（从下图中可以看出可以从22个suites里面挑选）等。</p><img width="500" alt="9d04e8e8-9b84-4983-a203-3ca05cf9188d" src="https://user-images.githubusercontent.com/16996753/53470507-cbcc8c00-3a9c-11e9-9954-4fd365174e69.png"><p>Server Hello</p><p>Server Hello这个包带上服务器这一端的一些信息，比如Server所选择的tls版本，或者带上可以重用的Session ID避免重新握手，在Client传过来的Cipher Suites当中挑选一个Cipher Suite进行后续的安全通话等。</p><img width="500" alt="88434006-295c-4a12-814b-45f102b8ea3a" src="https://user-images.githubusercontent.com/16996753/53470514-ce2ee600-3a9c-11e9-82a7-eebe4a717f4f.png"><p>Server 下发Certificate</p><p>Server同时会下发自己的Certificate，如下图所示：</p><img width="500" alt="1113cc9c-bd09-4a2d-987c-d7f63df3ea4c" src="https://user-images.githubusercontent.com/16996753/53470519-d129d680-3a9c-11e9-9e56-6589ce9b43f9.png"><p>从包列表界面可以看出，Certificate（大小为2407个bytes）这个包由于超过了1440个字节，被拆成了2个包，所以我们可以在包Info里面看到[TCP segment of a reassembled PDU]，我们使用Wireshark抓包的时候经常会看到reassembled PDU，出现这种情况是因为包太大，超过了MSS，需要拆成两个来发送。<br>接下来几个包是Client和Server基于上面交换的信息协商最后使用的密钥。</p><p>Server Key Exchange</p><p>Client Key Exchange</p><p>Change Cipher Spec</p><p>…</p><p>Send Application Data</p><p>各个包里面所包含的详细内容分析涉及到非对称加密算法的相关知识，这里就不展开了，使用Wireshark可以将整个HTTPS的握手过程非常清晰的展现出来，感兴趣的同学可以阅读这篇文章。<br>当然大部分时候我们需要分析iPhone上HTTPS流量里的具体包内容，Wireshark虽然支持配置RSA私钥，但我们没办法直接获取iPhone设备上各个App所使用的私钥，这种场景下我们一般使用MITM（Man In The Middle）中间人攻击来破解HTTPS包内容，收费工具Charles可以通过代理的方式来实现此功能，免费版抓包工具mitmproxy同样也可以，Charles的使用教程比较多了，后续我们会再写一篇mitmproxy的教程介绍如何使用破解调试HTTPS的流量。<br>结束语</p><p>Wireshark就介绍到这里，现在在iPhone上抓包的方式有很多，有面向所有协议的tcpdump和Wireshark，也有针对HTTP的Charles和mitmproxy，无论使用哪个工具，前提都是我们需要对网络协议有全面的认识，所以在学习使用这些工具的同时，要持续深入的学习网络协议知识。</p><h1 id="抓包例子">抓包例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rvictl -s c85646a786f30eaea5732c806c586f3ed7fae11c</span><br><span class="line">// capture filter</span><br><span class="line">host==59.36.6.53 ||  host==192.168.3.65</span><br><span class="line">// Filter  </span><br><span class="line">ip.addr==59.36.6.53 ||  ip.addr==192.168.3.65</span><br></pre></td></tr></table></figure><h2 id="抓websocket">抓websocket</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471087-8d37d100-3a9e-11e9-8fdb-1a0721f49331.png" alt="wireshark1"></p><h2 id="字节解析器">字节解析器</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471105-9c1e8380-3a9e-11e9-9492-e2a07a796a3d.png" alt="056b5218-f16f-453b-bba8-1b7abdabd7ca"></p><h2 id="完整的https请求">完整的HTTPS请求</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471113-9f197400-3a9e-11e9-9563-0d6cff8695dd.png" alt="6c6f2aba-dc2c-4d1c-886b-eac90941ee1f"></p><h2 id="证书超过1400-做了分包">证书超过1400 做了分包</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471119-a2acfb00-3a9e-11e9-99a1-23438dd9ad8a.png" alt="86e8c06f-4b19-4ee7-a1d2-b02c26e969ce"></p><h1 id="流量跟踪功能测试">流量跟踪功能测试</h1><hr><h2 id="追踪-http流">追踪 HTTP流</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471123-a6408200-3a9e-11e9-9936-ba3f5ee05cfe.png" alt="shark2"></p><h2 id="追踪tcp为http服务的">追踪TCP（为HTTP服务的）</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471128-a9d40900-3a9e-11e9-90b0-dfca3ff79f61.png" alt="tcp"></p><h2 id="追踪ssl-和-tcp一样">追踪SSL （和 TCP一样）</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471131-accef980-3a9e-11e9-8159-2322ac3e67a4.png" alt="09e86bc8-a1ac-49f3-9701-79c6f7d1463c"></p><h2 id="追踪websocket-连接">追踪WebSocket 连接</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471135-b0628080-3a9e-11e9-8857-08576b8ac399.png" alt="00575db6-982e-4f40-9e10-23ac6dc7f6b0"></p><h2 id="websocket的开始和结束">Websocket的开始和结束</h2><p><img src="https://user-images.githubusercontent.com/16996753/53471136-b3f60780-3a9e-11e9-86e9-68f917072b5b.png" alt="websocket"></p><h1 id="wireshark常用过滤规则">wireshark常用过滤规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// GET包</span><br><span class="line">http.request.method == “GET” &amp;&amp; http contains “Host: “</span><br><span class="line"></span><br><span class="line">tcp.len &gt;= 7   指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><span class="line">ip.src eq 10.175.168.182</span><br></pre></td></tr></table></figure><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/09/05/wireshark-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Filza Summary</title>
      <link>https://blog.tonystudio.ml/2018/08/08/ios-Filza/</link>
      <guid>https://blog.tonystudio.ml/2018/08/08/ios-Filza/</guid>
      <pubDate>Wed, 08 Aug 2018 02:18:22 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Filza File Manager 是iOS 系统的一款多功能文件管理器，需要越狱后安装，功能强大，使用简单，可以查看所有文件，是一款真正意义上的iOS 文件管理器，兼容iOS 7~iOS 11 系统，适用于iPhone、iPad、iPod To
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Filza File Manager 是iOS 系统的一款多功能文件管理器，需要越狱后安装，功能强大，使用简单，可以查看所有文件，是一款真正意义上的iOS 文件管理器，兼容iOS 7~iOS 11 系统，适用于iPhone、iPad、iPod Touch。</p></blockquote><hr><h1 id="filza-file-manager简介">Filza File Manager简介</h1><p>Filza File Manager 主要特点：</p><ul><li><p>系统文件管理，读取和修改</p></li><li><p>支持多格式文件查看</p></li><li><p>方便的查看应用目录</p></li><li><p>收藏路径，随时直达</p></li><li><p>文件压缩和解压</p></li><li><p>安装/查看ipa 程序</p></li><li><p>安装/查看deb 插件</p></li><li><p>文件导出和WiFi 传输</p></li></ul><h1 id="插件安装">插件安装</h1><p>Filza 免费即可下载，大家可以到官方源下载最新版本体验，目前已经适配iOS 11 系统。如果你是64位系统，请下载Filza File Manager 64-bit 版本。</p><p>名称：Filza File Manager</p><p>作者：TIGI Software</p><p>大小：21012kB</p><p>版本：3.5.2-4</p><p>价格：完整版$5.99</p><p>语言：英语</p><p>兼容：iOS 7~iOS 11</p><p>官方源：<a href="http://tigisoftware.com/cydia/" target="_blank" rel="noopener">http://tigisoftware.com/cydia/</a></p><p>首次安装Filza File Manager ，需要安装多个依赖。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608689-c25b3500-3bfe-11e9-9821-42a01e2d0768.png" alt="image"></p><h1 id="功能介绍">功能介绍</h1><p>Filza 功能非常丰富，下面小编给大家简单介绍一下。</p><h2 id="文件查看和管理">文件查看和管理</h2><p>Filza 主打文件管理功能，可以读取手机内的所有文件，包含系统目录，Filza 支持多种格式的文件查看。<br><img src="https://user-images.githubusercontent.com/16996753/53608715-d69f3200-3bfe-11e9-9c3d-882474c2959e.png" alt="image"></p><p>你可以预览、查看、移动、修改、删除或者分享文件，给你电脑般的体验。解压和压缩文件也变得非常简单。<br><img src="https://user-images.githubusercontent.com/16996753/53608718-d99a2280-3bfe-11e9-8c08-dcea4b5bb5d7.png" alt="image"></p><p>移动文件，非常方便。编辑状态选择文件后，点击移动，会弹出提示。<br><img src="https://user-images.githubusercontent.com/16996753/53608724-ddc64000-3bfe-11e9-9b88-24781c4bd422.png" alt="image"></p><p>只需在你想移动到的文件夹点击一下粘贴按钮，文件就移动完成了。<br><img src="https://user-images.githubusercontent.com/16996753/53608728-e0289a00-3bfe-11e9-8983-a04478c7ba15.png" alt="image"></p><p>通过一些文件的修改或者替换，你可以实现很多内容，例如替换字体，替换提示铃声等等。</p><p>如下图所示为导入的铃声，可以预览或者删除。路径：</p><p>/private/var/mobile/Media/iTunes_Control/Ringtones<br><img src="https://user-images.githubusercontent.com/16996753/53608734-e4ed4e00-3bfe-11e9-8767-a0ec844c056e.png" alt="image"></p><p>搜索功能，可以帮你快速找到想要的文件，并定位到路径。点击搜索结果右上角的箭头，可以快速打开文件所在的位置。可以在根目录或者当前文件夹搜索。<br><img src="https://user-images.githubusercontent.com/16996753/53608740-e880d500-3bfe-11e9-90de-fbeb1a0dab7c.png" alt="image"></p><p>显示路径，当你打开一个文件夹，点击一下标题栏。<br><img src="https://user-images.githubusercontent.com/16996753/53608746-eb7bc580-3bfe-11e9-84d5-7dbc4260197f.png" alt="image"></p><p>就会当前文件夹显示路径，可以复制。</p><p>标签管理，点击底部的标签按钮，可以打开多页面，就像Safari 浏览器一样的多页面方式的管理，方便文件整理。<br><img src="https://user-images.githubusercontent.com/16996753/53608753-efa7e300-3bfe-11e9-9983-93155b5cf210.png" alt="image"></p><p>在多页面切换界面，底部按钮可以快速直达App 管理器，和音乐库管理器。</p><h1 id="善用收藏夹">善用收藏夹</h1><p>打开收藏夹，你可以快速到达特定的路径。点击右上角“+”号，你可以将当前的路径，添加到收藏夹，方便快速打开。</p><p>Filza 内置了一些收藏夹内容，例如App 管理器。<br><img src="https://user-images.githubusercontent.com/16996753/53608761-f8001e00-3bfe-11e9-8c94-ef257e8dad1c.png" alt="image"></p><p>App 管理器可以快速打开App 主目录，你可以打开每个App 的文件，查看详细内容，非常方便。<br><img src="https://user-images.githubusercontent.com/16996753/53608763-f9c9e180-3bfe-11e9-9a26-ff64c76e3296.png" alt="image"></p><p>Filza 内置回收站功能，你删除的文件可以在回收站内查看，以免误删文件。</p><h1 id="安装ipa-程序">安装IPA 程序</h1><p>Filza 内置ipa 安装和查看功能，使用Filza ，可以很方便的安装ipa 文件。</p><p>例如我们QQ中的ipa 文件，选择使用其他应用打开，拷贝到Filza。<br><img src="https://user-images.githubusercontent.com/16996753/53608766-ffbfc280-3bfe-11e9-99ed-b14dbd5e8305.png" alt="image"></p><p>在Filza 中打开ipa 文件，点击右上角的安装，即可快速安装。稍等片刻，返回桌面就会看到应用已经安装了。<br><img src="https://user-images.githubusercontent.com/16996753/53608768-03ebe000-3bff-11e9-9be1-eac0cc26c2d7.png" alt="image"></p><p>你也可以解压ipa 安装包，查看详细内容。例如查看info.plist 文件。<br><img src="https://user-images.githubusercontent.com/16996753/53608776-0817fd80-3bff-11e9-8ea0-09b3d2a3364e.png" alt="image"></p><p>在info.plist 文件可以轻松的找到应用的URL Schemes。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608779-0bab8480-3bff-11e9-924f-7dce642915cb.png" alt="image"></p><h1 id="安装deb-文件">安装DEB 文件</h1><p>Filza 也支持deb 格式文件查看和安装，我们可以很方便的安装deb 插件。</p><p>例如一些没有上传到源的deb 包，例如在Cyida 无法打开的特殊情况，我们使用Filza 来安装修补插件，可以解决很多问题。</p><p>首先需要将deb 包拷贝到Filza ，然后点击打开，点击右上角的安装。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608788-12d29280-3bff-11e9-8297-4b68e1c47699.png" alt="image"></p><p>你会看到安装进度和显示。安装完毕，如果插件是需要注销才能生效的类型，请点击右上角的注销，注销设备。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608792-16661980-3bff-11e9-8745-dae8df20bfdb.png" alt="image"></p><p>打开Cydia ，在已安装→最近里面，可以看到刚刚安装的插件。值得注意的是，插件需要在Cydia 中才能卸载。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608795-1a923700-3bff-11e9-834b-7331e31f3860.png" alt="image"></p><h1 id="文件导出和wifi-传输">文件导出和WiFi 传输</h1><p>Filza 拥有方便的文件导出功能，你可以将文件以邮件发送，或者使用其他App打开进行导出。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608799-1e25be00-3bff-11e9-96a6-665c9339f1d1.png" alt="image"></p><p>Filza 支持Web 服务，进入设置，启动WebDAV 服务。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608803-2120ae80-3bff-11e9-9cb9-e45c2632a19b.png" alt="image"></p><p>在同一网络的情况下，在电脑浏览器上输入地址，可以打开文件进行共享，实现在电脑上查看手机所有文件。<br><img src="https://user-images.githubusercontent.com/16996753/53608807-241b9f00-3bff-11e9-9c5f-1a4341cb7095.png" alt="image"></p><p>你可以直接下载 /重命名 / 删除文件。在没有数据线的情况下，导出文件也变得非常简单。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608810-28e05300-3bff-11e9-91e7-f852ccde9a10.png" alt="image"></p><h1 id="丰富的设置">丰富的设置</h1><p>Filza 的设置非常丰富，你可以根据自身情况进行自定义。<br><img src="https://user-images.githubusercontent.com/16996753/53608815-2e3d9d80-3bff-11e9-96fe-c32c092fd980.png" alt="image"></p><p>例如文件显示，文件关联，或者文件查看器。<br><img src="https://user-images.githubusercontent.com/16996753/53608817-30076100-3bff-11e9-9a62-3eea81f34b99.png" alt="image"></p><p>你也可以对文件夹进行进行属性修改。在编辑状态选中文件夹，更多→属性，就可以修改了。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608823-33025180-3bff-11e9-876c-d0ae55a13be8.png" alt="image"></p><h1 id="使用小结">使用小结</h1><p>iOS 系统没有文件管理器，也无法查看系统文件。越狱后，我们安装Filza File Manager，可以实现电脑版的文件管理功能。</p><p>Filza 可以说是非常强大：</p><ul><li><p>方便的文件管理系统</p></li><li><p>多格式文件查看或编辑</p></li><li><p>内置ipa /deb 安装器，可以轻松查看和安装ipa /deb 文件</p></li><li><p>便捷的文件移动/复制方式</p></li><li><p>支持搜索功能，快速找到想要的文件</p></li><li><p>App管理器，快速找到App 文件目录</p></li><li><p>支持Web 服务，方便的文件导入和导出</p></li></ul><p>有了Filza ，可以突破系统限制，轻松的完成很多事情。当然，对于系统文件，如果你不是那么熟悉，建议不要轻易删除或者修改，以免出错。</p><p>篇幅有限，文章仅仅介绍了Filza 的部分功能，更多使用技巧欢迎留言分享。</p><p>越狱后，有些插件是必须安装的，Filza 就是必备工具之一。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/08/08/ios-Filza/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Flex Summary</title>
      <link>https://blog.tonystudio.ml/2018/08/06/ios-flex/</link>
      <guid>https://blog.tonystudio.ml/2018/08/06/ios-flex/</guid>
      <pubDate>Sun, 05 Aug 2018 16:15:22 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Flex 3 是iOS 系统的一款修改工具，需要越狱后安装。Flex 3 功能强大，使用简单，可以让用户修改iOS 系统功能，实现系统功能自定义；修改App 应用程序，或者去除广告，或者增强App 体验等，兼容iOS 11 系统。&lt;/p&gt;
&lt;/bl
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Flex 3 是iOS 系统的一款修改工具，需要越狱后安装。Flex 3 功能强大，使用简单，可以让用户修改iOS 系统功能，实现系统功能自定义；修改App 应用程序，或者去除广告，或者增强App 体验等，兼容iOS 11 系统。</p></blockquote><hr><h1 id="flex-3介绍">Flex 3介绍</h1><p>Flex 3 主要特点：</p><ul><li>修改系统功能</li><li>修改应用程序</li><li>云端补丁库，免费下载使用</li></ul><h1 id="功能介绍">功能介绍</h1><hr><h2 id="脚本使用">脚本使用</h2><hr><p>Flex 3 通过添加补丁来工作。打开Flex 3 ，有三个分类：</p><p>我的补丁：存放所有已添加补丁</p><p>云端补丁：云端补丁库</p><p>仪表盘：插件信息，个人账户等<br><img src="https://user-images.githubusercontent.com/16996753/53608155-a787c100-3bfc-11e9-9ac0-885b90207d25.png" alt="image"></p><p>首页是我的补丁列表，这里存放的是你已经下载的所有补丁。可以自行选择开启或者关闭补丁，以颜色深浅区分。顶部点击编辑，可以对补丁进行排序。点击“+”号可以新建补丁。App 补丁会显示相应App 图标，需要该应用已经安装。系统补丁则显示默认手机图标。向左滑动，可以点击删除补丁。</p><p>点击底部云按钮，进入云端补丁，有四个分类：</p><p>Installed：本机已经安装的应用程序，点击即可查看相关补丁</p><p>Recent：最近上传到云端的补丁</p><p>Trending：流行的补丁</p><p>Popular：热门补丁</p><p>Search：搜索补丁</p><p><img src="https://user-images.githubusercontent.com/16996753/53608163-b2425600-3bfc-11e9-8cf0-c6990f3400b7.png" alt="image"></p><p>例如墨迹天气，点击即可查看App相关补丁，你可以查看补丁详细信息，也可以立即获取。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608168-b66e7380-3bfc-11e9-9ca6-6d4fbe06f32d.png" alt="image"></p><p>补丁详细介绍页面标注了补丁的作者，描述（Description）补丁的用处，补丁适配App的版本，以及更新日期，补丁使用者的评论（comments），以及版本信息。如果补丁适合，点击GET即可下载。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608179-bcfceb00-3bfc-11e9-93fc-c5fe9684a4a9.png" alt="image"></p><p>你下载的补丁会出现在“我的补丁”里面，打开开关，补丁就生效了。可以实现补丁介绍的效果，如图所示的墨迹天气优化补丁，当你打开应用你会发现顿时清爽了。你也可以查看或者编辑补丁。</p><p>App补丁无需注销，立即生效<br><img src="https://user-images.githubusercontent.com/16996753/53608186-c25a3580-3bfc-11e9-906c-d9e82a397a65.png" alt="image"></p><p>系统相关的补丁，当你打开或者关闭的时候，需要注销才能生效。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608189-c5552600-3bfc-11e9-808d-66d691441cd8.png" alt="image"></p><p>系统补丁开启/关闭需要注销生效</p><p>你可以在云端寻找适合自己的补丁，搜索能快速寻找你需要的补丁。国内anton_j 、5iFlex、iBreak 等作者制作的补丁相当出色，介绍也非常详细。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608194-c9814380-3bfc-11e9-94cb-bc7c8328caf8.png" alt="image"></p><p>在云端补丁的Installed分类，你可以找到SpringBoard（桌面）和System Wide （全系统）相关的补丁。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608197-cc7c3400-3bfc-11e9-846d-ea5cbb1bc8f5.png" alt="image"></p><p>这里的补丁可以修改系统功能，如下图所示。值得注意的是，使用系统相关补丁前，请仔细查看补丁说明以及兼容性，看一下评论。一些不兼容的补丁，可能会引起问题。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608201-cf772480-3bfc-11e9-9df1-d7f034dbae02.png" alt="image"></p><p>通过云端补丁库，即使你不会制作补丁，下载安装大神们已经制作好的补丁，也能享受Flex 3 的功能。</p><p>值得注意的是：</p><p>下载补丁前请自行阅读说明</p><p>App 补丁请仔细检查已安装版本是否匹配补丁要求，版本不一致会造成补丁无效</p><p>系统补丁请仔细核对是否兼容当前手机系统，以免出现问题</p><p>在仪表盘界面，你可查看Flex 3 的更新日志，登录账号，购买升级等等。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608225-d736c900-3bfc-11e9-83d9-5a8d53734c87.png" alt="image"></p><p>已经下载的Flex 3补丁，会以patches.plist 合集的方式存在，你可以将补丁合集plist 文件导出备份，以免补丁丢失。</p><p>Flex 3 补丁路径</p><p>/var/mobile/Library/Application Support/Flex3</p><h1 id="配合app-admin-使用">配合App Admin 使用</h1><p>有了Flex 3，可以实现一些App 去除广告、获得额外功能。</p><p>但是有时候，已安装的App 版本和补丁要求不一致，我们可以使用App 降级插件，在App Store 降级应用，使用旧版，这样就能适合补丁使用。</p><p>名称：App Admin</p><p>作者：UnlimApps inc</p><p>大小：822kB</p><p>版本：目前1.0r-101</p><p>价格：免费</p><p>语言：英语</p><p>兼容：iOS 11</p><p>插件源：<a href="http://btea.unlimapps.com/" target="_blank" rel="noopener">http://btea.unlimapps.com/</a></p><p>App Admin 目前在测试中，兼容iOS 11 系统，主要作用：</p><p>App Store 安装任意版本软件</p><p>查看软件旧版本ID 号</p><p>App Admin 使用非常简单，安装后，打开App Store 即可使用。例如你已经下载过的软件，会显示云朵符号，点击云朵，弹出菜单。其中：</p><p>Continue：直接下载最新版本</p><p>Downgrade：降级软件版本<br><img src="https://user-images.githubusercontent.com/16996753/53608233-def66d80-3bfc-11e9-9c94-55a9ba3fed2f.png" alt="image"></p><p>我们选择Downgrade，就会弹出该软件的版本号列表，这里有尚在提供的所有旧版。</p><p>选择你需要安装的任意版本，点击即可下载。等待片刻，旧版软件就安装到手机了，非常简单轻松。<br><img src="https://user-images.githubusercontent.com/16996753/53608237-e1f15e00-3bfc-11e9-9ad3-664e8ff0e1a5.png" alt="image"></p><p>App Admin 支持屏蔽应用更新，长按更新按钮弹出菜单，选择“Block All Updates”，应用将不会出现在更新列表。在更新列表，点击左上角的齿轮标志，进入App Admin 设置界面。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608263-f897b500-3bfc-11e9-90bc-cd205df73193.png" alt="image"></p><p>App Admin 设置界面可以管理屏蔽更新的应用，或者一些开关的控制。已经屏蔽更新的应用，可以在管理列表内删除。</p><p><img src="https://user-images.githubusercontent.com/16996753/53608268-fcc3d280-3bfc-11e9-8b81-31781daa1d9d.png" alt="image"></p><h1 id="一些补丁示例">一些补丁示例</h1><p>说了这么多，Flex 3 有什么强大之处呢？为什么要安装Flex 3 呢？下面介绍一些实用的补丁，或许是你安装Flex 3 的吸引力。</p><h2 id="去广告补丁">去广告补丁</h2><p>Flex 3 通过修改App实现去除App 广告，例如一些广告比较凶猛的观影工具，使用Flex 3 可以轻松解决，给你一个清爽的体验。<br><img src="https://user-images.githubusercontent.com/16996753/53608292-19f8a100-3bfd-11e9-91c7-b25e3e8bd43a.png" alt="image"></p><p>使用小结</p><p>Flex 3 是一款功能强大的iOS 修改器，通过自行修改变量、参数及函数等等，可以实现很多功能，例如去除广告，增强App体验，带来更多功能等。如果你会编写补丁，可以自行修改。即使你不会编写，你也可以从云端下载补丁，享受Flex 3 带来的乐趣。</p><p>有时候，无需安装插件，一个小小的补丁就可以搞定，方便简单。</p><p>注意事项：</p><p>下载补丁前请仔细阅读说明，观看使用评论</p><p>一些历史悠久的补丁一般都会失效</p><p>Installed 列表并不保证显示所有已经安装的应用，部分应用会无显示</p><p>使用App 补丁前请仔细检查已安装版本是否匹配补丁要求，版本不一致会造成补丁无效</p><p>系统补丁请仔细核对是否兼容当前手机系统，以免出现问题</p><p>在云端补丁库，部分应用或许没有任何补丁</p><p>云端补丁可能会因为部分原因下架，例如一些破解补丁，如果遇到好的补丁，请及时下载</p><p>篇幅有限，文章仅仅简单的介绍了Flex 3的部分功能，希望对新手朋友有帮助吧，更多使用技巧欢迎留言分享。</p><p>越狱后，有些插件是必须安装的，Flex 3  会是您的必备工具之一吗？</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/08/06/ios-flex/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WWDC 2018</title>
      <link>https://blog.tonystudio.ml/2018/06/05/WWDC-2018/</link>
      <guid>https://blog.tonystudio.ml/2018/06/05/WWDC-2018/</guid>
      <pubDate>Mon, 04 Jun 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;一年一度的 WWDC（苹果全球开发者大会）于北京时间 6月5日 凌晨1点开幕。废话不多说，来看看这次WWDC 都有哪些亮点吧!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ios-12-和-arkit-20&quot;&gt;iOS 12 和 ARKit 
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>一年一度的 WWDC（苹果全球开发者大会）于北京时间 6月5日 凌晨1点开幕。废话不多说，来看看这次WWDC 都有哪些亮点吧!</p></blockquote><h2 id="ios-12-和-arkit-20">iOS 12 和 ARKit 2.0</h2><blockquote><p>关键词：官方防沉迷最为致命</p></blockquote><h3 id="ios-12">iOS 12</h3><p>iOS 12 相较于 iOS 11 并没有太多UI上的变动，刚更新完 bate 版本的 iOS 12，完全感觉不到这是个新系统。</p><p>iOS 12 主要是对安全和性能的优化，iOS 12 在旧设备上的运行速度比 iOS 11更块，程序加载速度快了一倍。（PS：看来苹果并没有放弃旧设备）</p><p><img src="https://cdn.mos.cms.futurecdn.net/RdxhPVv8fAyM6oHsRgF6dH-650-80.png" alt=""></p><h3 id="arkit-20">ARKit 2.0</h3><p>Apple 与 皮克斯 合作开发了一种用于共享AR内容的新文件格式，新的 AR 格式名为 USDZ。</p><p>作为一个含着金苹果出生的新生儿，USDZ 一开始就得到了 Adobe Creative Cloud （包括 Photoshop CC、InDesign CC、Illustrator CC、Dreamweaver CC、Premiere Pro CC）套件的支持。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-10.jpg" alt=""></p><p>同时，面向开发者的开发套件 ARKit 则升级到了二代，主要提升了面部跟踪、渲染能力、3D 探测和共享体验等能力。</p><p>随后展示了一款名为 Measure 的 App，可使用AR查看物品大小。</p><p><img src="https://cdn.mos.cms.futurecdn.net/4tbGCxGUGsH9VwSLsfMDK5-650-80.png" alt=""></p><p>最后为了演示新的 AR 能力和效果，苹果请来了乐高的创意总监来捧场。这是一个真实的乐高积木建筑物为基础，最多四个人可以用苹果 AR 应用进行游戏，可以在真实环境中模拟出各种虚拟的形象和建筑。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-9.jpg" alt=""><br><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-11.jpg" alt=""></p><h3 id="相册优化">相册优化</h3><p>iOS 12 的相册将大大提升搜索性能，系统不仅会提出搜索建议，还会帮你按主题整理照片。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-13.jpg" alt=""></p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-14.jpg" alt=""></p><h3 id="siri变得更聪明">Siri变得更聪明</h3><p>iOS 12 中，苹果为 Siri 提供了更加高效的操作，让它可以操作各个应用内部的功能，并且能在锁屏界面建议用户下一步的行动。</p><p>苹果还发布了一款名为「Shortcuts」的应用，它允许用户自定义 Siri 搜索指令，支持通过拖拽来快速编辑指令，同时还提供了一个指令库供用户下载现成的命令，就像是为 Siri 打造的 Workflow 自动化工具。</p><p><img src="https://cdn.sspai.com/2018-06-04-Artboard.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>看到这里，相比熟悉苹果的朋友大概明白了，Siri 的本次改进，很可能是源于它收购的效率神器 Workflow，堪称一个用 Siri 唤醒的 Workflow。</p><h3 id="原生应用大更新">原生应用大更新</h3><p>iOS 12 中，不少原生应用都得到了更新。</p><ul><li>iBooks 更名为 <strong>Apple Books</strong>，采用类似 App Store 的新界面设计。</li><li>新闻应用（News）在 iPad 上新添加了侧边栏，方便浏览，也突出策划内容。</li><li>语音备忘录现在支持 iCloud 了</li><li>股市的界面重构，可以看到股票全天走势，并打通 News 应用，方便看财经新闻；</li></ul><h3 id="carplay-开放了">CarPlay 开放了</h3><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-21.jpg" alt=""></p><p>CarPlay 变得更加开放了，曾经被苹果狠心抛弃的 Google Maps 和 Google 的干儿子地图 Waze，以及来自东方的神秘力量高德地图成为首批 CarPlay 支持的第三方导航，从此“志玲姐姐为您导航”将可以常伴林肯领航者车主左右，中国梦和美国梦一起实现。</p><h3 id="防手机沉迷-划重点">防手机沉迷 - 划重点！</h3><p>本次 iOS 12 的重点就是：<strong>防沉迷！</strong></p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-25.jpg" alt=""></p><p>鉴于手机上瘾成为了一个社会议题，今年 Google 和苹果都不约而同地将“防沉迷”加入到了系统更新当中：</p><ul><li>**Do Not Disturb（别吵我）**功能将关掉手机的视觉通知，在夜深人静想起她或梦见她的时候，来了邮件也不会亮屏刺破夜的静谧和黑暗</li><li>Deliver Quietly（安静通知）则是将消息推送静默化、不显示在锁屏，也不出声，也不会在 app 右上角标红</li><li><strong>Grouped Notifications（分组通知</strong>）可以将某一类型的通知归组，微信群聊消息不再有轰炸的感觉</li><li>**Reports（应用报告）**可以用周报告的形式，告诉用户用什么应用最多，哪个应用通知最多，每天起床第一个打开的是什么应用等等</li><li><strong>App Limits（应用限制</strong>）可以给某个应用规定使用时间，当然这不是强制性的，用户可以突破限制继续“吃鸡”</li><li><strong>Allowances（零用钱？）</strong> 是家长限制孩子使用应用的新特性</li></ul><h3 id="imessage-和-feactime">iMessage 和 FeacTime</h3><p>Animoji 新增了 4 个新表情（幽灵，考拉，老虎和霸王龙），用户还可以为自己量身定做 Animoji ，并用到各种场景——这就是全新的 Memoji 技术</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-26.jpg" alt=""></p><p><img src="https://cdn.sspai.com/2018/06/05/67b6fba3d36bdd7caf09bec94dcb157b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>iOS 版 <strong>FaceTime</strong> 迎来了群聊功能，最多支持 32 人同时聊天，成员可以随时加入或离开聊天。聊天界面用瀑布流的形式呈现，正在说话的成员窗口会自动放大。macOS 版 FaceTime 同样也得到了更新。</p><p><img src="https://cdn.sspai.com/2018-06-04-Screen%20Shot%202018-06-05%20at%202.00.58%20AM.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><h2 id="tvos">tvOS</h2><blockquote><p>关键词：优化试听体验</p></blockquote><p>tvOS 今年的变化比较小，更新主要集中在了影视资源以及细节优化上。</p><p>Apple TV 4K 将支持杜比全景声和杜比视界，让你在家里也能获得电影院般的听觉体验。</p><p><img src="https://cdn.sspai.com/2018-06-04-Screen%20Shot%202018-06-05%20at%202.26.21%20AM.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><h2 id="watchos-5">watchOS 5</h2><blockquote><p>关键词：运动进行到底</p></blockquote><p>随着 Apple Watch 成长的，还有它的操作系统 watchOS，这一次 watchOS 升级到了第五代。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-31.jpg" alt=""></p><p>Apple Watch 的功能朝着运动的方向发展，此次 watchOS 5 的更新，也以运动为主。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-35.jpg" alt=""></p><p>watchOS 5 的一个小惊喜是让 Apple Watch 成为了对讲机，这个应用名为 Walkie Talkie（对讲机）。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-38.jpg" alt=""></p><p>Apple Watch 早就支持了 Apple Pay，不过在通知上，Apple Watch 显然可以做得更多，比如值机和给滴滴师傅付款评分，手表不再只是个通知器，也能做些轻交互。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-51.jpg" alt=""></p><p>还有 Apple Watch 可以浏览网页了~</p><h2 id="macos-mojave">macOS Mojave</h2><blockquote><p>关键词：夜间模式、全新的App Store</p></blockquote><p><img src="https://cdn.sspai.com/2018-06-04-macOS01.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>对于大多数人来说，macOS 更新最大的悬念，是新系统叫什么名字。</p><p>答案是：<strong>macOS Mojave</strong>，Mojave 中译名是莫哈韦沙漠，位于在美国加利福尼亚西南，出于洛杉矶和拉斯维加斯之间。</p><p>在 Mojave 这版系统中，苹果加入了一套适应暗光环境下使用的夜间主题，并对 Mac App Store 的交互界面进行了重塑，整个系统的改变甚至连库克都称为是苹果的一次 “巨大的跨越”。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-89.jpg" alt=""></p><h3 id="夜间模式-动态桌面">夜间模式 / 动态桌面</h3><p>不少用户会在暗光环境下使用电脑，即便是将屏幕亮度调到最低，也难免会因为白底色为主的主题而感到刺眼。在这次更新中，macOS Mojave 新增加了一套暗色主题，不同于目前将菜单和程序栏调成暗色的选项，新系统上的是一套全局暗色主题，即便是在文件夹、应用里都是以黑色为主色呈现。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-63.jpg" alt=""></p><p>另外，系统可根据时间变化对桌面进行自动调整，日间使用时系统为正常主题；夜间使用时系统则自动切换至暗色模式主题。此时，台下的开发者们爆发出了一阵欢呼，大概是这个主题能够提升程序员朋友夜间加班的幸福感吧。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-63.jpg" alt=""></p><h3 id="智能分类">智能分类</h3><p>macOS 会跟据文件类型和标签对桌面的文件进行自动分类整理，从此再也不用担心满桌面都是文件了。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-82.jpg" alt=""></p><p><img src="https://cdn.sspai.com/2018-06-04-macOS04.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><h3 id="快速查看升级">快速查看升级</h3><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-92.jpg" alt=""></p><p>访达在这次系统上的更新并不多，只是针对图片查看增添了 “图库视图” 功能。通过 “图库视图”，用户可更加便捷快速地浏览到访达文件夹内的图片内容，与此同时功能内部也内置了图片元数据显示窗，用户可以借助数据窗口了解到图片的相关详情，并且可对图片进行快速编辑操作。</p><h3 id="截图录屏操作-类似ios">截图/录屏操作 - 类似iOS</h3><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-93.jpg" alt=""></p><p>此次 macOS Mojave 加入了 “系统级” 的截屏功能，用户也可以在截屏后对截屏图片进行简单的标记。不过实际上，目前不少社交软件其实都已经具备了截图 + 标记的相关功能，且在体验上也相当不错。</p><h3 id="安全权限">安全权限</h3><p>当我们在 iOS 系统上打开刚下载的应用程序时，系统会弹出弹窗，提示是否允许程序访问用户信息和手机硬件。而这次苹果也将相关的安全控制策略从 iOS “搬” 到了 macOS 上，当用户打开某个网址或程序时，系统会弹出 “是否允许访问” 的弹窗以获得用户批准。这也可能是为了呼应最近越发严格的隐私政策。</p><h3 id="在-macos-上运行的几款-ios-程序">在 macOS 上运行的几款 iOS 程序</h3><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-84.jpg" alt=""></p><p>将 iOS 的应用程序搬到 macOS 上运行是不少玩家曾经有过的想法。此次苹果在新版的 macOS 系统上加入了 iOS 端的新闻、股市、家、语音备忘录四个程序，用户可以在桌面系统上通过这几款应用阅读新闻、控制家庭设备等等。</p><p>在发布会的最后，苹果否认了将对 iOS 和 macOS 进行合并的传闻，但考虑到 iOS 平台有非常庞大的应用数量，他们也希望其中的部分应用能来到 macOS。于是苹果在发布会上为大家提前预览了一个准备多年的项目，macOS 将可以使用 iOS 的 UIKit 框架进行开发，以降低开发多平台应用的成本。</p><p><img src="https://cdn.sspai.com/2018-06-04-Screen%20Shot%202018-06-05%20at%203.08.05%20AM.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>比如这次 macOS Mojave 中新增的 4 款应用——News、股票、语音备忘录、家庭——均采用了这种新技术。</p><h3 id="全新的-mac-app-store">全新的 Mac App Store</h3><p><img src="https://cdn.sspai.com/2018-06-04-macOS09.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><p>在 iOS 11 对 Mac App Store 进行了重新设计后，macOS Mojave 也迎来了全新设计的 Mac App Store。新版拥有与 iOS 上 App Store 类似的发现页，里面能看到每日编辑推荐和一些 App 的使用技巧。进入 App 页面后，你可以看到视频预览和与 iOS 类似的评分系统。为了方便用户评分，新版 macOS 还加入了和 iOS 一样的 App 内打分功能。此外，苹果还宣布包括 Office 365 和 Adobe Lightroom CC 在内的一批重量级 App 将在今年稍后登录 Mac App Store。</p><h2 id="结语">结语</h2><p>是的，这次的 WWDC 只有软件，没有新的电子设备发布，没有新 iPad Pro、没有 iPhone SE2、没有带八代酷睿的新 MacBook，唯一能和“硬件”沾上边的就是一个新的彩虹表带。</p><p><img src="https://images.ifanr.cn/wp-content/uploads/2018/06/WWDC-56.jpg" alt=""></p><p>时至今日，苹果生态已经日趋完善了，大概苹果的产品经理们也想不出什么石破天惊的功能让大家 wow 一声了，有的只是细节层面的改进。作为看客和用户，也只能接受这样的现实了。</p><p>对了，那个可以四个人一起玩的乐高积木和 AR 应用，倒是可以考虑买来玩一下，不要一边说没有新东西，一边又对新东西视而不见。</p><p>对于 iOS 开发者来说，macOS 将可以使用 iOS 的 UIKit 框架进行开发是一个值得关注的点。</p><h3 id="参考">参考</h3><ul><li><a href="https://developer.apple.com/videos/play/wwdc2018/101/" target="_blank" rel="noopener">WWDC 2018 Keynote</a></li><li><a href="https://www.techradar.com/news/apple-wwdc-2018-keynote" target="_blank" rel="noopener">Apple WWDC 2018: what’s new? All the announcements from the keynote</a></li><li><a href="http://www.ifanr.com/1043270" target="_blank" rel="noopener">iOS 加入「防沉迷」，macOS 有了暗色主题，今年的 WWDC 重点都在系统上</a></li><li><a href="https://sspai.com/post/44816" target="_blank" rel="noopener">苹果 WWDC 2018：最全总结看这里，不错过任何重点</a></li></ul><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/06/05/WWDC-2018/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTTP/HTTPS 抓包 ---- Thor</title>
      <link>https://blog.tonystudio.ml/2018/05/30/HTTPS-Thor/</link>
      <guid>https://blog.tonystudio.ml/2018/05/30/HTTPS-Thor/</guid>
      <pubDate>Wed, 30 May 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Thor 是一款 iOS 上强大的抓包能手，主要用来在 iOS 上进行网络抓包，是一款开发调试利器，并无隐藏功能，并无隐藏功能，纯、专业、抓包、工具。&lt;br&gt;
下面我们来了解它们的用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;抓包&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Thor 是一款 iOS 上强大的抓包能手，主要用来在 iOS 上进行网络抓包，是一款开发调试利器，并无隐藏功能，并无隐藏功能，纯、专业、抓包、工具。<br>下面我们来了解它们的用法。</p></blockquote><h1 id="抓包">抓包</h1><hr><p>先打开Thor工具→点击蓝色按钮→按钮变为橘红色开始抓包</p><p><img src="https://user-images.githubusercontent.com/16996753/53926766-b1f40000-40bf-11e9-911d-56ddfb620f33.png" alt="image"></p><p>回到某音软件→播放目标视频播放过后→回到Thor工具→点击橘红按钮停止抓包→打开抓包记录后可看到本次抓包的记录</p><p><img src="https://user-images.githubusercontent.com/16996753/53926801-cafcb100-40bf-11e9-866e-0894435d1676.png" alt="image"></p><p>打开这条记录，可以看到这次抓包的全部数据</p><p><img src="https://user-images.githubusercontent.com/16996753/53926806-cf28ce80-40bf-11e9-9990-d93fc17d645e.png" alt="image"></p><h1 id="过滤器">过滤器</h1><hr><p>例如这次我们抓取某音的视频数据中，找出那些目标数据共同的地方</p><p><img src="https://user-images.githubusercontent.com/16996753/53926892-0ac39880-40c0-11e9-97d4-6ef7d9bc2637.png" alt="image"></p><p>回到软件主页面→点击上方的过滤器选择选项→点击“+”→再点击“添加过滤器”</p><p><img src="https://user-images.githubusercontent.com/16996753/53926912-1a42e180-40c0-11e9-8c94-6a6f55e11063.png" alt="image"></p><p>指定“匹配HTTP方法”→选择需要匹配HTTP的方法（可多选）</p><p><img src="https://user-images.githubusercontent.com/16996753/53926928-26c73a00-40c0-11e9-970f-1633bae5c542.png" alt="image"></p><p>指定“包括关键字”→点击“+”添加关键字</p><p><img src="https://user-images.githubusercontent.com/16996753/53926951-43fc0880-40c0-11e9-96fb-985a46acd774.png" alt="image"></p><h1 id="如何分享自己的过滤器">如何分享自己的过滤器</h1><p>这里以QQ为例别人通过QQ分享给你→点击下载→点击“用其他应用打开”→找到“拷贝到Thor”图标点击</p><p><img src="https://user-images.githubusercontent.com/16996753/53926994-655cf480-40c0-11e9-970f-0da09f4ba1f3.png" alt="image"></p><p>进入过滤器预览界面→点击右上角图标→弹出选框点“安装”</p><p><img src="https://user-images.githubusercontent.com/16996753/53927007-6c840280-40c0-11e9-97d7-5ebe2fef2e11.png" alt="image"></p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/05/30/HTTPS-Thor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MacOS/Linux下的串口通信</title>
      <link>https://blog.tonystudio.ml/2018/05/21/MacOS-Linux-Com/</link>
      <guid>https://blog.tonystudio.ml/2018/05/21/MacOS-Linux-Com/</guid>
      <pubDate>Mon, 21 May 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在windows下实现串口通信一般采用串口助手之类的东西来发送和接收信息，而LINUX也有相应的串口助手之类的东西，如xgcom,完全的图形化界面，可以在github下载源码，编译安装。当然LINUX下自然minicom之类的终端，但是使用起来也并不顺手（而且不支持16进制
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在windows下实现串口通信一般采用串口助手之类的东西来发送和接收信息，而LINUX也有相应的串口助手之类的东西，如xgcom,完全的图形化界面，可以在github下载源码，编译安装。当然LINUX下自然minicom之类的终端，但是使用起来也并不顺手（而且不支持16进制的发送和显示）。下面就说说如何不利用额外的工具，直接使用SHELL实现串口的通信。</p><hr><h1 id="检测串口">检测串口</h1><hr><p>在LINUX下首先需要检测串行口驱动是否正常，而串行口设备一般为/dev/ttyS*,如果是USB转串行口的，则为/dev/ttyUSB*，这点只需要在/dev下查看一下即口。</p><p>假设现在连接收的设备的为/dev/ttyUBS0，则可以使用命令来查看串口情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmesg |grep -i ttyUSB0</span><br><span class="line">[68364.967637] usb 3-4: pl2303 converter now attached to ttyUSB0</span><br></pre></td></tr></table></figure><h1 id="设置串口设备">设置串口设备</h1><hr><p>shell的串口设置工具使用stty,是一个用于设置终端行为的工具。stty是linux的核心工具之一，基本LINUX都会有。</p><p>串口有主的设置有下面几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">波特率(e.g. 9600)</span><br><span class="line">数据位(e.g. 8)</span><br><span class="line">停止位(e.g. 1)</span><br><span class="line">效检位(e.g. 无效检位)</span><br></pre></td></tr></table></figure><p>下面使用stty来完成该串口的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo stty -F /dev/ttyUSB0 raw speed 9600 cs8 -parenb -cstopb cread clocal</span><br></pre></td></tr></table></figure><p>为什么是这个样呢？下面逐个来解释一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-F /dev/ttyUSB0     使用-F可以指定设备名</span><br><span class="line">raw                 这是一组设置的组合体,详情可man stty</span><br><span class="line">speed 9600          指定波特率</span><br><span class="line">cs8                 指定数据位</span><br><span class="line">-parenb             无奇偶效检</span><br><span class="line">-cstopb             1停止位(如果为2位，则为cstopb)</span><br><span class="line">cread               允许输入能够接收</span><br><span class="line">clocal              禁止调制解调器的控制信号(不明)</span><br></pre></td></tr></table></figure><h1 id="串口输入与输出">串口输入与输出</h1><hr><p>串口的输入输的输自然是比较简单，只需要将/dev/ttyUSB0当作文件一样，使用重定向或者cat来输入或输出即可。</p><p>对于输出自然不用说了，只需要简单的cat即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>如果没有数据，那么cat就会停在这个地方不动了，如果有数据，那么cat就会源源不断的将内容显示出来。下面主要说说如何输入。</p><p>最简单的的输入方法自然是使用echo命令。echo命令是足够强大的，能够输出各种格式的内容。其中最常见的是输入出文本数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo echo 123 &gt; /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>那么如果我需要输入二进制/八进制/十六进制的数据怎么办？echo自然可以使用-e选项来转换。例如，如果向ttyUSB0中输入一个十六进制的数据”80 8F”，则命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo echo  -en &quot;\x80\x8F&quot; &gt; /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>默认的echo会在后面加上换行符，所以需要-n选项去掉默认加上的换行符，关于这一点可以使用xxd来查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e “\x80\8F” | xxd</span><br></pre></td></tr></table></figure><h1 id="例子测试">例子测试</h1><hr><p>手上有一个Android系统公司的产品, 通过Termux安装了一个ubuntu 32bit. 下面记录他的串口通信. 如何SSH进去不在讨论范围.</p><h2 id="设置">设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stty -F /dev/ttyS1 raw speed 921600</span><br></pre></td></tr></table></figure><h2 id="显示">显示</h2><p>cat 默认是utf8 编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/ttyS1</span><br></pre></td></tr></table></figure><p>显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br><span class="line">?I?</span><br></pre></td></tr></table></figure><p>16进制显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/ttyS1|hexdump -C</span><br><span class="line">cat /dev/ttyS1|hexdump</span><br><span class="line">cat /dev/ttyS1|xxd</span><br><span class="line">cat /dev/ttyS1|od -x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@new55 ~]# echo /etc/passwd | hexdump</span><br><span class="line">0000000 652f 6374 702f 7361 7773 0a64         </span><br><span class="line">000000c</span><br><span class="line">[root@new55 ~]# echo /etc/passwd | od -x</span><br><span class="line">0000000 652f 6374 702f 7361 7773 0a64</span><br><span class="line">0000014</span><br><span class="line">[root@new55 ~]# echo /etc/passwd | xxd</span><br><span class="line">0000000: 2f65 7463 2f70 6173 7377 640a            /etc/passwd.</span><br><span class="line">[root@new55 ~]# echo /etc/passwd | hexdump -C      &lt;== 规范的十六进制和ASCII码显示（Canonical hex+ASCII display ）</span><br><span class="line">00000000  2f 65 74 63 2f 70 61 73  73 77 64 0a              |/etc/passwd.|</span><br><span class="line">0000000c</span><br></pre></td></tr></table></figure><h2 id="输入输出">输入输出</h2><p>根据公司的串口通信协议 可以正常开灯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo  -en &quot;\xAA\x00\x0F\x04\x00\x10\x03\x00\x03\x04\x00\x04\x02\x3A\xCD&quot; &gt; /dev/ttyS1</span><br></pre></td></tr></table></figure><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/05/21/MacOS-Linux-Com/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTTP/HTTPS 抓包 ---- mitmproxy</title>
      <link>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/</link>
      <guid>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/</guid>
      <pubDate>Mon, 30 Apr 2018 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。&lt;br&gt;
mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>mitmproxy是一个支持HTTP和HTTPS的抓包程序，有类似Fiddler、Charles的功能，只不过它是一个控制台的形式操作。<br>mitmproxy还有两个关联组件。一个是mitmdump，它是mitmproxy的命令行接口，利用它我们可以对接Python脚本，用Python实现监听后的处理。另一个是mitmweb，它是一个Web程序，通过它我们可以清楚观察mitmproxy捕获的请求。<br>下面我们来了解它们的用法。</p></blockquote><h1 id="一-准备工作">一、准备工作</h1><hr><p>请确保已经正确安装好了mitmproxy，并且手机和PC处于同一个局域网下，同时配置好了mitmproxy的CA证书。</p><h1 id="二-mitmproxy的功能">二、mitmproxy的功能</h1><hr><p>mitmproxy有如下几项功能。</p><ul><li><p>拦截HTTP和HTTPS请求和响应。</p></li><li><p>保存HTTP会话并进行分析。</p></li><li><p>模拟客户端发起请求，模拟服务端返回响应。</p></li><li><p>利用反向代理将流量转发给指定的服务器。</p></li><li><p>支持Mac和Linux上的透明代理。</p></li><li><p>利用Python对HTTP请求和响应进行实时处理。</p></li></ul><h1 id="三-抓包原理">三、抓包原理</h1><hr><p>和Charles一样，mitmproxy运行于自己的PC上，mitmproxy会在PC的8080端口运行，然后开启一个代理服务，这个服务实际上是一个HTTP/HTTPS的代理。</p><p>手机和PC在同一个局域网内，设置代理为mitmproxy的代理地址，这样手机在访问互联网的时候流量数据包就会流经mitmproxy，mitmproxy再去转发这些数据包到真实的服务器，服务器返回数据包时再由mitmproxy转发回手机，这样mitmproxy就相当于起了中间人的作用，抓取到所有Request和Response，另外这个过程还可以对接mitmdump，抓取到的Request和Response的具体内容都可以直接用Python来处理，比如得到Response之后我们可以直接进行解析，然后存入数据库，这样就完成了数据的解析和存储过程。</p><h1 id="四-设置代理">四、设置代理</h1><hr><p>首先，我们需要运行mitmproxy，命令如下所示：</p><p>启动mitmproxy的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmproxy</span><br></pre></td></tr></table></figure><p>之后会在8080端口上运行一个代理服务，如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460122-fe638e00-3a76-11e9-8be2-12f9f7a85194.png" alt="image"><br>右下角会出现当前正在监听的端口。</p><p>或者启动mitmdump，它也会监听8080端口，命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump</span><br></pre></td></tr></table></figure><p>运行结果如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460127-015e7e80-3a77-11e9-8897-196e4a7c1367.png" alt="image"></p><p>将手机和PC连接在同一局域网下，设置代理为当前代理。首先看看PC的当前局域网IP。</p><p>Windows上的命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>Linux和Mac上的命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>输出结果如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460161-1b985c80-3a77-11e9-9546-bf0cfae6bca5.png" alt="image"></p><p>一般类似10.<em>.</em>.<em>或172.16.</em>.*或192.168.1.*这样的IP就是当前PC的局域网IP，例如此图中PC的IP为192.168.1.28，手机代理设置类似如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460171-29e67880-3a77-11e9-9f8c-d5b3eeb48d5c.png" alt="image"></p><p>这样我们就配置好了mitmproxy的的代理。</p><h1 id="五-mitmproxy的使用">五、mitmproxy的使用</h1><hr><p>确保mitmproxy正常运行，并且手机和PC处于同一个局域网内，设置了mitmproxy的代理，具体的配置方法可以参考官方文档。</p><p>运行mitmproxy，命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmproxy</span><br></pre></td></tr></table></figure><p>设置成功之后，我们只需要在手机浏览器上访问任意的网页或浏览任意的App即可。例如在手机上打开百度，mitmproxy页面便会呈现出手机上的所有请求，如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460202-4a163780-3a77-11e9-95d8-b9e42106c4dd.png" alt="image"></p><p>这就相当于之前我们在浏览器开发者工具监听到的浏览器请求，在这里我们借助于mitmproxy完成。Charles完全也可以做到。</p><p>这里是刚才手机打开百度页面时的所有请求列表，左下角显示的2/38代表一共发生了38个请求，当前箭头所指的是第二个请求。</p><p>每个请求开头都有一个GET或POST，这是各个请求的请求方式。紧接的是请求的URL。第二行开头的数字就是请求对应的响应状态码，后面是响应内容的类型，如text/html代表网页文档、image/gif代表图片。再往后是响应体的大小和响应的时间。</p><p>当前呈现了所有请求和响应的概览，我们可以通过这个页面观察到所有的请求。</p><p>如果想查看某个请求的详情，我们可以敲击回车，进入请求的详情页面，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460218-5601f980-3a77-11e9-9414-88feaead5db0.png" alt="image"></p><p>可以看到Headers的详细信息，如Host、Cookies、User-Agent等。</p><p>最上方是一个Request、Response、Detail的列表，当前处在Request这个选项上。这时我们再点击TAB键，即可查看这个请求对应的响应详情，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460232-60bc8e80-3a77-11e9-8c2f-7c1f2c08b0ed.png" alt="image"></p><p>最上面是响应头的信息，下拉之后我们可以看到响应体的信息。针对当前请求，响应体就是网页的源代码。</p><p>这时再敲击TAB键，切换到最后一个选项卡Detail，即可看到当前请求的详细信息，如服务器的IP和端口、HTTP协议版本、客户端的IP和端口等，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460264-7762e580-3a77-11e9-82ec-39b06b693bd1.png" alt="image"></p><p>mitmproxy还提供了命令行式的编辑功能，我们可以在此页面中重新编辑请求。敲击e键即可进入编辑功能，这时它会询问你要编辑哪部分内容，如Cookies、Query、URL等，每个选项的第一个字母会高亮显示。敲击要编辑内容名称的首字母即可进入该内容的编辑页面，如敲击m即可编辑请求的方式，敲击q即可修改GET请求参数Query。</p><p>这时我们敲击q，进入到编辑Query的页面。由于没有任何参数，我们可以敲击a来增加一行，然后就可以输入参数对应的Key和Value，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460278-83e73e00-3a77-11e9-843d-121fa665bb2c.png" alt="image"></p><p>这里我们输入Key为wd，Value为NBA。</p><p>然后再敲击esc键和q键，返回之前的页面，再敲击e和p键修改Path。和上面一样，敲击a增加Path的内容，这时我们将Path修改为s，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460288-8e093c80-3a77-11e9-9be4-9f70a9519524.png" alt="image"></p><p>再敲击esc和q键返回，这时我们可以看到最上面的请求链接变成了：<a href="https://www.baidu.com/s?wd=NBA%E3%80%82%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2NBA%E5%85%B3%E9%94%AE%E8%AF%8D%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E3%80%82" target="_blank" rel="noopener">https://www.baidu.com/s?wd=NBA。访问这个页面，可以看到百度搜索NBA关键词的搜索结果，如下图所示。</a></p><p><img src="https://user-images.githubusercontent.com/16996753/53460302-98c3d180-3a77-11e9-91b6-38867840cf12.png" alt="image"></p><p>敲击a保存修改，敲击r重新发起修改后的请求，即可看到上方请求方式前面多了一个回旋箭头，这说明重新执行了修改后的请求。这时我们再观察响应体内容，即可看到搜索NBA的页面结果的源代码，如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460305-a5e0c080-3a77-11e9-8433-e3767ba86e20.png" alt="image"></p><p>以上内容便是mitmproxy的简单用法。利用mitmproxy，我们可以观察到手机上的所有请求，还可以对请求进行修改并重新发起。</p><p>Fiddler、Charles也有这个功能，而且它们的图形界面操作更加方便。那么mitmproxy的优势何在？</p><p>mitmproxy的强大之处体现在它的另一个工具mitmdump，有了它我们可以直接对接Python对请求进行处理。下面我们来看看mitmdump的用法。</p><h1 id="六-mitmdump的使用">六、mitmdump的使用</h1><hr><p>mitmdump是mitmproxy的命令行接口，同时还可以对接Python对请求进行处理，这是相比Fiddler、Charles等工具更加方便的地方。有了它我们可以不用手动截获和分析HTTP请求和响应，只需写好请求和响应的处理逻辑即可。它还可以实现数据的解析、存储等工作，这些过程都可以通过Python实现。</p><h2 id="1-实例引入">1. 实例引入</h2><hr><p>我们可以使用命令启动mitmproxy，并把截获的数据保存到文件中，命令如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump -w outfile</span><br></pre></td></tr></table></figure><p>其中outfile的名称任意，截获的数据都会被保存到此文件中。</p><p>还可以指定一个脚本来处理截获的数据，使用-s参数即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump -s script.py</span><br></pre></td></tr></table></figure><p><a href="http://xn--script-vy7ihu55yfpr8vg1omb7ltso830csz5bmn0cwlh.py" target="_blank" rel="noopener">这里指定了当前处理脚本为script.py</a>，它需要放置在当前命令执行的目录下。</p><p>我们可以在脚本里写入如下的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">    flow.request.headers['User-Agent'] = 'MitmProxy'</span><br><span class="line">    print(flow.request.headers)</span><br></pre></td></tr></table></figure><p>我们定义了一个request()方法，参数为flow，它其实是一个HTTPFlow对象，通过request属性即可获取到当前请求对象。然后打印输出了请求的请求头，将请求头的User-Agent修改成了MitmProxy。</p><p>运行之后我们在手机端访问http://httpbin.org/get，可以看到如下情况发生。</p><p>手机端的页面显示如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460361-d163ab00-3a77-11e9-8a36-0fbc600137b7.png" alt="image"></p><p>PC端控制台输出如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460370-daed1300-3a77-11e9-9cbb-3b7c30be4ad7.png" alt="image"></p><p>手机端返回结果的Headers实际上就是请求的Headers，User-Agent被修改成了mitmproxy。PC端控制台输出了修改后的Headers内容，其User-Agent的内容正是mitmproxy。</p><p>所以，通过这三行代码我们就可以完成对请求的改写。print()方法输出结果可以呈现在PC端控制台上，可以方便地进行调试。</p><h2 id="2-日志输出">2. 日志输出</h2><hr><p>mitmdump提供了专门的日志输出功能，可以设定不同级别以不同颜色输出结果。我们把脚本修改成如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">def request(flow):</span><br><span class="line">    flow.request.headers[&apos;User-Agent&apos;] = &apos;MitmProxy&apos;</span><br><span class="line">    ctx.log.info(str(flow.request.headers))</span><br><span class="line">    ctx.log.warn(str(flow.request.headers))</span><br><span class="line">    ctx.log.error(str(flow.request.headers))</span><br></pre></td></tr></table></figure><p>这里调用了ctx模块，它有一个log功能，调用不同的输出方法就可以输出不同颜色的结果，以方便我们做调试。例如，info()方法输出的内容是白色的，warn()方法输出的内容是黄色的，error()方法输出的内容是红色的。运行结果如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460406-0243e000-3a78-11e9-9fc2-6582d885369e.png" alt="image"></p><p>不同的颜色对应不同级别的输出，我们可以将不同的结果合理划分级别输出，以更直观方便地查看调试信息。</p><h2 id="3-request">3. Request</h2><hr><p>最开始我们实现了request()方法并且对Headers进行了修改。下面我们来看看Request还有哪些常用的功能。我们先用一个实例来感受一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">def request(flow):</span><br><span class="line">    request = flow.request</span><br><span class="line">    info = ctx.log.info</span><br><span class="line">    info(request.url)</span><br><span class="line">    info(str(request.headers))</span><br><span class="line">    info(str(request.cookies))</span><br><span class="line">    info(request.host)</span><br><span class="line">    info(request.method)</span><br><span class="line">    info(str(request.port))</span><br><span class="line">    info(request.scheme)</span><br></pre></td></tr></table></figure><p>我们修改脚本，然后在手机上打开百度，即可看到PC端控制台输出了一系列的请求，在这里我们找到第一个请求。控制台打印输出了Request的一些常见属性，如URL、Headers、Cookies、Host、Method、Scheme等。输出结果如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16996753/53460441-1851a080-3a78-11e9-9766-7da3fcb579ea.png" alt="image"></p><p>结果中分别输出了请求链接、请求头、请求Cookies、请求Host、请求方法、请求端口、请求协议这些内容。</p><p>同时我们还可以对任意属性进行修改，就像最初修改Headers一样，直接赋值即可。例如，这里将请求的URL修改一下，脚本修改如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def request(flow):</span><br><span class="line">    url = &apos;https://httpbin.org/get&apos;</span><br><span class="line">    flow.request.url = url</span><br></pre></td></tr></table></figure><p>手机端得到如下结果，如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460464-29021680-3a78-11e9-8407-97ff08b4edf9.png" alt="image"></p><p>比较有意思的是，浏览器最上方还是呈现百度的URL，但是页面已经变成了httpbin.org的页面了。另外，Cookies明显还是百度的Cookies。我们只是用简单的脚本就成功把请求修改为其他的站点。通过这种方式修改和伪造请求就变得轻而易举。</p><p>通过这个实例我们知道，有时候URL虽然是正确的，但是内容并非是正确的。我们需要进一步提高自己的安全防范意识。</p><p>Request还有很多属性，在此不再一一列举。更多属性可以参考：<a href="http://docs.mitmproxy.org/en/latest/scripting/api.html%E3%80%82" target="_blank" rel="noopener">http://docs.mitmproxy.org/en/latest/scripting/api.html。</a></p><p>只要我们了解了基本用法，会很容易地获取和修改Reqeust的任意内容，比如可以用修改Cookies、添加代理等方式来规避反爬。</p><h2 id="4-response">4. Response</h2><hr><p>对于爬虫来说，我们更加关心的其实是Response的内容，因为Response Body才是爬取的结果。对于Response来说，mitmdump也提供了对应的处理接口，就是response()方法。下面我们用一个实例感受一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">def response(flow):</span><br><span class="line">    response = flow.response</span><br><span class="line">    info = ctx.log.info</span><br><span class="line">    info(str(response.status_code))</span><br><span class="line">    info(str(response.headers))</span><br><span class="line">    info(str(response.cookies))</span><br><span class="line">    info(str(response.text))</span><br></pre></td></tr></table></figure><p>将脚本修改为如上内容，然后手机访问：<a href="http://httpbin.org/get%E3%80%82" target="_blank" rel="noopener">http://httpbin.org/get。</a></p><p>这里打印输出了Response的status_code、headers、cookies、text这几个属性，其中最主要的text属性就是网页的源代码。</p><p>PC端控制台输出如下图所示。<br><img src="https://user-images.githubusercontent.com/16996753/53460481-420ac780-3a78-11e9-9697-51ea32ba6670.png" alt="image"></p><p>控制台输出了Response的状态码、响应头、Cookies、响应体这几部分内容。</p><p>我们可以通过response()方法获取每个请求的响应内容。接下来再进行响应的信息提取和存储，我们就可以成功完成爬取了。</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/04/30/HTTPS-mitmproxy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017 年总结</title>
      <link>https://blog.tonystudio.ml/2018/01/01/2017-summary/</link>
      <guid>https://blog.tonystudio.ml/2018/01/01/2017-summary/</guid>
      <pubDate>Sun, 31 Dec 2017 16:15:22 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;2017年走过人生中最重要的三件大事：买房、结婚、生子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2017总结&quot;&gt;2017总结&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;学习方法的总结：&lt;/p&gt;
&lt;p&gt;联系 - 发现 - 重组&lt;/p&gt;
&lt;p&gt;在学校，我
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>2017年走过人生中最重要的三件大事：买房、结婚、生子。</p></blockquote><h1 id="2017总结">2017总结</h1><hr><p>学习方法的总结：</p><p>联系 - 发现 - 重组</p><p>在学校，我们学习的是技法，但是并不会教会我们智慧 (智慧是靠自己悟出来的)。</p><p>人民的名义</p><p>寒门再难出贵子</p><p>从《人民的名义》观照现实婚姻</p><p>Begin again - 拍摄是谱曲，后期是演奏</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2018/01/01/2017-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nginx配置</title>
      <link>https://blog.tonystudio.ml/2017/06/26/nginx-collect/</link>
      <guid>https://blog.tonystudio.ml/2017/06/26/nginx-collect/</guid>
      <pubDate>Mon, 26 Jun 2017 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 &lt;a href=&quot;http://segme
        
      
      </description>
      
      <content:encoded><![CDATA[<p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <a href="http://segmentfault.com/a/1190000002873747" target="_blank" rel="noopener">http://segmentfault.com/a/1190000002873747</a> ，ssl加密请参考 <a href="http://seanlook.com/2015/05/28/nginx-ssl/" target="_blank" rel="noopener">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p><p><img src="https://segmentfault.com/img/remote/1460000015385948" alt=""></p><h1 id="nginx常用配置">Nginx常用配置</h1><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dev-admin.paascloud.net;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:7020;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dev-login.paascloud.net;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:7010;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dev-mall.paascloud.net;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:7030;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dev-api.paascloud.net;</span><br><span class="line">    location ~ &#123;</span><br><span class="line">        proxy_pass   http://localhost:7979;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加nginx虚拟主机配置文件confd">增加nginx虚拟主机配置文件(conf.d)</h2><hr><p>新版本默认有 假如无的话</p><p>在原来文件/etc/nginx/nginx.conf 的http 块下加一句话就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure><h2 id="root用户问题">root用户问题</h2><hr><p>众所周知，sshd_config是sshd的配置文件，其中PermitRootLogin可以限定root用户通过ssh的登录方式，如禁止登陆、禁止密码登录、仅允许密钥登陆和开放登陆，以下是对可选项的概括：</p><p>/etc/ssh/sshd_config</p><p>yes|允许|没有限制|没有限制<br>without-password|允许|除密码以外|没有限制<br>forced-commands-only|允许|仅允许使用密钥|仅允许已授权的命令<br>no|不允许|N/A|N/A</p><p>但是这样还是不安全</p><p>对单个文件开放权限算了</p><p>chmod 777 /etc/nginx/nginx.conf</p><h1 id="nginx配置文件的整体结构">Nginx配置文件的整体结构</h1><hr><p><img src="https://segmentfault.com/img/remote/1460000015385949" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">user  nobody  nobody;</span><br><span class="line">worker_processes  3;</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">pid  logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    sendfile  on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  codesheep;</span><br><span class="line">        access_log  /codesheep/webserver/server1/log/access.log;</span><br><span class="line">        error_page  404  /404.html;</span><br><span class="line"></span><br><span class="line">        location /server1/location1 &#123;</span><br><span class="line">            root   /codesheep/webserver;</span><br><span class="line">            index  index.server2-location1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /server1/location2 &#123;</span><br><span class="line">        root   /codesheep/webserver;</span><br><span class="line">            index  index.server2-location2.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8089;</span><br><span class="line">        server_name  192.168.31.177;</span><br><span class="line">        access_log  /codesheep/webserver/server2/log/access.log;</span><br><span class="line">        error_page  404  /404.html;</span><br><span class="line">        </span><br><span class="line">        location /server2/location1 &#123;</span><br><span class="line">            root   /codesheep/webserver;</span><br><span class="line">            index  index.server2-location1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /srv2/loc2 &#123;</span><br><span class="line">            alias   /codesheep/webserver/server2/location2/;</span><br><span class="line">            index  index.server2-location2.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">            root /codesheep/webserver/;</span><br><span class="line">            index 404.html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx常见错误及处理方法">Nginx常见错误及处理方法</h1><hr><h2 id="404-bad-request">404 bad request</h2><hr><p>一般原因:请求的Header过大</p><p>解决方法：配置nginx.conf相关设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client_header_buffer_size 16k;</span><br><span class="line">large_client_header_buffers 4 64k;</span><br></pre></td></tr></table></figure><h2 id="500-internal-server-rrror">500 Internal Server Rrror</h2><hr><p>一般原因：</p><p>脚本错误，（php语法错误、lua语法错误）</p><p>访问量过大，系统资源限制，不能打开过多文件</p><p>磁盘空间不足。（access log开启可能导致磁盘满溢 关闭）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2017/06/26/nginx-collect/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Travis-CI</title>
      <link>https://blog.tonystudio.ml/2017/05/21/Travis-CI-Favicon/</link>
      <guid>https://blog.tonystudio.ml/2017/05/21/Travis-CI-Favicon/</guid>
      <pubDate>Sun, 21 May 2017 01:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Travis CI是在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。&lt;/p&gt;
&lt;h1 id=&quot;travis&quot;&gt;&lt;a href=&quot;https://travis-ci.org/&quot; targ
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Travis CI是在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。</p><h1 id="travis"><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis</a></h1><hr><p>首先，直接用你的GitHub账号登录Travis CI的网站：<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a></p><p>第一次登录时，授权给Travis访问你的GitHub代码库，然后，把需要CI的代码库选上:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git:</span><br><span class="line">  depth: 1</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - <span class="string">"10"</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line">before_script:</span><br><span class="line">  - npm install directory-tree remark remark-toc remark-html</span><br><span class="line">script:</span><br><span class="line">  - <span class="built_in">echo</span> <span class="string">'XD'</span></span><br><span class="line">after_success:</span><br><span class="line">  - git <span class="built_in">clone</span> -b gh-pages https://github.com/CoderTonyChan/libpku.git</span><br><span class="line">  - node index.js &gt; libpku/index.html</span><br><span class="line">  - <span class="built_in">cd</span> libpku</span><br><span class="line">  - git config --global user.email <span class="string">"travis@travis-ci.org"</span></span><br><span class="line">  - git config --global user.name <span class="string">"Travis CI"</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">'Add files via upload'</span></span><br><span class="line">  - git push https://<span class="variable">$&#123;DEPLOY_TOKEN&#125;</span>@github.com/CoderTonyChan/libpku.git gh-pages -f</span><br></pre></td></tr></table></figure><h1 id="favicon生成器">favicon生成器</h1><hr><p>在今天，制作一个符合多平台需求的Favicon是复杂而艰难的。你当然可以在网站根目录中内置一个老派的Favicon.ico，一个32×32的PNG图标和一个152×152的Apple Touch icon。但是，你也可以内置足以应付任何分辨率屏幕的一组图标，只是这样一来，工作量就非常恐怖了。</p><p>这个时候，你需要RealFaviconGenerator。和传统的Favicon生成器不一样，RealFaviconGenerator主要满足2大需求：编辑图标，和生成代码。</p><p>不同的平台使用截然不同的界面，所以需要为不同的平台生成不同的图标。RealFaviconGenerator自然不是在线的PS，但是RealFaviconGenerator通过设置可以帮你设计出符合不同平台需求的图标。比如，你可以为iOS设备生成带不透明背景的图标，以及符合Windows 8的白色图标。</p><p><img src="https://user-images.githubusercontent.com/16996753/56340994-2cc23780-61a3-11e9-90fc-6668eb60d453.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/16996753/56341001-4042c200-61e6-11e9-9c32-0bea4c15ab55.png" alt="image"></p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2017/05/21/Travis-CI-Favicon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>cocopods的坑</title>
      <link>https://blog.tonystudio.ml/2017/02/21/cocopods-collect/</link>
      <guid>https://blog.tonystudio.ml/2017/02/21/cocopods-collect/</guid>
      <pubDate>Tue, 21 Feb 2017 02:51:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;使用CocoaPods也有很长一段时间了，最近几个月的时间里也主导了公司私有Pods的创建和使用。在此期间踩过了不少坑，在踩坑的过程中也收获了不少经验，更加熟练地掌握了CocoaPods的一些指令的使用。本篇作为这段时间收获的备忘。&lt;/p&gt;
&lt;h1 id=&quot;多target时
        
      
      </description>
      
      <content:encoded><![CDATA[<p>使用CocoaPods也有很长一段时间了，最近几个月的时间里也主导了公司私有Pods的创建和使用。在此期间踩过了不少坑，在踩坑的过程中也收获了不少经验，更加熟练地掌握了CocoaPods的一些指令的使用。本篇作为这段时间收获的备忘。</p><h1 id="多target时podfile该如何写">多target时Podfile该如何写</h1><hr><p>我的建议是使用Ruby语法，定义不同的分组，然后不同的target可以自由选择依赖哪些分组，这种方式看起来更简洁，对于多target的项目来说也更友好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line"></span><br><span class="line">def commonPods #通用pods集</span><br><span class="line">    pod &apos;AFNetworking&apos;, &apos;~&gt; 2.0&apos;</span><br><span class="line">    pod &apos;Masonry&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def appOnlyPods #app专用pods集</span><br><span class="line">    pod &apos;MBProgressHUD&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def extensionPods #扩展专用pods集</span><br><span class="line">    pod &apos;GTSDKExtension&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target :TestCocoaPods do</span><br><span class="line">    commonPods</span><br><span class="line">    appOnlyPods</span><br><span class="line"></span><br><span class="line">    target :TestCocoaPodsTests do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    target :TestCocoaPodsUITests do</span><br><span class="line">        inherit! :search_paths</span><br><span class="line">        # Pods for testing</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target :SecondTarget do</span><br><span class="line">    commonPods</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="如何忽略pods警告">如何忽略Pods警告？</h1><hr><p>有些第三方Pod集成进来会有一大堆警告信息，如果你看着比较难受想把它忽略的话，在Podfile中对应的target或分组下加上关键字inhibit_all_warnings即可。</p><h1 id="如何直接引用第三方库中的头文件">如何直接引用第三方库中的头文件？</h1><hr><p>在用CocoaPods集成第三方库之后，默认情况下，我们需要使用类似#import &lt;XXX/YYY.h&gt;的方式引入第三方库的头文件。我们可以在Build Settings -&gt; User Header Search Paths中添加${SRCROOT}并设置成recursive，这样我们就可以直接使用#impot &quot;YYY.h&quot;这种方式了。</p><h1 id="修改pods中的源码为什么不生效">修改pods中的源码,为什么不生效?</h1><hr><p>每次编译编译器默认是不会再次编译pods中的代码, 修改后可以clean一下,然后再试</p><hr><p>Reference：</p><blockquote><p>GitHub Repo：<a href="https://github.com/CoderTonyChan/CoderTonyChan.github.io" target="_blank" rel="noopener">Tony Studio</a></p><p>Follow: <a href="https://github.com/CoderTonyChan" target="_blank" rel="noopener">CoderTonyCHan · GitHub</a></p></blockquote>]]></content:encoded>
      
      <comments>https://blog.tonystudio.ml/2017/02/21/cocopods-collect/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
